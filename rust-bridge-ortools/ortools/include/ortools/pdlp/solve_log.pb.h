// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/pdlp/solve_log.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "ortools/pdlp/solvers.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fpdlp_2fsolve_5flog_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fpdlp_2fsolve_5flog_2eproto;
namespace operations_research {
namespace pdlp {
class ConvergenceInformation;
struct ConvergenceInformationDefaultTypeInternal;
extern ConvergenceInformationDefaultTypeInternal _ConvergenceInformation_default_instance_;
class FeasibilityPolishingDetails;
struct FeasibilityPolishingDetailsDefaultTypeInternal;
extern FeasibilityPolishingDetailsDefaultTypeInternal _FeasibilityPolishingDetails_default_instance_;
class InfeasibilityInformation;
struct InfeasibilityInformationDefaultTypeInternal;
extern InfeasibilityInformationDefaultTypeInternal _InfeasibilityInformation_default_instance_;
class IterationStats;
struct IterationStatsDefaultTypeInternal;
extern IterationStatsDefaultTypeInternal _IterationStats_default_instance_;
class PointMetadata;
struct PointMetadataDefaultTypeInternal;
extern PointMetadataDefaultTypeInternal _PointMetadata_default_instance_;
class QuadraticProgramStats;
struct QuadraticProgramStatsDefaultTypeInternal;
extern QuadraticProgramStatsDefaultTypeInternal _QuadraticProgramStats_default_instance_;
class SolveLog;
struct SolveLogDefaultTypeInternal;
extern SolveLogDefaultTypeInternal _SolveLog_default_instance_;
}  // namespace pdlp
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace pdlp {
enum RestartChoice : int {
  RESTART_CHOICE_UNSPECIFIED = 0,
  RESTART_CHOICE_NO_RESTART = 1,
  RESTART_CHOICE_WEIGHTED_AVERAGE_RESET = 2,
  RESTART_CHOICE_RESTART_TO_AVERAGE = 3,
};

bool RestartChoice_IsValid(int value);
extern const uint32_t RestartChoice_internal_data_[];
constexpr RestartChoice RestartChoice_MIN = static_cast<RestartChoice>(0);
constexpr RestartChoice RestartChoice_MAX = static_cast<RestartChoice>(3);
constexpr int RestartChoice_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RestartChoice_descriptor();
template <typename T>
const std::string& RestartChoice_Name(T value) {
  static_assert(std::is_same<T, RestartChoice>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to RestartChoice_Name().");
  return RestartChoice_Name(static_cast<RestartChoice>(value));
}
template <>
inline const std::string& RestartChoice_Name(RestartChoice value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RestartChoice_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RestartChoice_Parse(absl::string_view name, RestartChoice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RestartChoice>(
      RestartChoice_descriptor(), name, value);
}
enum PointType : int {
  POINT_TYPE_UNSPECIFIED = 0,
  POINT_TYPE_CURRENT_ITERATE = 1,
  POINT_TYPE_ITERATE_DIFFERENCE = 2,
  POINT_TYPE_AVERAGE_ITERATE = 3,
  POINT_TYPE_NONE = 4,
  POINT_TYPE_PRESOLVER_SOLUTION = 5,
  POINT_TYPE_FEASIBILITY_POLISHING_SOLUTION = 6,
};

bool PointType_IsValid(int value);
extern const uint32_t PointType_internal_data_[];
constexpr PointType PointType_MIN = static_cast<PointType>(0);
constexpr PointType PointType_MAX = static_cast<PointType>(6);
constexpr int PointType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
PointType_descriptor();
template <typename T>
const std::string& PointType_Name(T value) {
  static_assert(std::is_same<T, PointType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PointType_Name().");
  return PointType_Name(static_cast<PointType>(value));
}
template <>
inline const std::string& PointType_Name(PointType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PointType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool PointType_Parse(absl::string_view name, PointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PointType>(
      PointType_descriptor(), name, value);
}
enum TerminationReason : int {
  TERMINATION_REASON_UNSPECIFIED = 0,
  TERMINATION_REASON_OPTIMAL = 1,
  TERMINATION_REASON_PRIMAL_INFEASIBLE = 2,
  TERMINATION_REASON_DUAL_INFEASIBLE = 3,
  TERMINATION_REASON_TIME_LIMIT = 4,
  TERMINATION_REASON_ITERATION_LIMIT = 5,
  TERMINATION_REASON_KKT_MATRIX_PASS_LIMIT = 8,
  TERMINATION_REASON_INTERRUPTED_BY_USER = 12,
  TERMINATION_REASON_NUMERICAL_ERROR = 6,
  TERMINATION_REASON_INVALID_PROBLEM = 9,
  TERMINATION_REASON_INVALID_INITIAL_SOLUTION = 13,
  TERMINATION_REASON_INVALID_PARAMETER = 10,
  TERMINATION_REASON_OTHER = 7,
  TERMINATION_REASON_PRIMAL_OR_DUAL_INFEASIBLE = 11,
};

bool TerminationReason_IsValid(int value);
extern const uint32_t TerminationReason_internal_data_[];
constexpr TerminationReason TerminationReason_MIN = static_cast<TerminationReason>(0);
constexpr TerminationReason TerminationReason_MAX = static_cast<TerminationReason>(13);
constexpr int TerminationReason_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
TerminationReason_descriptor();
template <typename T>
const std::string& TerminationReason_Name(T value) {
  static_assert(std::is_same<T, TerminationReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TerminationReason_Name().");
  return TerminationReason_Name(static_cast<TerminationReason>(value));
}
template <>
inline const std::string& TerminationReason_Name(TerminationReason value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TerminationReason_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool TerminationReason_Parse(absl::string_view name, TerminationReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TerminationReason>(
      TerminationReason_descriptor(), name, value);
}
enum PolishingPhaseType : int {
  POLISHING_PHASE_TYPE_UNSPECIFIED = 0,
  POLISHING_PHASE_TYPE_PRIMAL_FEASIBILITY = 1,
  POLISHING_PHASE_TYPE_DUAL_FEASIBILITY = 2,
};

bool PolishingPhaseType_IsValid(int value);
extern const uint32_t PolishingPhaseType_internal_data_[];
constexpr PolishingPhaseType PolishingPhaseType_MIN = static_cast<PolishingPhaseType>(0);
constexpr PolishingPhaseType PolishingPhaseType_MAX = static_cast<PolishingPhaseType>(2);
constexpr int PolishingPhaseType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
PolishingPhaseType_descriptor();
template <typename T>
const std::string& PolishingPhaseType_Name(T value) {
  static_assert(std::is_same<T, PolishingPhaseType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PolishingPhaseType_Name().");
  return PolishingPhaseType_Name(static_cast<PolishingPhaseType>(value));
}
template <>
inline const std::string& PolishingPhaseType_Name(PolishingPhaseType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PolishingPhaseType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool PolishingPhaseType_Parse(absl::string_view name, PolishingPhaseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolishingPhaseType>(
      PolishingPhaseType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class QuadraticProgramStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.QuadraticProgramStats) */ {
 public:
  inline QuadraticProgramStats() : QuadraticProgramStats(nullptr) {}
  ~QuadraticProgramStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuadraticProgramStats(::google::protobuf::internal::ConstantInitialized);

  inline QuadraticProgramStats(const QuadraticProgramStats& from)
      : QuadraticProgramStats(nullptr, from) {}
  QuadraticProgramStats(QuadraticProgramStats&& from) noexcept
    : QuadraticProgramStats() {
    *this = ::std::move(from);
  }

  inline QuadraticProgramStats& operator=(const QuadraticProgramStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuadraticProgramStats& operator=(QuadraticProgramStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuadraticProgramStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuadraticProgramStats* internal_default_instance() {
    return reinterpret_cast<const QuadraticProgramStats*>(
               &_QuadraticProgramStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QuadraticProgramStats& a, QuadraticProgramStats& b) {
    a.Swap(&b);
  }
  inline void Swap(QuadraticProgramStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuadraticProgramStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuadraticProgramStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuadraticProgramStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuadraticProgramStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QuadraticProgramStats& from) {
    QuadraticProgramStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuadraticProgramStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.QuadraticProgramStats";
  }
  protected:
  explicit QuadraticProgramStats(::google::protobuf::Arena* arena);
  QuadraticProgramStats(::google::protobuf::Arena* arena, const QuadraticProgramStats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumVariablesFieldNumber = 1,
    kNumConstraintsFieldNumber = 2,
    kConstraintMatrixColMinLInfNormFieldNumber = 3,
    kConstraintMatrixRowMinLInfNormFieldNumber = 4,
    kConstraintMatrixNumNonzerosFieldNumber = 5,
    kConstraintMatrixAbsMaxFieldNumber = 6,
    kConstraintMatrixAbsMinFieldNumber = 7,
    kConstraintMatrixAbsAvgFieldNumber = 8,
    kCombinedBoundsMaxFieldNumber = 9,
    kCombinedBoundsMinFieldNumber = 10,
    kCombinedBoundsAvgFieldNumber = 11,
    kVariableBoundGapsNumFiniteFieldNumber = 12,
    kVariableBoundGapsMaxFieldNumber = 13,
    kVariableBoundGapsMinFieldNumber = 14,
    kVariableBoundGapsAvgFieldNumber = 15,
    kObjectiveVectorAbsMaxFieldNumber = 16,
    kObjectiveVectorAbsMinFieldNumber = 17,
    kObjectiveVectorAbsAvgFieldNumber = 18,
    kObjectiveMatrixNumNonzerosFieldNumber = 19,
    kObjectiveMatrixAbsMaxFieldNumber = 20,
    kObjectiveMatrixAbsMinFieldNumber = 21,
    kObjectiveMatrixAbsAvgFieldNumber = 22,
    kObjectiveVectorL2NormFieldNumber = 23,
    kCombinedBoundsL2NormFieldNumber = 24,
    kConstraintMatrixL2NormFieldNumber = 25,
    kVariableBoundGapsL2NormFieldNumber = 26,
    kObjectiveMatrixL2NormFieldNumber = 27,
    kCombinedVariableBoundsMaxFieldNumber = 28,
    kCombinedVariableBoundsMinFieldNumber = 29,
    kCombinedVariableBoundsAvgFieldNumber = 30,
    kCombinedVariableBoundsL2NormFieldNumber = 31,
  };
  // optional int64 num_variables = 1;
  bool has_num_variables() const;
  void clear_num_variables() ;
  ::int64_t num_variables() const;
  void set_num_variables(::int64_t value);

  private:
  ::int64_t _internal_num_variables() const;
  void _internal_set_num_variables(::int64_t value);

  public:
  // optional int64 num_constraints = 2;
  bool has_num_constraints() const;
  void clear_num_constraints() ;
  ::int64_t num_constraints() const;
  void set_num_constraints(::int64_t value);

  private:
  ::int64_t _internal_num_constraints() const;
  void _internal_set_num_constraints(::int64_t value);

  public:
  // optional double constraint_matrix_col_min_l_inf_norm = 3;
  bool has_constraint_matrix_col_min_l_inf_norm() const;
  void clear_constraint_matrix_col_min_l_inf_norm() ;
  double constraint_matrix_col_min_l_inf_norm() const;
  void set_constraint_matrix_col_min_l_inf_norm(double value);

  private:
  double _internal_constraint_matrix_col_min_l_inf_norm() const;
  void _internal_set_constraint_matrix_col_min_l_inf_norm(double value);

  public:
  // optional double constraint_matrix_row_min_l_inf_norm = 4;
  bool has_constraint_matrix_row_min_l_inf_norm() const;
  void clear_constraint_matrix_row_min_l_inf_norm() ;
  double constraint_matrix_row_min_l_inf_norm() const;
  void set_constraint_matrix_row_min_l_inf_norm(double value);

  private:
  double _internal_constraint_matrix_row_min_l_inf_norm() const;
  void _internal_set_constraint_matrix_row_min_l_inf_norm(double value);

  public:
  // optional int64 constraint_matrix_num_nonzeros = 5;
  bool has_constraint_matrix_num_nonzeros() const;
  void clear_constraint_matrix_num_nonzeros() ;
  ::int64_t constraint_matrix_num_nonzeros() const;
  void set_constraint_matrix_num_nonzeros(::int64_t value);

  private:
  ::int64_t _internal_constraint_matrix_num_nonzeros() const;
  void _internal_set_constraint_matrix_num_nonzeros(::int64_t value);

  public:
  // optional double constraint_matrix_abs_max = 6;
  bool has_constraint_matrix_abs_max() const;
  void clear_constraint_matrix_abs_max() ;
  double constraint_matrix_abs_max() const;
  void set_constraint_matrix_abs_max(double value);

  private:
  double _internal_constraint_matrix_abs_max() const;
  void _internal_set_constraint_matrix_abs_max(double value);

  public:
  // optional double constraint_matrix_abs_min = 7;
  bool has_constraint_matrix_abs_min() const;
  void clear_constraint_matrix_abs_min() ;
  double constraint_matrix_abs_min() const;
  void set_constraint_matrix_abs_min(double value);

  private:
  double _internal_constraint_matrix_abs_min() const;
  void _internal_set_constraint_matrix_abs_min(double value);

  public:
  // optional double constraint_matrix_abs_avg = 8;
  bool has_constraint_matrix_abs_avg() const;
  void clear_constraint_matrix_abs_avg() ;
  double constraint_matrix_abs_avg() const;
  void set_constraint_matrix_abs_avg(double value);

  private:
  double _internal_constraint_matrix_abs_avg() const;
  void _internal_set_constraint_matrix_abs_avg(double value);

  public:
  // optional double combined_bounds_max = 9;
  bool has_combined_bounds_max() const;
  void clear_combined_bounds_max() ;
  double combined_bounds_max() const;
  void set_combined_bounds_max(double value);

  private:
  double _internal_combined_bounds_max() const;
  void _internal_set_combined_bounds_max(double value);

  public:
  // optional double combined_bounds_min = 10;
  bool has_combined_bounds_min() const;
  void clear_combined_bounds_min() ;
  double combined_bounds_min() const;
  void set_combined_bounds_min(double value);

  private:
  double _internal_combined_bounds_min() const;
  void _internal_set_combined_bounds_min(double value);

  public:
  // optional double combined_bounds_avg = 11;
  bool has_combined_bounds_avg() const;
  void clear_combined_bounds_avg() ;
  double combined_bounds_avg() const;
  void set_combined_bounds_avg(double value);

  private:
  double _internal_combined_bounds_avg() const;
  void _internal_set_combined_bounds_avg(double value);

  public:
  // optional int64 variable_bound_gaps_num_finite = 12;
  bool has_variable_bound_gaps_num_finite() const;
  void clear_variable_bound_gaps_num_finite() ;
  ::int64_t variable_bound_gaps_num_finite() const;
  void set_variable_bound_gaps_num_finite(::int64_t value);

  private:
  ::int64_t _internal_variable_bound_gaps_num_finite() const;
  void _internal_set_variable_bound_gaps_num_finite(::int64_t value);

  public:
  // optional double variable_bound_gaps_max = 13;
  bool has_variable_bound_gaps_max() const;
  void clear_variable_bound_gaps_max() ;
  double variable_bound_gaps_max() const;
  void set_variable_bound_gaps_max(double value);

  private:
  double _internal_variable_bound_gaps_max() const;
  void _internal_set_variable_bound_gaps_max(double value);

  public:
  // optional double variable_bound_gaps_min = 14;
  bool has_variable_bound_gaps_min() const;
  void clear_variable_bound_gaps_min() ;
  double variable_bound_gaps_min() const;
  void set_variable_bound_gaps_min(double value);

  private:
  double _internal_variable_bound_gaps_min() const;
  void _internal_set_variable_bound_gaps_min(double value);

  public:
  // optional double variable_bound_gaps_avg = 15;
  bool has_variable_bound_gaps_avg() const;
  void clear_variable_bound_gaps_avg() ;
  double variable_bound_gaps_avg() const;
  void set_variable_bound_gaps_avg(double value);

  private:
  double _internal_variable_bound_gaps_avg() const;
  void _internal_set_variable_bound_gaps_avg(double value);

  public:
  // optional double objective_vector_abs_max = 16;
  bool has_objective_vector_abs_max() const;
  void clear_objective_vector_abs_max() ;
  double objective_vector_abs_max() const;
  void set_objective_vector_abs_max(double value);

  private:
  double _internal_objective_vector_abs_max() const;
  void _internal_set_objective_vector_abs_max(double value);

  public:
  // optional double objective_vector_abs_min = 17;
  bool has_objective_vector_abs_min() const;
  void clear_objective_vector_abs_min() ;
  double objective_vector_abs_min() const;
  void set_objective_vector_abs_min(double value);

  private:
  double _internal_objective_vector_abs_min() const;
  void _internal_set_objective_vector_abs_min(double value);

  public:
  // optional double objective_vector_abs_avg = 18;
  bool has_objective_vector_abs_avg() const;
  void clear_objective_vector_abs_avg() ;
  double objective_vector_abs_avg() const;
  void set_objective_vector_abs_avg(double value);

  private:
  double _internal_objective_vector_abs_avg() const;
  void _internal_set_objective_vector_abs_avg(double value);

  public:
  // optional int64 objective_matrix_num_nonzeros = 19;
  bool has_objective_matrix_num_nonzeros() const;
  void clear_objective_matrix_num_nonzeros() ;
  ::int64_t objective_matrix_num_nonzeros() const;
  void set_objective_matrix_num_nonzeros(::int64_t value);

  private:
  ::int64_t _internal_objective_matrix_num_nonzeros() const;
  void _internal_set_objective_matrix_num_nonzeros(::int64_t value);

  public:
  // optional double objective_matrix_abs_max = 20;
  bool has_objective_matrix_abs_max() const;
  void clear_objective_matrix_abs_max() ;
  double objective_matrix_abs_max() const;
  void set_objective_matrix_abs_max(double value);

  private:
  double _internal_objective_matrix_abs_max() const;
  void _internal_set_objective_matrix_abs_max(double value);

  public:
  // optional double objective_matrix_abs_min = 21;
  bool has_objective_matrix_abs_min() const;
  void clear_objective_matrix_abs_min() ;
  double objective_matrix_abs_min() const;
  void set_objective_matrix_abs_min(double value);

  private:
  double _internal_objective_matrix_abs_min() const;
  void _internal_set_objective_matrix_abs_min(double value);

  public:
  // optional double objective_matrix_abs_avg = 22;
  bool has_objective_matrix_abs_avg() const;
  void clear_objective_matrix_abs_avg() ;
  double objective_matrix_abs_avg() const;
  void set_objective_matrix_abs_avg(double value);

  private:
  double _internal_objective_matrix_abs_avg() const;
  void _internal_set_objective_matrix_abs_avg(double value);

  public:
  // optional double objective_vector_l2_norm = 23;
  bool has_objective_vector_l2_norm() const;
  void clear_objective_vector_l2_norm() ;
  double objective_vector_l2_norm() const;
  void set_objective_vector_l2_norm(double value);

  private:
  double _internal_objective_vector_l2_norm() const;
  void _internal_set_objective_vector_l2_norm(double value);

  public:
  // optional double combined_bounds_l2_norm = 24;
  bool has_combined_bounds_l2_norm() const;
  void clear_combined_bounds_l2_norm() ;
  double combined_bounds_l2_norm() const;
  void set_combined_bounds_l2_norm(double value);

  private:
  double _internal_combined_bounds_l2_norm() const;
  void _internal_set_combined_bounds_l2_norm(double value);

  public:
  // optional double constraint_matrix_l2_norm = 25;
  bool has_constraint_matrix_l2_norm() const;
  void clear_constraint_matrix_l2_norm() ;
  double constraint_matrix_l2_norm() const;
  void set_constraint_matrix_l2_norm(double value);

  private:
  double _internal_constraint_matrix_l2_norm() const;
  void _internal_set_constraint_matrix_l2_norm(double value);

  public:
  // optional double variable_bound_gaps_l2_norm = 26;
  bool has_variable_bound_gaps_l2_norm() const;
  void clear_variable_bound_gaps_l2_norm() ;
  double variable_bound_gaps_l2_norm() const;
  void set_variable_bound_gaps_l2_norm(double value);

  private:
  double _internal_variable_bound_gaps_l2_norm() const;
  void _internal_set_variable_bound_gaps_l2_norm(double value);

  public:
  // optional double objective_matrix_l2_norm = 27;
  bool has_objective_matrix_l2_norm() const;
  void clear_objective_matrix_l2_norm() ;
  double objective_matrix_l2_norm() const;
  void set_objective_matrix_l2_norm(double value);

  private:
  double _internal_objective_matrix_l2_norm() const;
  void _internal_set_objective_matrix_l2_norm(double value);

  public:
  // optional double combined_variable_bounds_max = 28;
  bool has_combined_variable_bounds_max() const;
  void clear_combined_variable_bounds_max() ;
  double combined_variable_bounds_max() const;
  void set_combined_variable_bounds_max(double value);

  private:
  double _internal_combined_variable_bounds_max() const;
  void _internal_set_combined_variable_bounds_max(double value);

  public:
  // optional double combined_variable_bounds_min = 29;
  bool has_combined_variable_bounds_min() const;
  void clear_combined_variable_bounds_min() ;
  double combined_variable_bounds_min() const;
  void set_combined_variable_bounds_min(double value);

  private:
  double _internal_combined_variable_bounds_min() const;
  void _internal_set_combined_variable_bounds_min(double value);

  public:
  // optional double combined_variable_bounds_avg = 30;
  bool has_combined_variable_bounds_avg() const;
  void clear_combined_variable_bounds_avg() ;
  double combined_variable_bounds_avg() const;
  void set_combined_variable_bounds_avg(double value);

  private:
  double _internal_combined_variable_bounds_avg() const;
  void _internal_set_combined_variable_bounds_avg(double value);

  public:
  // optional double combined_variable_bounds_l2_norm = 31;
  bool has_combined_variable_bounds_l2_norm() const;
  void clear_combined_variable_bounds_l2_norm() ;
  double combined_variable_bounds_l2_norm() const;
  void set_combined_variable_bounds_l2_norm(double value);

  private:
  double _internal_combined_variable_bounds_l2_norm() const;
  void _internal_set_combined_variable_bounds_l2_norm(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.QuadraticProgramStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 31, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t num_variables_;
    ::int64_t num_constraints_;
    double constraint_matrix_col_min_l_inf_norm_;
    double constraint_matrix_row_min_l_inf_norm_;
    ::int64_t constraint_matrix_num_nonzeros_;
    double constraint_matrix_abs_max_;
    double constraint_matrix_abs_min_;
    double constraint_matrix_abs_avg_;
    double combined_bounds_max_;
    double combined_bounds_min_;
    double combined_bounds_avg_;
    ::int64_t variable_bound_gaps_num_finite_;
    double variable_bound_gaps_max_;
    double variable_bound_gaps_min_;
    double variable_bound_gaps_avg_;
    double objective_vector_abs_max_;
    double objective_vector_abs_min_;
    double objective_vector_abs_avg_;
    ::int64_t objective_matrix_num_nonzeros_;
    double objective_matrix_abs_max_;
    double objective_matrix_abs_min_;
    double objective_matrix_abs_avg_;
    double objective_vector_l2_norm_;
    double combined_bounds_l2_norm_;
    double constraint_matrix_l2_norm_;
    double variable_bound_gaps_l2_norm_;
    double objective_matrix_l2_norm_;
    double combined_variable_bounds_max_;
    double combined_variable_bounds_min_;
    double combined_variable_bounds_avg_;
    double combined_variable_bounds_l2_norm_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class PointMetadata final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.PointMetadata) */ {
 public:
  inline PointMetadata() : PointMetadata(nullptr) {}
  ~PointMetadata() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PointMetadata(::google::protobuf::internal::ConstantInitialized);

  inline PointMetadata(const PointMetadata& from)
      : PointMetadata(nullptr, from) {}
  PointMetadata(PointMetadata&& from) noexcept
    : PointMetadata() {
    *this = ::std::move(from);
  }

  inline PointMetadata& operator=(const PointMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointMetadata& operator=(PointMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointMetadata* internal_default_instance() {
    return reinterpret_cast<const PointMetadata*>(
               &_PointMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PointMetadata& a, PointMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(PointMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointMetadata* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointMetadata>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PointMetadata& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PointMetadata& from) {
    PointMetadata::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PointMetadata* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.PointMetadata";
  }
  protected:
  explicit PointMetadata(::google::protobuf::Arena* arena);
  PointMetadata(::google::protobuf::Arena* arena, const PointMetadata& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRandomPrimalProjectionsFieldNumber = 2,
    kRandomDualProjectionsFieldNumber = 3,
    kActivePrimalVariableCountFieldNumber = 4,
    kActiveDualVariableCountFieldNumber = 5,
    kActivePrimalVariableChangeFieldNumber = 6,
    kActiveDualVariableChangeFieldNumber = 7,
    kPointTypeFieldNumber = 1,
  };
  // repeated double random_primal_projections = 2 [packed = true];
  int random_primal_projections_size() const;
  private:
  int _internal_random_primal_projections_size() const;

  public:
  void clear_random_primal_projections() ;
  double random_primal_projections(int index) const;
  void set_random_primal_projections(int index, double value);
  void add_random_primal_projections(double value);
  const ::google::protobuf::RepeatedField<double>& random_primal_projections() const;
  ::google::protobuf::RepeatedField<double>* mutable_random_primal_projections();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_random_primal_projections() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_random_primal_projections();

  public:
  // repeated double random_dual_projections = 3 [packed = true];
  int random_dual_projections_size() const;
  private:
  int _internal_random_dual_projections_size() const;

  public:
  void clear_random_dual_projections() ;
  double random_dual_projections(int index) const;
  void set_random_dual_projections(int index, double value);
  void add_random_dual_projections(double value);
  const ::google::protobuf::RepeatedField<double>& random_dual_projections() const;
  ::google::protobuf::RepeatedField<double>* mutable_random_dual_projections();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_random_dual_projections() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_random_dual_projections();

  public:
  // optional int64 active_primal_variable_count = 4;
  bool has_active_primal_variable_count() const;
  void clear_active_primal_variable_count() ;
  ::int64_t active_primal_variable_count() const;
  void set_active_primal_variable_count(::int64_t value);

  private:
  ::int64_t _internal_active_primal_variable_count() const;
  void _internal_set_active_primal_variable_count(::int64_t value);

  public:
  // optional int64 active_dual_variable_count = 5;
  bool has_active_dual_variable_count() const;
  void clear_active_dual_variable_count() ;
  ::int64_t active_dual_variable_count() const;
  void set_active_dual_variable_count(::int64_t value);

  private:
  ::int64_t _internal_active_dual_variable_count() const;
  void _internal_set_active_dual_variable_count(::int64_t value);

  public:
  // optional int64 active_primal_variable_change = 6;
  bool has_active_primal_variable_change() const;
  void clear_active_primal_variable_change() ;
  ::int64_t active_primal_variable_change() const;
  void set_active_primal_variable_change(::int64_t value);

  private:
  ::int64_t _internal_active_primal_variable_change() const;
  void _internal_set_active_primal_variable_change(::int64_t value);

  public:
  // optional int64 active_dual_variable_change = 7;
  bool has_active_dual_variable_change() const;
  void clear_active_dual_variable_change() ;
  ::int64_t active_dual_variable_change() const;
  void set_active_dual_variable_change(::int64_t value);

  private:
  ::int64_t _internal_active_dual_variable_change() const;
  void _internal_set_active_dual_variable_change(::int64_t value);

  public:
  // optional .operations_research.pdlp.PointType point_type = 1;
  bool has_point_type() const;
  void clear_point_type() ;
  ::operations_research::pdlp::PointType point_type() const;
  void set_point_type(::operations_research::pdlp::PointType value);

  private:
  ::operations_research::pdlp::PointType _internal_point_type() const;
  void _internal_set_point_type(::operations_research::pdlp::PointType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.PointMetadata)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<double> random_primal_projections_;
    ::google::protobuf::RepeatedField<double> random_dual_projections_;
    ::int64_t active_primal_variable_count_;
    ::int64_t active_dual_variable_count_;
    ::int64_t active_primal_variable_change_;
    ::int64_t active_dual_variable_change_;
    int point_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class InfeasibilityInformation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.InfeasibilityInformation) */ {
 public:
  inline InfeasibilityInformation() : InfeasibilityInformation(nullptr) {}
  ~InfeasibilityInformation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InfeasibilityInformation(::google::protobuf::internal::ConstantInitialized);

  inline InfeasibilityInformation(const InfeasibilityInformation& from)
      : InfeasibilityInformation(nullptr, from) {}
  InfeasibilityInformation(InfeasibilityInformation&& from) noexcept
    : InfeasibilityInformation() {
    *this = ::std::move(from);
  }

  inline InfeasibilityInformation& operator=(const InfeasibilityInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfeasibilityInformation& operator=(InfeasibilityInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfeasibilityInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfeasibilityInformation* internal_default_instance() {
    return reinterpret_cast<const InfeasibilityInformation*>(
               &_InfeasibilityInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InfeasibilityInformation& a, InfeasibilityInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(InfeasibilityInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfeasibilityInformation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfeasibilityInformation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfeasibilityInformation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InfeasibilityInformation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InfeasibilityInformation& from) {
    InfeasibilityInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InfeasibilityInformation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.InfeasibilityInformation";
  }
  protected:
  explicit InfeasibilityInformation(::google::protobuf::Arena* arena);
  InfeasibilityInformation(::google::protobuf::Arena* arena, const InfeasibilityInformation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxPrimalRayInfeasibilityFieldNumber = 1,
    kPrimalRayLinearObjectiveFieldNumber = 2,
    kPrimalRayQuadraticNormFieldNumber = 3,
    kMaxDualRayInfeasibilityFieldNumber = 4,
    kDualRayObjectiveFieldNumber = 5,
    kCandidateTypeFieldNumber = 6,
  };
  // optional double max_primal_ray_infeasibility = 1;
  bool has_max_primal_ray_infeasibility() const;
  void clear_max_primal_ray_infeasibility() ;
  double max_primal_ray_infeasibility() const;
  void set_max_primal_ray_infeasibility(double value);

  private:
  double _internal_max_primal_ray_infeasibility() const;
  void _internal_set_max_primal_ray_infeasibility(double value);

  public:
  // optional double primal_ray_linear_objective = 2;
  bool has_primal_ray_linear_objective() const;
  void clear_primal_ray_linear_objective() ;
  double primal_ray_linear_objective() const;
  void set_primal_ray_linear_objective(double value);

  private:
  double _internal_primal_ray_linear_objective() const;
  void _internal_set_primal_ray_linear_objective(double value);

  public:
  // optional double primal_ray_quadratic_norm = 3;
  bool has_primal_ray_quadratic_norm() const;
  void clear_primal_ray_quadratic_norm() ;
  double primal_ray_quadratic_norm() const;
  void set_primal_ray_quadratic_norm(double value);

  private:
  double _internal_primal_ray_quadratic_norm() const;
  void _internal_set_primal_ray_quadratic_norm(double value);

  public:
  // optional double max_dual_ray_infeasibility = 4;
  bool has_max_dual_ray_infeasibility() const;
  void clear_max_dual_ray_infeasibility() ;
  double max_dual_ray_infeasibility() const;
  void set_max_dual_ray_infeasibility(double value);

  private:
  double _internal_max_dual_ray_infeasibility() const;
  void _internal_set_max_dual_ray_infeasibility(double value);

  public:
  // optional double dual_ray_objective = 5;
  bool has_dual_ray_objective() const;
  void clear_dual_ray_objective() ;
  double dual_ray_objective() const;
  void set_dual_ray_objective(double value);

  private:
  double _internal_dual_ray_objective() const;
  void _internal_set_dual_ray_objective(double value);

  public:
  // optional .operations_research.pdlp.PointType candidate_type = 6;
  bool has_candidate_type() const;
  void clear_candidate_type() ;
  ::operations_research::pdlp::PointType candidate_type() const;
  void set_candidate_type(::operations_research::pdlp::PointType value);

  private:
  ::operations_research::pdlp::PointType _internal_candidate_type() const;
  void _internal_set_candidate_type(::operations_research::pdlp::PointType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.InfeasibilityInformation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double max_primal_ray_infeasibility_;
    double primal_ray_linear_objective_;
    double primal_ray_quadratic_norm_;
    double max_dual_ray_infeasibility_;
    double dual_ray_objective_;
    int candidate_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class ConvergenceInformation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.ConvergenceInformation) */ {
 public:
  inline ConvergenceInformation() : ConvergenceInformation(nullptr) {}
  ~ConvergenceInformation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConvergenceInformation(::google::protobuf::internal::ConstantInitialized);

  inline ConvergenceInformation(const ConvergenceInformation& from)
      : ConvergenceInformation(nullptr, from) {}
  ConvergenceInformation(ConvergenceInformation&& from) noexcept
    : ConvergenceInformation() {
    *this = ::std::move(from);
  }

  inline ConvergenceInformation& operator=(const ConvergenceInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConvergenceInformation& operator=(ConvergenceInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConvergenceInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConvergenceInformation* internal_default_instance() {
    return reinterpret_cast<const ConvergenceInformation*>(
               &_ConvergenceInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConvergenceInformation& a, ConvergenceInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ConvergenceInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConvergenceInformation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConvergenceInformation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConvergenceInformation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConvergenceInformation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConvergenceInformation& from) {
    ConvergenceInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConvergenceInformation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.ConvergenceInformation";
  }
  protected:
  explicit ConvergenceInformation(::google::protobuf::Arena* arena);
  ConvergenceInformation(::google::protobuf::Arena* arena, const ConvergenceInformation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrimalObjectiveFieldNumber = 2,
    kDualObjectiveFieldNumber = 3,
    kCorrectedDualObjectiveFieldNumber = 4,
    kLInfPrimalResidualFieldNumber = 5,
    kL2PrimalResidualFieldNumber = 6,
    kLInfDualResidualFieldNumber = 7,
    kL2DualResidualFieldNumber = 8,
    kLInfPrimalVariableFieldNumber = 14,
    kL2PrimalVariableFieldNumber = 15,
    kLInfDualVariableFieldNumber = 16,
    kL2DualVariableFieldNumber = 17,
    kLInfComponentwisePrimalResidualFieldNumber = 24,
    kLInfComponentwiseDualResidualFieldNumber = 25,
    kCandidateTypeFieldNumber = 1,
  };
  // optional double primal_objective = 2;
  bool has_primal_objective() const;
  void clear_primal_objective() ;
  double primal_objective() const;
  void set_primal_objective(double value);

  private:
  double _internal_primal_objective() const;
  void _internal_set_primal_objective(double value);

  public:
  // optional double dual_objective = 3;
  bool has_dual_objective() const;
  void clear_dual_objective() ;
  double dual_objective() const;
  void set_dual_objective(double value);

  private:
  double _internal_dual_objective() const;
  void _internal_set_dual_objective(double value);

  public:
  // optional double corrected_dual_objective = 4;
  bool has_corrected_dual_objective() const;
  void clear_corrected_dual_objective() ;
  double corrected_dual_objective() const;
  void set_corrected_dual_objective(double value);

  private:
  double _internal_corrected_dual_objective() const;
  void _internal_set_corrected_dual_objective(double value);

  public:
  // optional double l_inf_primal_residual = 5;
  bool has_l_inf_primal_residual() const;
  void clear_l_inf_primal_residual() ;
  double l_inf_primal_residual() const;
  void set_l_inf_primal_residual(double value);

  private:
  double _internal_l_inf_primal_residual() const;
  void _internal_set_l_inf_primal_residual(double value);

  public:
  // optional double l2_primal_residual = 6;
  bool has_l2_primal_residual() const;
  void clear_l2_primal_residual() ;
  double l2_primal_residual() const;
  void set_l2_primal_residual(double value);

  private:
  double _internal_l2_primal_residual() const;
  void _internal_set_l2_primal_residual(double value);

  public:
  // optional double l_inf_dual_residual = 7;
  bool has_l_inf_dual_residual() const;
  void clear_l_inf_dual_residual() ;
  double l_inf_dual_residual() const;
  void set_l_inf_dual_residual(double value);

  private:
  double _internal_l_inf_dual_residual() const;
  void _internal_set_l_inf_dual_residual(double value);

  public:
  // optional double l2_dual_residual = 8;
  bool has_l2_dual_residual() const;
  void clear_l2_dual_residual() ;
  double l2_dual_residual() const;
  void set_l2_dual_residual(double value);

  private:
  double _internal_l2_dual_residual() const;
  void _internal_set_l2_dual_residual(double value);

  public:
  // optional double l_inf_primal_variable = 14;
  bool has_l_inf_primal_variable() const;
  void clear_l_inf_primal_variable() ;
  double l_inf_primal_variable() const;
  void set_l_inf_primal_variable(double value);

  private:
  double _internal_l_inf_primal_variable() const;
  void _internal_set_l_inf_primal_variable(double value);

  public:
  // optional double l2_primal_variable = 15;
  bool has_l2_primal_variable() const;
  void clear_l2_primal_variable() ;
  double l2_primal_variable() const;
  void set_l2_primal_variable(double value);

  private:
  double _internal_l2_primal_variable() const;
  void _internal_set_l2_primal_variable(double value);

  public:
  // optional double l_inf_dual_variable = 16;
  bool has_l_inf_dual_variable() const;
  void clear_l_inf_dual_variable() ;
  double l_inf_dual_variable() const;
  void set_l_inf_dual_variable(double value);

  private:
  double _internal_l_inf_dual_variable() const;
  void _internal_set_l_inf_dual_variable(double value);

  public:
  // optional double l2_dual_variable = 17;
  bool has_l2_dual_variable() const;
  void clear_l2_dual_variable() ;
  double l2_dual_variable() const;
  void set_l2_dual_variable(double value);

  private:
  double _internal_l2_dual_variable() const;
  void _internal_set_l2_dual_variable(double value);

  public:
  // optional double l_inf_componentwise_primal_residual = 24;
  bool has_l_inf_componentwise_primal_residual() const;
  void clear_l_inf_componentwise_primal_residual() ;
  double l_inf_componentwise_primal_residual() const;
  void set_l_inf_componentwise_primal_residual(double value);

  private:
  double _internal_l_inf_componentwise_primal_residual() const;
  void _internal_set_l_inf_componentwise_primal_residual(double value);

  public:
  // optional double l_inf_componentwise_dual_residual = 25;
  bool has_l_inf_componentwise_dual_residual() const;
  void clear_l_inf_componentwise_dual_residual() ;
  double l_inf_componentwise_dual_residual() const;
  void set_l_inf_componentwise_dual_residual(double value);

  private:
  double _internal_l_inf_componentwise_dual_residual() const;
  void _internal_set_l_inf_componentwise_dual_residual(double value);

  public:
  // optional .operations_research.pdlp.PointType candidate_type = 1;
  bool has_candidate_type() const;
  void clear_candidate_type() ;
  ::operations_research::pdlp::PointType candidate_type() const;
  void set_candidate_type(::operations_research::pdlp::PointType value);

  private:
  ::operations_research::pdlp::PointType _internal_candidate_type() const;
  void _internal_set_candidate_type(::operations_research::pdlp::PointType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.ConvergenceInformation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    double primal_objective_;
    double dual_objective_;
    double corrected_dual_objective_;
    double l_inf_primal_residual_;
    double l2_primal_residual_;
    double l_inf_dual_residual_;
    double l2_dual_residual_;
    double l_inf_primal_variable_;
    double l2_primal_variable_;
    double l_inf_dual_variable_;
    double l2_dual_variable_;
    double l_inf_componentwise_primal_residual_;
    double l_inf_componentwise_dual_residual_;
    int candidate_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class IterationStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.IterationStats) */ {
 public:
  inline IterationStats() : IterationStats(nullptr) {}
  ~IterationStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IterationStats(::google::protobuf::internal::ConstantInitialized);

  inline IterationStats(const IterationStats& from)
      : IterationStats(nullptr, from) {}
  IterationStats(IterationStats&& from) noexcept
    : IterationStats() {
    *this = ::std::move(from);
  }

  inline IterationStats& operator=(const IterationStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline IterationStats& operator=(IterationStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IterationStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const IterationStats* internal_default_instance() {
    return reinterpret_cast<const IterationStats*>(
               &_IterationStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(IterationStats& a, IterationStats& b) {
    a.Swap(&b);
  }
  inline void Swap(IterationStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IterationStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IterationStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IterationStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IterationStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IterationStats& from) {
    IterationStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IterationStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.IterationStats";
  }
  protected:
  explicit IterationStats(::google::protobuf::Arena* arena);
  IterationStats(::google::protobuf::Arena* arena, const IterationStats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConvergenceInformationFieldNumber = 2,
    kInfeasibilityInformationFieldNumber = 3,
    kPointMetadataFieldNumber = 11,
    kIterationNumberFieldNumber = 1,
    kCumulativeRejectedStepsFieldNumber = 5,
    kCumulativeKktMatrixPassesFieldNumber = 4,
    kCumulativeTimeSecFieldNumber = 6,
    kStepSizeFieldNumber = 8,
    kPrimalWeightFieldNumber = 9,
    kRestartUsedFieldNumber = 7,
  };
  // repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
  int convergence_information_size() const;
  private:
  int _internal_convergence_information_size() const;

  public:
  void clear_convergence_information() ;
  ::operations_research::pdlp::ConvergenceInformation* mutable_convergence_information(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >*
      mutable_convergence_information();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>& _internal_convergence_information() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>* _internal_mutable_convergence_information();
  public:
  const ::operations_research::pdlp::ConvergenceInformation& convergence_information(int index) const;
  ::operations_research::pdlp::ConvergenceInformation* add_convergence_information();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation >&
      convergence_information() const;
  // repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
  int infeasibility_information_size() const;
  private:
  int _internal_infeasibility_information_size() const;

  public:
  void clear_infeasibility_information() ;
  ::operations_research::pdlp::InfeasibilityInformation* mutable_infeasibility_information(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >*
      mutable_infeasibility_information();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>& _internal_infeasibility_information() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>* _internal_mutable_infeasibility_information();
  public:
  const ::operations_research::pdlp::InfeasibilityInformation& infeasibility_information(int index) const;
  ::operations_research::pdlp::InfeasibilityInformation* add_infeasibility_information();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation >&
      infeasibility_information() const;
  // repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
  int point_metadata_size() const;
  private:
  int _internal_point_metadata_size() const;

  public:
  void clear_point_metadata() ;
  ::operations_research::pdlp::PointMetadata* mutable_point_metadata(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >*
      mutable_point_metadata();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>& _internal_point_metadata() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>* _internal_mutable_point_metadata();
  public:
  const ::operations_research::pdlp::PointMetadata& point_metadata(int index) const;
  ::operations_research::pdlp::PointMetadata* add_point_metadata();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::PointMetadata >&
      point_metadata() const;
  // optional int32 iteration_number = 1;
  bool has_iteration_number() const;
  void clear_iteration_number() ;
  ::int32_t iteration_number() const;
  void set_iteration_number(::int32_t value);

  private:
  ::int32_t _internal_iteration_number() const;
  void _internal_set_iteration_number(::int32_t value);

  public:
  // optional int32 cumulative_rejected_steps = 5;
  bool has_cumulative_rejected_steps() const;
  void clear_cumulative_rejected_steps() ;
  ::int32_t cumulative_rejected_steps() const;
  void set_cumulative_rejected_steps(::int32_t value);

  private:
  ::int32_t _internal_cumulative_rejected_steps() const;
  void _internal_set_cumulative_rejected_steps(::int32_t value);

  public:
  // optional double cumulative_kkt_matrix_passes = 4;
  bool has_cumulative_kkt_matrix_passes() const;
  void clear_cumulative_kkt_matrix_passes() ;
  double cumulative_kkt_matrix_passes() const;
  void set_cumulative_kkt_matrix_passes(double value);

  private:
  double _internal_cumulative_kkt_matrix_passes() const;
  void _internal_set_cumulative_kkt_matrix_passes(double value);

  public:
  // optional double cumulative_time_sec = 6;
  bool has_cumulative_time_sec() const;
  void clear_cumulative_time_sec() ;
  double cumulative_time_sec() const;
  void set_cumulative_time_sec(double value);

  private:
  double _internal_cumulative_time_sec() const;
  void _internal_set_cumulative_time_sec(double value);

  public:
  // optional double step_size = 8;
  bool has_step_size() const;
  void clear_step_size() ;
  double step_size() const;
  void set_step_size(double value);

  private:
  double _internal_step_size() const;
  void _internal_set_step_size(double value);

  public:
  // optional double primal_weight = 9;
  bool has_primal_weight() const;
  void clear_primal_weight() ;
  double primal_weight() const;
  void set_primal_weight(double value);

  private:
  double _internal_primal_weight() const;
  void _internal_set_primal_weight(double value);

  public:
  // optional .operations_research.pdlp.RestartChoice restart_used = 7;
  bool has_restart_used() const;
  void clear_restart_used() ;
  ::operations_research::pdlp::RestartChoice restart_used() const;
  void set_restart_used(::operations_research::pdlp::RestartChoice value);

  private:
  ::operations_research::pdlp::RestartChoice _internal_restart_used() const;
  void _internal_set_restart_used(::operations_research::pdlp::RestartChoice value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.IterationStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 4,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::ConvergenceInformation > convergence_information_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::InfeasibilityInformation > infeasibility_information_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::PointMetadata > point_metadata_;
    ::int32_t iteration_number_;
    ::int32_t cumulative_rejected_steps_;
    double cumulative_kkt_matrix_passes_;
    double cumulative_time_sec_;
    double step_size_;
    double primal_weight_;
    int restart_used_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class FeasibilityPolishingDetails final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.FeasibilityPolishingDetails) */ {
 public:
  inline FeasibilityPolishingDetails() : FeasibilityPolishingDetails(nullptr) {}
  ~FeasibilityPolishingDetails() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeasibilityPolishingDetails(::google::protobuf::internal::ConstantInitialized);

  inline FeasibilityPolishingDetails(const FeasibilityPolishingDetails& from)
      : FeasibilityPolishingDetails(nullptr, from) {}
  FeasibilityPolishingDetails(FeasibilityPolishingDetails&& from) noexcept
    : FeasibilityPolishingDetails() {
    *this = ::std::move(from);
  }

  inline FeasibilityPolishingDetails& operator=(const FeasibilityPolishingDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeasibilityPolishingDetails& operator=(FeasibilityPolishingDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeasibilityPolishingDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeasibilityPolishingDetails* internal_default_instance() {
    return reinterpret_cast<const FeasibilityPolishingDetails*>(
               &_FeasibilityPolishingDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FeasibilityPolishingDetails& a, FeasibilityPolishingDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(FeasibilityPolishingDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeasibilityPolishingDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeasibilityPolishingDetails* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeasibilityPolishingDetails>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeasibilityPolishingDetails& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FeasibilityPolishingDetails& from) {
    FeasibilityPolishingDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FeasibilityPolishingDetails* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.FeasibilityPolishingDetails";
  }
  protected:
  explicit FeasibilityPolishingDetails(::google::protobuf::Arena* arena);
  FeasibilityPolishingDetails(::google::protobuf::Arena* arena, const FeasibilityPolishingDetails& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIterationStatsFieldNumber = 9,
    kParamsFieldNumber = 3,
    kSolutionStatsFieldNumber = 7,
    kPolishingPhaseTypeFieldNumber = 1,
    kMainIterationCountFieldNumber = 2,
    kTerminationReasonFieldNumber = 4,
    kIterationCountFieldNumber = 5,
    kSolveTimeSecFieldNumber = 6,
    kSolutionTypeFieldNumber = 8,
  };
  // repeated .operations_research.pdlp.IterationStats iteration_stats = 9;
  int iteration_stats_size() const;
  private:
  int _internal_iteration_stats_size() const;

  public:
  void clear_iteration_stats() ;
  ::operations_research::pdlp::IterationStats* mutable_iteration_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats >*
      mutable_iteration_stats();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>& _internal_iteration_stats() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>* _internal_mutable_iteration_stats();
  public:
  const ::operations_research::pdlp::IterationStats& iteration_stats(int index) const;
  ::operations_research::pdlp::IterationStats* add_iteration_stats();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats >&
      iteration_stats() const;
  // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 3;
  bool has_params() const;
  void clear_params() ;
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& params() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::PrimalDualHybridGradientParams* release_params();
  ::operations_research::pdlp::PrimalDualHybridGradientParams* mutable_params();
  void set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value);
  void unsafe_arena_set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value);
  ::operations_research::pdlp::PrimalDualHybridGradientParams* unsafe_arena_release_params();

  private:
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& _internal_params() const;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _internal_mutable_params();

  public:
  // optional .operations_research.pdlp.IterationStats solution_stats = 7;
  bool has_solution_stats() const;
  void clear_solution_stats() ;
  const ::operations_research::pdlp::IterationStats& solution_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::IterationStats* release_solution_stats();
  ::operations_research::pdlp::IterationStats* mutable_solution_stats();
  void set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value);
  void unsafe_arena_set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value);
  ::operations_research::pdlp::IterationStats* unsafe_arena_release_solution_stats();

  private:
  const ::operations_research::pdlp::IterationStats& _internal_solution_stats() const;
  ::operations_research::pdlp::IterationStats* _internal_mutable_solution_stats();

  public:
  // optional .operations_research.pdlp.PolishingPhaseType polishing_phase_type = 1;
  bool has_polishing_phase_type() const;
  void clear_polishing_phase_type() ;
  ::operations_research::pdlp::PolishingPhaseType polishing_phase_type() const;
  void set_polishing_phase_type(::operations_research::pdlp::PolishingPhaseType value);

  private:
  ::operations_research::pdlp::PolishingPhaseType _internal_polishing_phase_type() const;
  void _internal_set_polishing_phase_type(::operations_research::pdlp::PolishingPhaseType value);

  public:
  // optional int32 main_iteration_count = 2;
  bool has_main_iteration_count() const;
  void clear_main_iteration_count() ;
  ::int32_t main_iteration_count() const;
  void set_main_iteration_count(::int32_t value);

  private:
  ::int32_t _internal_main_iteration_count() const;
  void _internal_set_main_iteration_count(::int32_t value);

  public:
  // optional .operations_research.pdlp.TerminationReason termination_reason = 4;
  bool has_termination_reason() const;
  void clear_termination_reason() ;
  ::operations_research::pdlp::TerminationReason termination_reason() const;
  void set_termination_reason(::operations_research::pdlp::TerminationReason value);

  private:
  ::operations_research::pdlp::TerminationReason _internal_termination_reason() const;
  void _internal_set_termination_reason(::operations_research::pdlp::TerminationReason value);

  public:
  // optional int32 iteration_count = 5;
  bool has_iteration_count() const;
  void clear_iteration_count() ;
  ::int32_t iteration_count() const;
  void set_iteration_count(::int32_t value);

  private:
  ::int32_t _internal_iteration_count() const;
  void _internal_set_iteration_count(::int32_t value);

  public:
  // optional double solve_time_sec = 6;
  bool has_solve_time_sec() const;
  void clear_solve_time_sec() ;
  double solve_time_sec() const;
  void set_solve_time_sec(double value);

  private:
  double _internal_solve_time_sec() const;
  void _internal_set_solve_time_sec(double value);

  public:
  // optional .operations_research.pdlp.PointType solution_type = 8;
  bool has_solution_type() const;
  void clear_solution_type() ;
  ::operations_research::pdlp::PointType solution_type() const;
  void set_solution_type(::operations_research::pdlp::PointType value);

  private:
  ::operations_research::pdlp::PointType _internal_solution_type() const;
  void _internal_set_solution_type(::operations_research::pdlp::PointType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.FeasibilityPolishingDetails)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 6,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats > iteration_stats_;
    ::operations_research::pdlp::PrimalDualHybridGradientParams* params_;
    ::operations_research::pdlp::IterationStats* solution_stats_;
    int polishing_phase_type_;
    ::int32_t main_iteration_count_;
    int termination_reason_;
    ::int32_t iteration_count_;
    double solve_time_sec_;
    int solution_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};// -------------------------------------------------------------------

class SolveLog final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.pdlp.SolveLog) */ {
 public:
  inline SolveLog() : SolveLog(nullptr) {}
  ~SolveLog() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolveLog(::google::protobuf::internal::ConstantInitialized);

  inline SolveLog(const SolveLog& from)
      : SolveLog(nullptr, from) {}
  SolveLog(SolveLog&& from) noexcept
    : SolveLog() {
    *this = ::std::move(from);
  }

  inline SolveLog& operator=(const SolveLog& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveLog& operator=(SolveLog&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveLog& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolveLog* internal_default_instance() {
    return reinterpret_cast<const SolveLog*>(
               &_SolveLog_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SolveLog& a, SolveLog& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveLog* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveLog* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveLog* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveLog>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolveLog& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolveLog& from) {
    SolveLog::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SolveLog* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.pdlp.SolveLog";
  }
  protected:
  explicit SolveLog(::google::protobuf::Arena* arena);
  SolveLog(::google::protobuf::Arena* arena, const SolveLog& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIterationStatsFieldNumber = 7,
    kFeasibilityPolishingDetailsFieldNumber = 15,
    kInstanceNameFieldNumber = 1,
    kTerminationStringFieldNumber = 4,
    kSolutionStatsFieldNumber = 8,
    kOriginalProblemStatsFieldNumber = 11,
    kPreprocessedProblemStatsFieldNumber = 12,
    kParamsFieldNumber = 14,
    kTerminationReasonFieldNumber = 3,
    kIterationCountFieldNumber = 5,
    kSolveTimeSecFieldNumber = 6,
    kPreprocessingTimeSecFieldNumber = 13,
    kSolutionTypeFieldNumber = 10,
  };
  // repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
  int iteration_stats_size() const;
  private:
  int _internal_iteration_stats_size() const;

  public:
  void clear_iteration_stats() ;
  ::operations_research::pdlp::IterationStats* mutable_iteration_stats(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats >*
      mutable_iteration_stats();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>& _internal_iteration_stats() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>* _internal_mutable_iteration_stats();
  public:
  const ::operations_research::pdlp::IterationStats& iteration_stats(int index) const;
  ::operations_research::pdlp::IterationStats* add_iteration_stats();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats >&
      iteration_stats() const;
  // repeated .operations_research.pdlp.FeasibilityPolishingDetails feasibility_polishing_details = 15;
  int feasibility_polishing_details_size() const;
  private:
  int _internal_feasibility_polishing_details_size() const;

  public:
  void clear_feasibility_polishing_details() ;
  ::operations_research::pdlp::FeasibilityPolishingDetails* mutable_feasibility_polishing_details(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::FeasibilityPolishingDetails >*
      mutable_feasibility_polishing_details();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>& _internal_feasibility_polishing_details() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>* _internal_mutable_feasibility_polishing_details();
  public:
  const ::operations_research::pdlp::FeasibilityPolishingDetails& feasibility_polishing_details(int index) const;
  ::operations_research::pdlp::FeasibilityPolishingDetails* add_feasibility_polishing_details();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::FeasibilityPolishingDetails >&
      feasibility_polishing_details() const;
  // optional string instance_name = 1;
  bool has_instance_name() const;
  void clear_instance_name() ;
  const std::string& instance_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instance_name(Arg_&& arg, Args_... args);
  std::string* mutable_instance_name();
  PROTOBUF_NODISCARD std::string* release_instance_name();
  void set_allocated_instance_name(std::string* value);

  private:
  const std::string& _internal_instance_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_name(
      const std::string& value);
  std::string* _internal_mutable_instance_name();

  public:
  // optional string termination_string = 4;
  bool has_termination_string() const;
  void clear_termination_string() ;
  const std::string& termination_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_termination_string(Arg_&& arg, Args_... args);
  std::string* mutable_termination_string();
  PROTOBUF_NODISCARD std::string* release_termination_string();
  void set_allocated_termination_string(std::string* value);

  private:
  const std::string& _internal_termination_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_termination_string(
      const std::string& value);
  std::string* _internal_mutable_termination_string();

  public:
  // optional .operations_research.pdlp.IterationStats solution_stats = 8;
  bool has_solution_stats() const;
  void clear_solution_stats() ;
  const ::operations_research::pdlp::IterationStats& solution_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::IterationStats* release_solution_stats();
  ::operations_research::pdlp::IterationStats* mutable_solution_stats();
  void set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value);
  void unsafe_arena_set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value);
  ::operations_research::pdlp::IterationStats* unsafe_arena_release_solution_stats();

  private:
  const ::operations_research::pdlp::IterationStats& _internal_solution_stats() const;
  ::operations_research::pdlp::IterationStats* _internal_mutable_solution_stats();

  public:
  // optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
  bool has_original_problem_stats() const;
  void clear_original_problem_stats() ;
  const ::operations_research::pdlp::QuadraticProgramStats& original_problem_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::QuadraticProgramStats* release_original_problem_stats();
  ::operations_research::pdlp::QuadraticProgramStats* mutable_original_problem_stats();
  void set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value);
  void unsafe_arena_set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value);
  ::operations_research::pdlp::QuadraticProgramStats* unsafe_arena_release_original_problem_stats();

  private:
  const ::operations_research::pdlp::QuadraticProgramStats& _internal_original_problem_stats() const;
  ::operations_research::pdlp::QuadraticProgramStats* _internal_mutable_original_problem_stats();

  public:
  // optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
  bool has_preprocessed_problem_stats() const;
  void clear_preprocessed_problem_stats() ;
  const ::operations_research::pdlp::QuadraticProgramStats& preprocessed_problem_stats() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::QuadraticProgramStats* release_preprocessed_problem_stats();
  ::operations_research::pdlp::QuadraticProgramStats* mutable_preprocessed_problem_stats();
  void set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value);
  void unsafe_arena_set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value);
  ::operations_research::pdlp::QuadraticProgramStats* unsafe_arena_release_preprocessed_problem_stats();

  private:
  const ::operations_research::pdlp::QuadraticProgramStats& _internal_preprocessed_problem_stats() const;
  ::operations_research::pdlp::QuadraticProgramStats* _internal_mutable_preprocessed_problem_stats();

  public:
  // optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
  bool has_params() const;
  void clear_params() ;
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& params() const;
  PROTOBUF_NODISCARD ::operations_research::pdlp::PrimalDualHybridGradientParams* release_params();
  ::operations_research::pdlp::PrimalDualHybridGradientParams* mutable_params();
  void set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value);
  void unsafe_arena_set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value);
  ::operations_research::pdlp::PrimalDualHybridGradientParams* unsafe_arena_release_params();

  private:
  const ::operations_research::pdlp::PrimalDualHybridGradientParams& _internal_params() const;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _internal_mutable_params();

  public:
  // optional .operations_research.pdlp.TerminationReason termination_reason = 3;
  bool has_termination_reason() const;
  void clear_termination_reason() ;
  ::operations_research::pdlp::TerminationReason termination_reason() const;
  void set_termination_reason(::operations_research::pdlp::TerminationReason value);

  private:
  ::operations_research::pdlp::TerminationReason _internal_termination_reason() const;
  void _internal_set_termination_reason(::operations_research::pdlp::TerminationReason value);

  public:
  // optional int32 iteration_count = 5;
  bool has_iteration_count() const;
  void clear_iteration_count() ;
  ::int32_t iteration_count() const;
  void set_iteration_count(::int32_t value);

  private:
  ::int32_t _internal_iteration_count() const;
  void _internal_set_iteration_count(::int32_t value);

  public:
  // optional double solve_time_sec = 6;
  bool has_solve_time_sec() const;
  void clear_solve_time_sec() ;
  double solve_time_sec() const;
  void set_solve_time_sec(double value);

  private:
  double _internal_solve_time_sec() const;
  void _internal_set_solve_time_sec(double value);

  public:
  // optional double preprocessing_time_sec = 13;
  bool has_preprocessing_time_sec() const;
  void clear_preprocessing_time_sec() ;
  double preprocessing_time_sec() const;
  void set_preprocessing_time_sec(double value);

  private:
  double _internal_preprocessing_time_sec() const;
  void _internal_set_preprocessing_time_sec(double value);

  public:
  // optional .operations_research.pdlp.PointType solution_type = 10;
  bool has_solution_type() const;
  void clear_solution_type() ;
  ::operations_research::pdlp::PointType solution_type() const;
  void set_solution_type(::operations_research::pdlp::PointType value);

  private:
  ::operations_research::pdlp::PointType _internal_solution_type() const;
  void _internal_set_solution_type(::operations_research::pdlp::PointType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.pdlp.SolveLog)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 8,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::IterationStats > iteration_stats_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::pdlp::FeasibilityPolishingDetails > feasibility_polishing_details_;
    ::google::protobuf::internal::ArenaStringPtr instance_name_;
    ::google::protobuf::internal::ArenaStringPtr termination_string_;
    ::operations_research::pdlp::IterationStats* solution_stats_;
    ::operations_research::pdlp::QuadraticProgramStats* original_problem_stats_;
    ::operations_research::pdlp::QuadraticProgramStats* preprocessed_problem_stats_;
    ::operations_research::pdlp::PrimalDualHybridGradientParams* params_;
    int termination_reason_;
    ::int32_t iteration_count_;
    double solve_time_sec_;
    double preprocessing_time_sec_;
    int solution_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpdlp_2fsolve_5flog_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// QuadraticProgramStats

// optional int64 num_variables = 1;
inline bool QuadraticProgramStats::has_num_variables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_num_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_variables_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t QuadraticProgramStats::num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.num_variables)
  return _internal_num_variables();
}
inline void QuadraticProgramStats::set_num_variables(::int64_t value) {
  _internal_set_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.num_variables)
}
inline ::int64_t QuadraticProgramStats::_internal_num_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_variables_;
}
inline void QuadraticProgramStats::_internal_set_num_variables(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.num_variables_ = value;
}

// optional int64 num_constraints = 2;
inline bool QuadraticProgramStats::has_num_constraints() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_num_constraints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_constraints_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t QuadraticProgramStats::num_constraints() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.num_constraints)
  return _internal_num_constraints();
}
inline void QuadraticProgramStats::set_num_constraints(::int64_t value) {
  _internal_set_num_constraints(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.num_constraints)
}
inline ::int64_t QuadraticProgramStats::_internal_num_constraints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_constraints_;
}
inline void QuadraticProgramStats::_internal_set_num_constraints(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.num_constraints_ = value;
}

// optional double constraint_matrix_col_min_l_inf_norm = 3;
inline bool QuadraticProgramStats::has_constraint_matrix_col_min_l_inf_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_col_min_l_inf_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_col_min_l_inf_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double QuadraticProgramStats::constraint_matrix_col_min_l_inf_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_col_min_l_inf_norm)
  return _internal_constraint_matrix_col_min_l_inf_norm();
}
inline void QuadraticProgramStats::set_constraint_matrix_col_min_l_inf_norm(double value) {
  _internal_set_constraint_matrix_col_min_l_inf_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_col_min_l_inf_norm)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_col_min_l_inf_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_col_min_l_inf_norm_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_col_min_l_inf_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.constraint_matrix_col_min_l_inf_norm_ = value;
}

// optional double constraint_matrix_row_min_l_inf_norm = 4;
inline bool QuadraticProgramStats::has_constraint_matrix_row_min_l_inf_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_row_min_l_inf_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_row_min_l_inf_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double QuadraticProgramStats::constraint_matrix_row_min_l_inf_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_row_min_l_inf_norm)
  return _internal_constraint_matrix_row_min_l_inf_norm();
}
inline void QuadraticProgramStats::set_constraint_matrix_row_min_l_inf_norm(double value) {
  _internal_set_constraint_matrix_row_min_l_inf_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_row_min_l_inf_norm)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_row_min_l_inf_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_row_min_l_inf_norm_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_row_min_l_inf_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.constraint_matrix_row_min_l_inf_norm_ = value;
}

// optional int64 constraint_matrix_num_nonzeros = 5;
inline bool QuadraticProgramStats::has_constraint_matrix_num_nonzeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_num_nonzeros() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_num_nonzeros_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t QuadraticProgramStats::constraint_matrix_num_nonzeros() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_num_nonzeros)
  return _internal_constraint_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::set_constraint_matrix_num_nonzeros(::int64_t value) {
  _internal_set_constraint_matrix_num_nonzeros(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_num_nonzeros)
}
inline ::int64_t QuadraticProgramStats::_internal_constraint_matrix_num_nonzeros() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_num_nonzeros_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_num_nonzeros(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.constraint_matrix_num_nonzeros_ = value;
}

// optional double constraint_matrix_abs_max = 6;
inline bool QuadraticProgramStats::has_constraint_matrix_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double QuadraticProgramStats::constraint_matrix_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_max)
  return _internal_constraint_matrix_abs_max();
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_max(double value) {
  _internal_set_constraint_matrix_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_max)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_abs_max_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.constraint_matrix_abs_max_ = value;
}

// optional double constraint_matrix_abs_min = 7;
inline bool QuadraticProgramStats::has_constraint_matrix_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double QuadraticProgramStats::constraint_matrix_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_min)
  return _internal_constraint_matrix_abs_min();
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_min(double value) {
  _internal_set_constraint_matrix_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_min)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_abs_min_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.constraint_matrix_abs_min_ = value;
}

// optional double constraint_matrix_abs_avg = 8;
inline bool QuadraticProgramStats::has_constraint_matrix_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_abs_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double QuadraticProgramStats::constraint_matrix_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_avg)
  return _internal_constraint_matrix_abs_avg();
}
inline void QuadraticProgramStats::set_constraint_matrix_abs_avg(double value) {
  _internal_set_constraint_matrix_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_abs_avg)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_abs_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_abs_avg_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_abs_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.constraint_matrix_abs_avg_ = value;
}

// optional double constraint_matrix_l2_norm = 25;
inline bool QuadraticProgramStats::has_constraint_matrix_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_constraint_matrix_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraint_matrix_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline double QuadraticProgramStats::constraint_matrix_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_l2_norm)
  return _internal_constraint_matrix_l2_norm();
}
inline void QuadraticProgramStats::set_constraint_matrix_l2_norm(double value) {
  _internal_set_constraint_matrix_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.constraint_matrix_l2_norm)
}
inline double QuadraticProgramStats::_internal_constraint_matrix_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraint_matrix_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_constraint_matrix_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.constraint_matrix_l2_norm_ = value;
}

// optional double combined_bounds_max = 9;
inline bool QuadraticProgramStats::has_combined_bounds_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_bounds_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_bounds_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double QuadraticProgramStats::combined_bounds_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_max)
  return _internal_combined_bounds_max();
}
inline void QuadraticProgramStats::set_combined_bounds_max(double value) {
  _internal_set_combined_bounds_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_max)
}
inline double QuadraticProgramStats::_internal_combined_bounds_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_bounds_max_;
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.combined_bounds_max_ = value;
}

// optional double combined_bounds_min = 10;
inline bool QuadraticProgramStats::has_combined_bounds_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_bounds_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_bounds_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double QuadraticProgramStats::combined_bounds_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_min)
  return _internal_combined_bounds_min();
}
inline void QuadraticProgramStats::set_combined_bounds_min(double value) {
  _internal_set_combined_bounds_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_min)
}
inline double QuadraticProgramStats::_internal_combined_bounds_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_bounds_min_;
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.combined_bounds_min_ = value;
}

// optional double combined_bounds_avg = 11;
inline bool QuadraticProgramStats::has_combined_bounds_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_bounds_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_bounds_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double QuadraticProgramStats::combined_bounds_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_avg)
  return _internal_combined_bounds_avg();
}
inline void QuadraticProgramStats::set_combined_bounds_avg(double value) {
  _internal_set_combined_bounds_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_avg)
}
inline double QuadraticProgramStats::_internal_combined_bounds_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_bounds_avg_;
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.combined_bounds_avg_ = value;
}

// optional double combined_bounds_l2_norm = 24;
inline bool QuadraticProgramStats::has_combined_bounds_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_bounds_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_bounds_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline double QuadraticProgramStats::combined_bounds_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_bounds_l2_norm)
  return _internal_combined_bounds_l2_norm();
}
inline void QuadraticProgramStats::set_combined_bounds_l2_norm(double value) {
  _internal_set_combined_bounds_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_bounds_l2_norm)
}
inline double QuadraticProgramStats::_internal_combined_bounds_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_bounds_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_combined_bounds_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.combined_bounds_l2_norm_ = value;
}

// optional double combined_variable_bounds_max = 28;
inline bool QuadraticProgramStats::has_combined_variable_bounds_max() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_variable_bounds_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_variable_bounds_max_ = 0;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline double QuadraticProgramStats::combined_variable_bounds_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_max)
  return _internal_combined_variable_bounds_max();
}
inline void QuadraticProgramStats::set_combined_variable_bounds_max(double value) {
  _internal_set_combined_variable_bounds_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_max)
}
inline double QuadraticProgramStats::_internal_combined_variable_bounds_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_variable_bounds_max_;
}
inline void QuadraticProgramStats::_internal_set_combined_variable_bounds_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.combined_variable_bounds_max_ = value;
}

// optional double combined_variable_bounds_min = 29;
inline bool QuadraticProgramStats::has_combined_variable_bounds_min() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_variable_bounds_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_variable_bounds_min_ = 0;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline double QuadraticProgramStats::combined_variable_bounds_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_min)
  return _internal_combined_variable_bounds_min();
}
inline void QuadraticProgramStats::set_combined_variable_bounds_min(double value) {
  _internal_set_combined_variable_bounds_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_min)
}
inline double QuadraticProgramStats::_internal_combined_variable_bounds_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_variable_bounds_min_;
}
inline void QuadraticProgramStats::_internal_set_combined_variable_bounds_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.combined_variable_bounds_min_ = value;
}

// optional double combined_variable_bounds_avg = 30;
inline bool QuadraticProgramStats::has_combined_variable_bounds_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_variable_bounds_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_variable_bounds_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double QuadraticProgramStats::combined_variable_bounds_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_avg)
  return _internal_combined_variable_bounds_avg();
}
inline void QuadraticProgramStats::set_combined_variable_bounds_avg(double value) {
  _internal_set_combined_variable_bounds_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_avg)
}
inline double QuadraticProgramStats::_internal_combined_variable_bounds_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_variable_bounds_avg_;
}
inline void QuadraticProgramStats::_internal_set_combined_variable_bounds_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.combined_variable_bounds_avg_ = value;
}

// optional double combined_variable_bounds_l2_norm = 31;
inline bool QuadraticProgramStats::has_combined_variable_bounds_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_combined_variable_bounds_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.combined_variable_bounds_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double QuadraticProgramStats::combined_variable_bounds_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_l2_norm)
  return _internal_combined_variable_bounds_l2_norm();
}
inline void QuadraticProgramStats::set_combined_variable_bounds_l2_norm(double value) {
  _internal_set_combined_variable_bounds_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.combined_variable_bounds_l2_norm)
}
inline double QuadraticProgramStats::_internal_combined_variable_bounds_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.combined_variable_bounds_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_combined_variable_bounds_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.combined_variable_bounds_l2_norm_ = value;
}

// optional int64 variable_bound_gaps_num_finite = 12;
inline bool QuadraticProgramStats::has_variable_bound_gaps_num_finite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_num_finite() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_bound_gaps_num_finite_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int64_t QuadraticProgramStats::variable_bound_gaps_num_finite() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_num_finite)
  return _internal_variable_bound_gaps_num_finite();
}
inline void QuadraticProgramStats::set_variable_bound_gaps_num_finite(::int64_t value) {
  _internal_set_variable_bound_gaps_num_finite(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_num_finite)
}
inline ::int64_t QuadraticProgramStats::_internal_variable_bound_gaps_num_finite() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_bound_gaps_num_finite_;
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_num_finite(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.variable_bound_gaps_num_finite_ = value;
}

// optional double variable_bound_gaps_max = 13;
inline bool QuadraticProgramStats::has_variable_bound_gaps_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_bound_gaps_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double QuadraticProgramStats::variable_bound_gaps_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_max)
  return _internal_variable_bound_gaps_max();
}
inline void QuadraticProgramStats::set_variable_bound_gaps_max(double value) {
  _internal_set_variable_bound_gaps_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_max)
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_bound_gaps_max_;
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.variable_bound_gaps_max_ = value;
}

// optional double variable_bound_gaps_min = 14;
inline bool QuadraticProgramStats::has_variable_bound_gaps_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_bound_gaps_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double QuadraticProgramStats::variable_bound_gaps_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_min)
  return _internal_variable_bound_gaps_min();
}
inline void QuadraticProgramStats::set_variable_bound_gaps_min(double value) {
  _internal_set_variable_bound_gaps_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_min)
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_bound_gaps_min_;
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.variable_bound_gaps_min_ = value;
}

// optional double variable_bound_gaps_avg = 15;
inline bool QuadraticProgramStats::has_variable_bound_gaps_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_bound_gaps_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double QuadraticProgramStats::variable_bound_gaps_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_avg)
  return _internal_variable_bound_gaps_avg();
}
inline void QuadraticProgramStats::set_variable_bound_gaps_avg(double value) {
  _internal_set_variable_bound_gaps_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_avg)
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_bound_gaps_avg_;
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.variable_bound_gaps_avg_ = value;
}

// optional double variable_bound_gaps_l2_norm = 26;
inline bool QuadraticProgramStats::has_variable_bound_gaps_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_variable_bound_gaps_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_bound_gaps_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline double QuadraticProgramStats::variable_bound_gaps_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_l2_norm)
  return _internal_variable_bound_gaps_l2_norm();
}
inline void QuadraticProgramStats::set_variable_bound_gaps_l2_norm(double value) {
  _internal_set_variable_bound_gaps_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.variable_bound_gaps_l2_norm)
}
inline double QuadraticProgramStats::_internal_variable_bound_gaps_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variable_bound_gaps_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_variable_bound_gaps_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.variable_bound_gaps_l2_norm_ = value;
}

// optional double objective_vector_abs_max = 16;
inline bool QuadraticProgramStats::has_objective_vector_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_vector_abs_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_vector_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline double QuadraticProgramStats::objective_vector_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_max)
  return _internal_objective_vector_abs_max();
}
inline void QuadraticProgramStats::set_objective_vector_abs_max(double value) {
  _internal_set_objective_vector_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_max)
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_vector_abs_max_;
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.objective_vector_abs_max_ = value;
}

// optional double objective_vector_abs_min = 17;
inline bool QuadraticProgramStats::has_objective_vector_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_vector_abs_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_vector_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline double QuadraticProgramStats::objective_vector_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_min)
  return _internal_objective_vector_abs_min();
}
inline void QuadraticProgramStats::set_objective_vector_abs_min(double value) {
  _internal_set_objective_vector_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_min)
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_vector_abs_min_;
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.objective_vector_abs_min_ = value;
}

// optional double objective_vector_abs_avg = 18;
inline bool QuadraticProgramStats::has_objective_vector_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_vector_abs_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_vector_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline double QuadraticProgramStats::objective_vector_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_avg)
  return _internal_objective_vector_abs_avg();
}
inline void QuadraticProgramStats::set_objective_vector_abs_avg(double value) {
  _internal_set_objective_vector_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_abs_avg)
}
inline double QuadraticProgramStats::_internal_objective_vector_abs_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_vector_abs_avg_;
}
inline void QuadraticProgramStats::_internal_set_objective_vector_abs_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.objective_vector_abs_avg_ = value;
}

// optional double objective_vector_l2_norm = 23;
inline bool QuadraticProgramStats::has_objective_vector_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_vector_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_vector_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline double QuadraticProgramStats::objective_vector_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_vector_l2_norm)
  return _internal_objective_vector_l2_norm();
}
inline void QuadraticProgramStats::set_objective_vector_l2_norm(double value) {
  _internal_set_objective_vector_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_vector_l2_norm)
}
inline double QuadraticProgramStats::_internal_objective_vector_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_vector_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_objective_vector_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.objective_vector_l2_norm_ = value;
}

// optional int64 objective_matrix_num_nonzeros = 19;
inline bool QuadraticProgramStats::has_objective_matrix_num_nonzeros() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_matrix_num_nonzeros() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_matrix_num_nonzeros_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int64_t QuadraticProgramStats::objective_matrix_num_nonzeros() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_num_nonzeros)
  return _internal_objective_matrix_num_nonzeros();
}
inline void QuadraticProgramStats::set_objective_matrix_num_nonzeros(::int64_t value) {
  _internal_set_objective_matrix_num_nonzeros(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_num_nonzeros)
}
inline ::int64_t QuadraticProgramStats::_internal_objective_matrix_num_nonzeros() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_matrix_num_nonzeros_;
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_num_nonzeros(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.objective_matrix_num_nonzeros_ = value;
}

// optional double objective_matrix_abs_max = 20;
inline bool QuadraticProgramStats::has_objective_matrix_abs_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_matrix_abs_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline double QuadraticProgramStats::objective_matrix_abs_max() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_max)
  return _internal_objective_matrix_abs_max();
}
inline void QuadraticProgramStats::set_objective_matrix_abs_max(double value) {
  _internal_set_objective_matrix_abs_max(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_max)
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_matrix_abs_max_;
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_max(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.objective_matrix_abs_max_ = value;
}

// optional double objective_matrix_abs_min = 21;
inline bool QuadraticProgramStats::has_objective_matrix_abs_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_matrix_abs_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline double QuadraticProgramStats::objective_matrix_abs_min() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_min)
  return _internal_objective_matrix_abs_min();
}
inline void QuadraticProgramStats::set_objective_matrix_abs_min(double value) {
  _internal_set_objective_matrix_abs_min(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_min)
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_matrix_abs_min_;
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_min(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.objective_matrix_abs_min_ = value;
}

// optional double objective_matrix_abs_avg = 22;
inline bool QuadraticProgramStats::has_objective_matrix_abs_avg() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_matrix_abs_avg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_matrix_abs_avg_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline double QuadraticProgramStats::objective_matrix_abs_avg() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_avg)
  return _internal_objective_matrix_abs_avg();
}
inline void QuadraticProgramStats::set_objective_matrix_abs_avg(double value) {
  _internal_set_objective_matrix_abs_avg(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_abs_avg)
}
inline double QuadraticProgramStats::_internal_objective_matrix_abs_avg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_matrix_abs_avg_;
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_abs_avg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.objective_matrix_abs_avg_ = value;
}

// optional double objective_matrix_l2_norm = 27;
inline bool QuadraticProgramStats::has_objective_matrix_l2_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void QuadraticProgramStats::clear_objective_matrix_l2_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_matrix_l2_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline double QuadraticProgramStats::objective_matrix_l2_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.QuadraticProgramStats.objective_matrix_l2_norm)
  return _internal_objective_matrix_l2_norm();
}
inline void QuadraticProgramStats::set_objective_matrix_l2_norm(double value) {
  _internal_set_objective_matrix_l2_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.QuadraticProgramStats.objective_matrix_l2_norm)
}
inline double QuadraticProgramStats::_internal_objective_matrix_l2_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_matrix_l2_norm_;
}
inline void QuadraticProgramStats::_internal_set_objective_matrix_l2_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.objective_matrix_l2_norm_ = value;
}

// -------------------------------------------------------------------

// ConvergenceInformation

// optional .operations_research.pdlp.PointType candidate_type = 1;
inline bool ConvergenceInformation::has_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_candidate_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::operations_research::pdlp::PointType ConvergenceInformation::candidate_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.candidate_type)
  return _internal_candidate_type();
}
inline void ConvergenceInformation::set_candidate_type(::operations_research::pdlp::PointType value) {
  _internal_set_candidate_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.candidate_type)
}
inline ::operations_research::pdlp::PointType ConvergenceInformation::_internal_candidate_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PointType>(_impl_.candidate_type_);
}
inline void ConvergenceInformation::_internal_set_candidate_type(::operations_research::pdlp::PointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.candidate_type_ = value;
}

// optional double primal_objective = 2;
inline bool ConvergenceInformation::has_primal_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_primal_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primal_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ConvergenceInformation::primal_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.primal_objective)
  return _internal_primal_objective();
}
inline void ConvergenceInformation::set_primal_objective(double value) {
  _internal_set_primal_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.primal_objective)
}
inline double ConvergenceInformation::_internal_primal_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primal_objective_;
}
inline void ConvergenceInformation::_internal_set_primal_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.primal_objective_ = value;
}

// optional double dual_objective = 3;
inline bool ConvergenceInformation::has_dual_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_dual_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dual_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ConvergenceInformation::dual_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.dual_objective)
  return _internal_dual_objective();
}
inline void ConvergenceInformation::set_dual_objective(double value) {
  _internal_set_dual_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.dual_objective)
}
inline double ConvergenceInformation::_internal_dual_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dual_objective_;
}
inline void ConvergenceInformation::_internal_set_dual_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.dual_objective_ = value;
}

// optional double corrected_dual_objective = 4;
inline bool ConvergenceInformation::has_corrected_dual_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_corrected_dual_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.corrected_dual_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ConvergenceInformation::corrected_dual_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.corrected_dual_objective)
  return _internal_corrected_dual_objective();
}
inline void ConvergenceInformation::set_corrected_dual_objective(double value) {
  _internal_set_corrected_dual_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.corrected_dual_objective)
}
inline double ConvergenceInformation::_internal_corrected_dual_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.corrected_dual_objective_;
}
inline void ConvergenceInformation::_internal_set_corrected_dual_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.corrected_dual_objective_ = value;
}

// optional double l_inf_primal_residual = 5;
inline bool ConvergenceInformation::has_l_inf_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_primal_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ConvergenceInformation::l_inf_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_primal_residual)
  return _internal_l_inf_primal_residual();
}
inline void ConvergenceInformation::set_l_inf_primal_residual(double value) {
  _internal_set_l_inf_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_primal_residual)
}
inline double ConvergenceInformation::_internal_l_inf_primal_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_primal_residual_;
}
inline void ConvergenceInformation::_internal_set_l_inf_primal_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.l_inf_primal_residual_ = value;
}

// optional double l2_primal_residual = 6;
inline bool ConvergenceInformation::has_l2_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l2_primal_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l2_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double ConvergenceInformation::l2_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_primal_residual)
  return _internal_l2_primal_residual();
}
inline void ConvergenceInformation::set_l2_primal_residual(double value) {
  _internal_set_l2_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_primal_residual)
}
inline double ConvergenceInformation::_internal_l2_primal_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l2_primal_residual_;
}
inline void ConvergenceInformation::_internal_set_l2_primal_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.l2_primal_residual_ = value;
}

// optional double l_inf_componentwise_primal_residual = 24;
inline bool ConvergenceInformation::has_l_inf_componentwise_primal_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_componentwise_primal_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_componentwise_primal_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double ConvergenceInformation::l_inf_componentwise_primal_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_primal_residual)
  return _internal_l_inf_componentwise_primal_residual();
}
inline void ConvergenceInformation::set_l_inf_componentwise_primal_residual(double value) {
  _internal_set_l_inf_componentwise_primal_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_primal_residual)
}
inline double ConvergenceInformation::_internal_l_inf_componentwise_primal_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_componentwise_primal_residual_;
}
inline void ConvergenceInformation::_internal_set_l_inf_componentwise_primal_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.l_inf_componentwise_primal_residual_ = value;
}

// optional double l_inf_dual_residual = 7;
inline bool ConvergenceInformation::has_l_inf_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_dual_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double ConvergenceInformation::l_inf_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_dual_residual)
  return _internal_l_inf_dual_residual();
}
inline void ConvergenceInformation::set_l_inf_dual_residual(double value) {
  _internal_set_l_inf_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_dual_residual)
}
inline double ConvergenceInformation::_internal_l_inf_dual_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_dual_residual_;
}
inline void ConvergenceInformation::_internal_set_l_inf_dual_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.l_inf_dual_residual_ = value;
}

// optional double l2_dual_residual = 8;
inline bool ConvergenceInformation::has_l2_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l2_dual_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l2_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double ConvergenceInformation::l2_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_dual_residual)
  return _internal_l2_dual_residual();
}
inline void ConvergenceInformation::set_l2_dual_residual(double value) {
  _internal_set_l2_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_dual_residual)
}
inline double ConvergenceInformation::_internal_l2_dual_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l2_dual_residual_;
}
inline void ConvergenceInformation::_internal_set_l2_dual_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.l2_dual_residual_ = value;
}

// optional double l_inf_componentwise_dual_residual = 25;
inline bool ConvergenceInformation::has_l_inf_componentwise_dual_residual() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_componentwise_dual_residual() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_componentwise_dual_residual_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double ConvergenceInformation::l_inf_componentwise_dual_residual() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_dual_residual)
  return _internal_l_inf_componentwise_dual_residual();
}
inline void ConvergenceInformation::set_l_inf_componentwise_dual_residual(double value) {
  _internal_set_l_inf_componentwise_dual_residual(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_componentwise_dual_residual)
}
inline double ConvergenceInformation::_internal_l_inf_componentwise_dual_residual() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_componentwise_dual_residual_;
}
inline void ConvergenceInformation::_internal_set_l_inf_componentwise_dual_residual(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.l_inf_componentwise_dual_residual_ = value;
}

// optional double l_inf_primal_variable = 14;
inline bool ConvergenceInformation::has_l_inf_primal_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_primal_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_primal_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double ConvergenceInformation::l_inf_primal_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_primal_variable)
  return _internal_l_inf_primal_variable();
}
inline void ConvergenceInformation::set_l_inf_primal_variable(double value) {
  _internal_set_l_inf_primal_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_primal_variable)
}
inline double ConvergenceInformation::_internal_l_inf_primal_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_primal_variable_;
}
inline void ConvergenceInformation::_internal_set_l_inf_primal_variable(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.l_inf_primal_variable_ = value;
}

// optional double l2_primal_variable = 15;
inline bool ConvergenceInformation::has_l2_primal_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l2_primal_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l2_primal_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double ConvergenceInformation::l2_primal_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_primal_variable)
  return _internal_l2_primal_variable();
}
inline void ConvergenceInformation::set_l2_primal_variable(double value) {
  _internal_set_l2_primal_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_primal_variable)
}
inline double ConvergenceInformation::_internal_l2_primal_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l2_primal_variable_;
}
inline void ConvergenceInformation::_internal_set_l2_primal_variable(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.l2_primal_variable_ = value;
}

// optional double l_inf_dual_variable = 16;
inline bool ConvergenceInformation::has_l_inf_dual_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l_inf_dual_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l_inf_dual_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double ConvergenceInformation::l_inf_dual_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l_inf_dual_variable)
  return _internal_l_inf_dual_variable();
}
inline void ConvergenceInformation::set_l_inf_dual_variable(double value) {
  _internal_set_l_inf_dual_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l_inf_dual_variable)
}
inline double ConvergenceInformation::_internal_l_inf_dual_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l_inf_dual_variable_;
}
inline void ConvergenceInformation::_internal_set_l_inf_dual_variable(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.l_inf_dual_variable_ = value;
}

// optional double l2_dual_variable = 17;
inline bool ConvergenceInformation::has_l2_dual_variable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void ConvergenceInformation::clear_l2_dual_variable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.l2_dual_variable_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double ConvergenceInformation::l2_dual_variable() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.ConvergenceInformation.l2_dual_variable)
  return _internal_l2_dual_variable();
}
inline void ConvergenceInformation::set_l2_dual_variable(double value) {
  _internal_set_l2_dual_variable(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.ConvergenceInformation.l2_dual_variable)
}
inline double ConvergenceInformation::_internal_l2_dual_variable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.l2_dual_variable_;
}
inline void ConvergenceInformation::_internal_set_l2_dual_variable(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.l2_dual_variable_ = value;
}

// -------------------------------------------------------------------

// InfeasibilityInformation

// optional double max_primal_ray_infeasibility = 1;
inline bool InfeasibilityInformation::has_max_primal_ray_infeasibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_max_primal_ray_infeasibility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_primal_ray_infeasibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double InfeasibilityInformation::max_primal_ray_infeasibility() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.max_primal_ray_infeasibility)
  return _internal_max_primal_ray_infeasibility();
}
inline void InfeasibilityInformation::set_max_primal_ray_infeasibility(double value) {
  _internal_set_max_primal_ray_infeasibility(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.max_primal_ray_infeasibility)
}
inline double InfeasibilityInformation::_internal_max_primal_ray_infeasibility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_primal_ray_infeasibility_;
}
inline void InfeasibilityInformation::_internal_set_max_primal_ray_infeasibility(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.max_primal_ray_infeasibility_ = value;
}

// optional double primal_ray_linear_objective = 2;
inline bool InfeasibilityInformation::has_primal_ray_linear_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_primal_ray_linear_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primal_ray_linear_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double InfeasibilityInformation::primal_ray_linear_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.primal_ray_linear_objective)
  return _internal_primal_ray_linear_objective();
}
inline void InfeasibilityInformation::set_primal_ray_linear_objective(double value) {
  _internal_set_primal_ray_linear_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.primal_ray_linear_objective)
}
inline double InfeasibilityInformation::_internal_primal_ray_linear_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primal_ray_linear_objective_;
}
inline void InfeasibilityInformation::_internal_set_primal_ray_linear_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.primal_ray_linear_objective_ = value;
}

// optional double primal_ray_quadratic_norm = 3;
inline bool InfeasibilityInformation::has_primal_ray_quadratic_norm() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_primal_ray_quadratic_norm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primal_ray_quadratic_norm_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double InfeasibilityInformation::primal_ray_quadratic_norm() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.primal_ray_quadratic_norm)
  return _internal_primal_ray_quadratic_norm();
}
inline void InfeasibilityInformation::set_primal_ray_quadratic_norm(double value) {
  _internal_set_primal_ray_quadratic_norm(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.primal_ray_quadratic_norm)
}
inline double InfeasibilityInformation::_internal_primal_ray_quadratic_norm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primal_ray_quadratic_norm_;
}
inline void InfeasibilityInformation::_internal_set_primal_ray_quadratic_norm(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.primal_ray_quadratic_norm_ = value;
}

// optional double max_dual_ray_infeasibility = 4;
inline bool InfeasibilityInformation::has_max_dual_ray_infeasibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_max_dual_ray_infeasibility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_dual_ray_infeasibility_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double InfeasibilityInformation::max_dual_ray_infeasibility() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.max_dual_ray_infeasibility)
  return _internal_max_dual_ray_infeasibility();
}
inline void InfeasibilityInformation::set_max_dual_ray_infeasibility(double value) {
  _internal_set_max_dual_ray_infeasibility(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.max_dual_ray_infeasibility)
}
inline double InfeasibilityInformation::_internal_max_dual_ray_infeasibility() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_dual_ray_infeasibility_;
}
inline void InfeasibilityInformation::_internal_set_max_dual_ray_infeasibility(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.max_dual_ray_infeasibility_ = value;
}

// optional double dual_ray_objective = 5;
inline bool InfeasibilityInformation::has_dual_ray_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_dual_ray_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dual_ray_objective_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double InfeasibilityInformation::dual_ray_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.dual_ray_objective)
  return _internal_dual_ray_objective();
}
inline void InfeasibilityInformation::set_dual_ray_objective(double value) {
  _internal_set_dual_ray_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.dual_ray_objective)
}
inline double InfeasibilityInformation::_internal_dual_ray_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dual_ray_objective_;
}
inline void InfeasibilityInformation::_internal_set_dual_ray_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.dual_ray_objective_ = value;
}

// optional .operations_research.pdlp.PointType candidate_type = 6;
inline bool InfeasibilityInformation::has_candidate_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void InfeasibilityInformation::clear_candidate_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.candidate_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::operations_research::pdlp::PointType InfeasibilityInformation::candidate_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.InfeasibilityInformation.candidate_type)
  return _internal_candidate_type();
}
inline void InfeasibilityInformation::set_candidate_type(::operations_research::pdlp::PointType value) {
  _internal_set_candidate_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.InfeasibilityInformation.candidate_type)
}
inline ::operations_research::pdlp::PointType InfeasibilityInformation::_internal_candidate_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PointType>(_impl_.candidate_type_);
}
inline void InfeasibilityInformation::_internal_set_candidate_type(::operations_research::pdlp::PointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.candidate_type_ = value;
}

// -------------------------------------------------------------------

// PointMetadata

// optional .operations_research.pdlp.PointType point_type = 1;
inline bool PointMetadata::has_point_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void PointMetadata::clear_point_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::operations_research::pdlp::PointType PointMetadata::point_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.point_type)
  return _internal_point_type();
}
inline void PointMetadata::set_point_type(::operations_research::pdlp::PointType value) {
  _internal_set_point_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.point_type)
}
inline ::operations_research::pdlp::PointType PointMetadata::_internal_point_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PointType>(_impl_.point_type_);
}
inline void PointMetadata::_internal_set_point_type(::operations_research::pdlp::PointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.point_type_ = value;
}

// repeated double random_primal_projections = 2 [packed = true];
inline int PointMetadata::_internal_random_primal_projections_size() const {
  return _internal_random_primal_projections().size();
}
inline int PointMetadata::random_primal_projections_size() const {
  return _internal_random_primal_projections_size();
}
inline void PointMetadata::clear_random_primal_projections() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_primal_projections_.Clear();
}
inline double PointMetadata::random_primal_projections(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.random_primal_projections)
  return _internal_random_primal_projections().Get(index);
}
inline void PointMetadata::set_random_primal_projections(int index, double value) {
  _internal_mutable_random_primal_projections()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.random_primal_projections)
}
inline void PointMetadata::add_random_primal_projections(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_random_primal_projections()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.pdlp.PointMetadata.random_primal_projections)
}
inline const ::google::protobuf::RepeatedField<double>& PointMetadata::random_primal_projections() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.PointMetadata.random_primal_projections)
  return _internal_random_primal_projections();
}
inline ::google::protobuf::RepeatedField<double>* PointMetadata::mutable_random_primal_projections()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.PointMetadata.random_primal_projections)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_random_primal_projections();
}
inline const ::google::protobuf::RepeatedField<double>& PointMetadata::_internal_random_primal_projections()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_primal_projections_;
}
inline ::google::protobuf::RepeatedField<double>* PointMetadata::_internal_mutable_random_primal_projections() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.random_primal_projections_;
}

// repeated double random_dual_projections = 3 [packed = true];
inline int PointMetadata::_internal_random_dual_projections_size() const {
  return _internal_random_dual_projections().size();
}
inline int PointMetadata::random_dual_projections_size() const {
  return _internal_random_dual_projections_size();
}
inline void PointMetadata::clear_random_dual_projections() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_dual_projections_.Clear();
}
inline double PointMetadata::random_dual_projections(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.random_dual_projections)
  return _internal_random_dual_projections().Get(index);
}
inline void PointMetadata::set_random_dual_projections(int index, double value) {
  _internal_mutable_random_dual_projections()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.random_dual_projections)
}
inline void PointMetadata::add_random_dual_projections(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_random_dual_projections()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.pdlp.PointMetadata.random_dual_projections)
}
inline const ::google::protobuf::RepeatedField<double>& PointMetadata::random_dual_projections() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.PointMetadata.random_dual_projections)
  return _internal_random_dual_projections();
}
inline ::google::protobuf::RepeatedField<double>* PointMetadata::mutable_random_dual_projections()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.PointMetadata.random_dual_projections)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_random_dual_projections();
}
inline const ::google::protobuf::RepeatedField<double>& PointMetadata::_internal_random_dual_projections()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_dual_projections_;
}
inline ::google::protobuf::RepeatedField<double>* PointMetadata::_internal_mutable_random_dual_projections() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.random_dual_projections_;
}

// optional int64 active_primal_variable_count = 4;
inline bool PointMetadata::has_active_primal_variable_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PointMetadata::clear_active_primal_variable_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_primal_variable_count_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t PointMetadata::active_primal_variable_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_primal_variable_count)
  return _internal_active_primal_variable_count();
}
inline void PointMetadata::set_active_primal_variable_count(::int64_t value) {
  _internal_set_active_primal_variable_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_primal_variable_count)
}
inline ::int64_t PointMetadata::_internal_active_primal_variable_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_primal_variable_count_;
}
inline void PointMetadata::_internal_set_active_primal_variable_count(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.active_primal_variable_count_ = value;
}

// optional int64 active_dual_variable_count = 5;
inline bool PointMetadata::has_active_dual_variable_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PointMetadata::clear_active_dual_variable_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_dual_variable_count_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t PointMetadata::active_dual_variable_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_dual_variable_count)
  return _internal_active_dual_variable_count();
}
inline void PointMetadata::set_active_dual_variable_count(::int64_t value) {
  _internal_set_active_dual_variable_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_dual_variable_count)
}
inline ::int64_t PointMetadata::_internal_active_dual_variable_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_dual_variable_count_;
}
inline void PointMetadata::_internal_set_active_dual_variable_count(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.active_dual_variable_count_ = value;
}

// optional int64 active_primal_variable_change = 6;
inline bool PointMetadata::has_active_primal_variable_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PointMetadata::clear_active_primal_variable_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_primal_variable_change_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t PointMetadata::active_primal_variable_change() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_primal_variable_change)
  return _internal_active_primal_variable_change();
}
inline void PointMetadata::set_active_primal_variable_change(::int64_t value) {
  _internal_set_active_primal_variable_change(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_primal_variable_change)
}
inline ::int64_t PointMetadata::_internal_active_primal_variable_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_primal_variable_change_;
}
inline void PointMetadata::_internal_set_active_primal_variable_change(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.active_primal_variable_change_ = value;
}

// optional int64 active_dual_variable_change = 7;
inline bool PointMetadata::has_active_dual_variable_change() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void PointMetadata::clear_active_dual_variable_change() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_dual_variable_change_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t PointMetadata::active_dual_variable_change() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.PointMetadata.active_dual_variable_change)
  return _internal_active_dual_variable_change();
}
inline void PointMetadata::set_active_dual_variable_change(::int64_t value) {
  _internal_set_active_dual_variable_change(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.PointMetadata.active_dual_variable_change)
}
inline ::int64_t PointMetadata::_internal_active_dual_variable_change() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_dual_variable_change_;
}
inline void PointMetadata::_internal_set_active_dual_variable_change(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.active_dual_variable_change_ = value;
}

// -------------------------------------------------------------------

// IterationStats

// optional int32 iteration_number = 1;
inline bool IterationStats::has_iteration_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IterationStats::clear_iteration_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t IterationStats::iteration_number() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.iteration_number)
  return _internal_iteration_number();
}
inline void IterationStats::set_iteration_number(::int32_t value) {
  _internal_set_iteration_number(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.iteration_number)
}
inline ::int32_t IterationStats::_internal_iteration_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_number_;
}
inline void IterationStats::_internal_set_iteration_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iteration_number_ = value;
}

// repeated .operations_research.pdlp.ConvergenceInformation convergence_information = 2;
inline int IterationStats::_internal_convergence_information_size() const {
  return _internal_convergence_information().size();
}
inline int IterationStats::convergence_information_size() const {
  return _internal_convergence_information_size();
}
inline void IterationStats::clear_convergence_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.convergence_information_.Clear();
}
inline ::operations_research::pdlp::ConvergenceInformation* IterationStats::mutable_convergence_information(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.convergence_information)
  return _internal_mutable_convergence_information()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>* IterationStats::mutable_convergence_information()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.convergence_information)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_convergence_information();
}
inline const ::operations_research::pdlp::ConvergenceInformation& IterationStats::convergence_information(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.convergence_information)
  return _internal_convergence_information().Get(index);
}
inline ::operations_research::pdlp::ConvergenceInformation* IterationStats::add_convergence_information() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::ConvergenceInformation* _add = _internal_mutable_convergence_information()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.convergence_information)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>& IterationStats::convergence_information() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.convergence_information)
  return _internal_convergence_information();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>&
IterationStats::_internal_convergence_information() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.convergence_information_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::ConvergenceInformation>*
IterationStats::_internal_mutable_convergence_information() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.convergence_information_;
}

// repeated .operations_research.pdlp.InfeasibilityInformation infeasibility_information = 3;
inline int IterationStats::_internal_infeasibility_information_size() const {
  return _internal_infeasibility_information().size();
}
inline int IterationStats::infeasibility_information_size() const {
  return _internal_infeasibility_information_size();
}
inline void IterationStats::clear_infeasibility_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.infeasibility_information_.Clear();
}
inline ::operations_research::pdlp::InfeasibilityInformation* IterationStats::mutable_infeasibility_information(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.infeasibility_information)
  return _internal_mutable_infeasibility_information()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>* IterationStats::mutable_infeasibility_information()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.infeasibility_information)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_infeasibility_information();
}
inline const ::operations_research::pdlp::InfeasibilityInformation& IterationStats::infeasibility_information(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.infeasibility_information)
  return _internal_infeasibility_information().Get(index);
}
inline ::operations_research::pdlp::InfeasibilityInformation* IterationStats::add_infeasibility_information() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::InfeasibilityInformation* _add = _internal_mutable_infeasibility_information()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.infeasibility_information)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>& IterationStats::infeasibility_information() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.infeasibility_information)
  return _internal_infeasibility_information();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>&
IterationStats::_internal_infeasibility_information() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.infeasibility_information_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::InfeasibilityInformation>*
IterationStats::_internal_mutable_infeasibility_information() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.infeasibility_information_;
}

// repeated .operations_research.pdlp.PointMetadata point_metadata = 11;
inline int IterationStats::_internal_point_metadata_size() const {
  return _internal_point_metadata().size();
}
inline int IterationStats::point_metadata_size() const {
  return _internal_point_metadata_size();
}
inline void IterationStats::clear_point_metadata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_metadata_.Clear();
}
inline ::operations_research::pdlp::PointMetadata* IterationStats::mutable_point_metadata(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.IterationStats.point_metadata)
  return _internal_mutable_point_metadata()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>* IterationStats::mutable_point_metadata()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.IterationStats.point_metadata)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_point_metadata();
}
inline const ::operations_research::pdlp::PointMetadata& IterationStats::point_metadata(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.point_metadata)
  return _internal_point_metadata().Get(index);
}
inline ::operations_research::pdlp::PointMetadata* IterationStats::add_point_metadata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::PointMetadata* _add = _internal_mutable_point_metadata()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.IterationStats.point_metadata)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>& IterationStats::point_metadata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.IterationStats.point_metadata)
  return _internal_point_metadata();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>&
IterationStats::_internal_point_metadata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_metadata_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::PointMetadata>*
IterationStats::_internal_mutable_point_metadata() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.point_metadata_;
}

// optional double cumulative_kkt_matrix_passes = 4;
inline bool IterationStats::has_cumulative_kkt_matrix_passes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IterationStats::clear_cumulative_kkt_matrix_passes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cumulative_kkt_matrix_passes_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double IterationStats::cumulative_kkt_matrix_passes() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_kkt_matrix_passes)
  return _internal_cumulative_kkt_matrix_passes();
}
inline void IterationStats::set_cumulative_kkt_matrix_passes(double value) {
  _internal_set_cumulative_kkt_matrix_passes(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_kkt_matrix_passes)
}
inline double IterationStats::_internal_cumulative_kkt_matrix_passes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cumulative_kkt_matrix_passes_;
}
inline void IterationStats::_internal_set_cumulative_kkt_matrix_passes(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cumulative_kkt_matrix_passes_ = value;
}

// optional int32 cumulative_rejected_steps = 5;
inline bool IterationStats::has_cumulative_rejected_steps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IterationStats::clear_cumulative_rejected_steps() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cumulative_rejected_steps_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t IterationStats::cumulative_rejected_steps() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_rejected_steps)
  return _internal_cumulative_rejected_steps();
}
inline void IterationStats::set_cumulative_rejected_steps(::int32_t value) {
  _internal_set_cumulative_rejected_steps(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_rejected_steps)
}
inline ::int32_t IterationStats::_internal_cumulative_rejected_steps() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cumulative_rejected_steps_;
}
inline void IterationStats::_internal_set_cumulative_rejected_steps(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cumulative_rejected_steps_ = value;
}

// optional double cumulative_time_sec = 6;
inline bool IterationStats::has_cumulative_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void IterationStats::clear_cumulative_time_sec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cumulative_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double IterationStats::cumulative_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.cumulative_time_sec)
  return _internal_cumulative_time_sec();
}
inline void IterationStats::set_cumulative_time_sec(double value) {
  _internal_set_cumulative_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.cumulative_time_sec)
}
inline double IterationStats::_internal_cumulative_time_sec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cumulative_time_sec_;
}
inline void IterationStats::_internal_set_cumulative_time_sec(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cumulative_time_sec_ = value;
}

// optional .operations_research.pdlp.RestartChoice restart_used = 7;
inline bool IterationStats::has_restart_used() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void IterationStats::clear_restart_used() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.restart_used_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::operations_research::pdlp::RestartChoice IterationStats::restart_used() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.restart_used)
  return _internal_restart_used();
}
inline void IterationStats::set_restart_used(::operations_research::pdlp::RestartChoice value) {
  _internal_set_restart_used(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.restart_used)
}
inline ::operations_research::pdlp::RestartChoice IterationStats::_internal_restart_used() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::RestartChoice>(_impl_.restart_used_);
}
inline void IterationStats::_internal_set_restart_used(::operations_research::pdlp::RestartChoice value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::RestartChoice_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.restart_used_ = value;
}

// optional double step_size = 8;
inline bool IterationStats::has_step_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void IterationStats::clear_step_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.step_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double IterationStats::step_size() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.step_size)
  return _internal_step_size();
}
inline void IterationStats::set_step_size(double value) {
  _internal_set_step_size(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.step_size)
}
inline double IterationStats::_internal_step_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.step_size_;
}
inline void IterationStats::_internal_set_step_size(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.step_size_ = value;
}

// optional double primal_weight = 9;
inline bool IterationStats::has_primal_weight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void IterationStats::clear_primal_weight() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primal_weight_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double IterationStats::primal_weight() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.IterationStats.primal_weight)
  return _internal_primal_weight();
}
inline void IterationStats::set_primal_weight(double value) {
  _internal_set_primal_weight(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.IterationStats.primal_weight)
}
inline double IterationStats::_internal_primal_weight() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primal_weight_;
}
inline void IterationStats::_internal_set_primal_weight(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.primal_weight_ = value;
}

// -------------------------------------------------------------------

// FeasibilityPolishingDetails

// optional .operations_research.pdlp.PolishingPhaseType polishing_phase_type = 1;
inline bool FeasibilityPolishingDetails::has_polishing_phase_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_polishing_phase_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.polishing_phase_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::operations_research::pdlp::PolishingPhaseType FeasibilityPolishingDetails::polishing_phase_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.polishing_phase_type)
  return _internal_polishing_phase_type();
}
inline void FeasibilityPolishingDetails::set_polishing_phase_type(::operations_research::pdlp::PolishingPhaseType value) {
  _internal_set_polishing_phase_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.polishing_phase_type)
}
inline ::operations_research::pdlp::PolishingPhaseType FeasibilityPolishingDetails::_internal_polishing_phase_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PolishingPhaseType>(_impl_.polishing_phase_type_);
}
inline void FeasibilityPolishingDetails::_internal_set_polishing_phase_type(::operations_research::pdlp::PolishingPhaseType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PolishingPhaseType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.polishing_phase_type_ = value;
}

// optional int32 main_iteration_count = 2;
inline bool FeasibilityPolishingDetails::has_main_iteration_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_main_iteration_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.main_iteration_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t FeasibilityPolishingDetails::main_iteration_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.main_iteration_count)
  return _internal_main_iteration_count();
}
inline void FeasibilityPolishingDetails::set_main_iteration_count(::int32_t value) {
  _internal_set_main_iteration_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.main_iteration_count)
}
inline ::int32_t FeasibilityPolishingDetails::_internal_main_iteration_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.main_iteration_count_;
}
inline void FeasibilityPolishingDetails::_internal_set_main_iteration_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.main_iteration_count_ = value;
}

// optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 3;
inline bool FeasibilityPolishingDetails::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& FeasibilityPolishingDetails::_internal_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::PrimalDualHybridGradientParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::PrimalDualHybridGradientParams&>(::operations_research::pdlp::_PrimalDualHybridGradientParams_default_instance_);
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& FeasibilityPolishingDetails::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.params)
  return _internal_params();
}
inline void FeasibilityPolishingDetails::unsafe_arena_set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.FeasibilityPolishingDetails.params)
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* FeasibilityPolishingDetails::release_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* released = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* FeasibilityPolishingDetails::unsafe_arena_release_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.FeasibilityPolishingDetails.params)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* FeasibilityPolishingDetails::_internal_mutable_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::PrimalDualHybridGradientParams>(GetArena());
    _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(p);
  }
  return _impl_.params_;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* FeasibilityPolishingDetails::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.FeasibilityPolishingDetails.params)
  return _msg;
}
inline void FeasibilityPolishingDetails::set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.FeasibilityPolishingDetails.params)
}

// optional .operations_research.pdlp.TerminationReason termination_reason = 4;
inline bool FeasibilityPolishingDetails::has_termination_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_termination_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.termination_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::operations_research::pdlp::TerminationReason FeasibilityPolishingDetails::termination_reason() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.termination_reason)
  return _internal_termination_reason();
}
inline void FeasibilityPolishingDetails::set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  _internal_set_termination_reason(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.termination_reason)
}
inline ::operations_research::pdlp::TerminationReason FeasibilityPolishingDetails::_internal_termination_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::TerminationReason>(_impl_.termination_reason_);
}
inline void FeasibilityPolishingDetails::_internal_set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::TerminationReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.termination_reason_ = value;
}

// optional int32 iteration_count = 5;
inline bool FeasibilityPolishingDetails::has_iteration_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_iteration_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t FeasibilityPolishingDetails::iteration_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.iteration_count)
  return _internal_iteration_count();
}
inline void FeasibilityPolishingDetails::set_iteration_count(::int32_t value) {
  _internal_set_iteration_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.iteration_count)
}
inline ::int32_t FeasibilityPolishingDetails::_internal_iteration_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_count_;
}
inline void FeasibilityPolishingDetails::_internal_set_iteration_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.iteration_count_ = value;
}

// optional double solve_time_sec = 6;
inline bool FeasibilityPolishingDetails::has_solve_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_solve_time_sec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solve_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double FeasibilityPolishingDetails::solve_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.solve_time_sec)
  return _internal_solve_time_sec();
}
inline void FeasibilityPolishingDetails::set_solve_time_sec(double value) {
  _internal_set_solve_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.solve_time_sec)
}
inline double FeasibilityPolishingDetails::_internal_solve_time_sec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solve_time_sec_;
}
inline void FeasibilityPolishingDetails::_internal_set_solve_time_sec(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.solve_time_sec_ = value;
}

// optional .operations_research.pdlp.IterationStats solution_stats = 7;
inline bool FeasibilityPolishingDetails::has_solution_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solution_stats_ != nullptr);
  return value;
}
inline void FeasibilityPolishingDetails::clear_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.solution_stats_ != nullptr) _impl_.solution_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::pdlp::IterationStats& FeasibilityPolishingDetails::_internal_solution_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::IterationStats* p = _impl_.solution_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::IterationStats&>(::operations_research::pdlp::_IterationStats_default_instance_);
}
inline const ::operations_research::pdlp::IterationStats& FeasibilityPolishingDetails::solution_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.solution_stats)
  return _internal_solution_stats();
}
inline void FeasibilityPolishingDetails::unsafe_arena_set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solution_stats_);
  }
  _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.FeasibilityPolishingDetails.solution_stats)
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::release_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::pdlp::IterationStats* released = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::unsafe_arena_release_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.FeasibilityPolishingDetails.solution_stats)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::pdlp::IterationStats* temp = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::_internal_mutable_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.solution_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::IterationStats>(GetArena());
    _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(p);
  }
  return _impl_.solution_stats_;
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::mutable_solution_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::IterationStats* _msg = _internal_mutable_solution_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.FeasibilityPolishingDetails.solution_stats)
  return _msg;
}
inline void FeasibilityPolishingDetails::set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::pdlp::IterationStats*>(_impl_.solution_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.FeasibilityPolishingDetails.solution_stats)
}

// optional .operations_research.pdlp.PointType solution_type = 8;
inline bool FeasibilityPolishingDetails::has_solution_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void FeasibilityPolishingDetails::clear_solution_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::operations_research::pdlp::PointType FeasibilityPolishingDetails::solution_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.solution_type)
  return _internal_solution_type();
}
inline void FeasibilityPolishingDetails::set_solution_type(::operations_research::pdlp::PointType value) {
  _internal_set_solution_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.FeasibilityPolishingDetails.solution_type)
}
inline ::operations_research::pdlp::PointType FeasibilityPolishingDetails::_internal_solution_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PointType>(_impl_.solution_type_);
}
inline void FeasibilityPolishingDetails::_internal_set_solution_type(::operations_research::pdlp::PointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.solution_type_ = value;
}

// repeated .operations_research.pdlp.IterationStats iteration_stats = 9;
inline int FeasibilityPolishingDetails::_internal_iteration_stats_size() const {
  return _internal_iteration_stats().size();
}
inline int FeasibilityPolishingDetails::iteration_stats_size() const {
  return _internal_iteration_stats_size();
}
inline void FeasibilityPolishingDetails::clear_iteration_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_stats_.Clear();
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::mutable_iteration_stats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.FeasibilityPolishingDetails.iteration_stats)
  return _internal_mutable_iteration_stats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>* FeasibilityPolishingDetails::mutable_iteration_stats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.FeasibilityPolishingDetails.iteration_stats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_iteration_stats();
}
inline const ::operations_research::pdlp::IterationStats& FeasibilityPolishingDetails::iteration_stats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.FeasibilityPolishingDetails.iteration_stats)
  return _internal_iteration_stats().Get(index);
}
inline ::operations_research::pdlp::IterationStats* FeasibilityPolishingDetails::add_iteration_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::IterationStats* _add = _internal_mutable_iteration_stats()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.FeasibilityPolishingDetails.iteration_stats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>& FeasibilityPolishingDetails::iteration_stats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.FeasibilityPolishingDetails.iteration_stats)
  return _internal_iteration_stats();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>&
FeasibilityPolishingDetails::_internal_iteration_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_stats_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>*
FeasibilityPolishingDetails::_internal_mutable_iteration_stats() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.iteration_stats_;
}

// -------------------------------------------------------------------

// SolveLog

// optional string instance_name = 1;
inline bool SolveLog::has_instance_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SolveLog::clear_instance_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.instance_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SolveLog::instance_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.instance_name)
  return _internal_instance_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolveLog::set_instance_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.instance_name)
}
inline std::string* SolveLog::mutable_instance_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instance_name();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.instance_name)
  return _s;
}
inline const std::string& SolveLog::_internal_instance_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.instance_name_.Get();
}
inline void SolveLog::_internal_set_instance_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.instance_name_.Set(value, GetArena());
}
inline std::string* SolveLog::_internal_mutable_instance_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.instance_name_.Mutable( GetArena());
}
inline std::string* SolveLog::release_instance_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.instance_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.instance_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instance_name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolveLog::set_allocated_instance_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.instance_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.instance_name_.IsDefault()) {
          _impl_.instance_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.instance_name)
}

// optional .operations_research.pdlp.PrimalDualHybridGradientParams params = 14;
inline bool SolveLog::has_params() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.params_ != nullptr);
  return value;
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& SolveLog::_internal_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::PrimalDualHybridGradientParams* p = _impl_.params_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::PrimalDualHybridGradientParams&>(::operations_research::pdlp::_PrimalDualHybridGradientParams_default_instance_);
}
inline const ::operations_research::pdlp::PrimalDualHybridGradientParams& SolveLog::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.params)
  return _internal_params();
}
inline void SolveLog::unsafe_arena_set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }
  _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.params)
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::release_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* released = _impl_.params_;
  _impl_.params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::unsafe_arena_release_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.params)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::pdlp::PrimalDualHybridGradientParams* temp = _impl_.params_;
  _impl_.params_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::_internal_mutable_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.params_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::PrimalDualHybridGradientParams>(GetArena());
    _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(p);
  }
  return _impl_.params_;
}
inline ::operations_research::pdlp::PrimalDualHybridGradientParams* SolveLog::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::PrimalDualHybridGradientParams* _msg = _internal_mutable_params();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.params)
  return _msg;
}
inline void SolveLog::set_allocated_params(::operations_research::pdlp::PrimalDualHybridGradientParams* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.params_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.params_ = reinterpret_cast<::operations_research::pdlp::PrimalDualHybridGradientParams*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.params)
}

// optional .operations_research.pdlp.TerminationReason termination_reason = 3;
inline bool SolveLog::has_termination_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void SolveLog::clear_termination_reason() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.termination_reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::operations_research::pdlp::TerminationReason SolveLog::termination_reason() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.termination_reason)
  return _internal_termination_reason();
}
inline void SolveLog::set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  _internal_set_termination_reason(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.termination_reason)
}
inline ::operations_research::pdlp::TerminationReason SolveLog::_internal_termination_reason() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::TerminationReason>(_impl_.termination_reason_);
}
inline void SolveLog::_internal_set_termination_reason(::operations_research::pdlp::TerminationReason value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::TerminationReason_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.termination_reason_ = value;
}

// optional string termination_string = 4;
inline bool SolveLog::has_termination_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SolveLog::clear_termination_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.termination_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SolveLog::termination_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.termination_string)
  return _internal_termination_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SolveLog::set_termination_string(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.termination_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.termination_string)
}
inline std::string* SolveLog::mutable_termination_string() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_termination_string();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.termination_string)
  return _s;
}
inline const std::string& SolveLog::_internal_termination_string() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.termination_string_.Get();
}
inline void SolveLog::_internal_set_termination_string(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.termination_string_.Set(value, GetArena());
}
inline std::string* SolveLog::_internal_mutable_termination_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.termination_string_.Mutable( GetArena());
}
inline std::string* SolveLog::release_termination_string() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.termination_string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.termination_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.termination_string_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SolveLog::set_allocated_termination_string(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.termination_string_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.termination_string_.IsDefault()) {
          _impl_.termination_string_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.termination_string)
}

// optional int32 iteration_count = 5;
inline bool SolveLog::has_iteration_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SolveLog::clear_iteration_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t SolveLog::iteration_count() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.iteration_count)
  return _internal_iteration_count();
}
inline void SolveLog::set_iteration_count(::int32_t value) {
  _internal_set_iteration_count(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.iteration_count)
}
inline ::int32_t SolveLog::_internal_iteration_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_count_;
}
inline void SolveLog::_internal_set_iteration_count(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.iteration_count_ = value;
}

// optional double preprocessing_time_sec = 13;
inline bool SolveLog::has_preprocessing_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SolveLog::clear_preprocessing_time_sec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.preprocessing_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double SolveLog::preprocessing_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.preprocessing_time_sec)
  return _internal_preprocessing_time_sec();
}
inline void SolveLog::set_preprocessing_time_sec(double value) {
  _internal_set_preprocessing_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.preprocessing_time_sec)
}
inline double SolveLog::_internal_preprocessing_time_sec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.preprocessing_time_sec_;
}
inline void SolveLog::_internal_set_preprocessing_time_sec(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.preprocessing_time_sec_ = value;
}

// optional double solve_time_sec = 6;
inline bool SolveLog::has_solve_time_sec() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SolveLog::clear_solve_time_sec() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solve_time_sec_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double SolveLog::solve_time_sec() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solve_time_sec)
  return _internal_solve_time_sec();
}
inline void SolveLog::set_solve_time_sec(double value) {
  _internal_set_solve_time_sec(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.solve_time_sec)
}
inline double SolveLog::_internal_solve_time_sec() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solve_time_sec_;
}
inline void SolveLog::_internal_set_solve_time_sec(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.solve_time_sec_ = value;
}

// optional .operations_research.pdlp.IterationStats solution_stats = 8;
inline bool SolveLog::has_solution_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solution_stats_ != nullptr);
  return value;
}
inline void SolveLog::clear_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.solution_stats_ != nullptr) _impl_.solution_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::_internal_solution_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::IterationStats* p = _impl_.solution_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::IterationStats&>(::operations_research::pdlp::_IterationStats_default_instance_);
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::solution_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solution_stats)
  return _internal_solution_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solution_stats_);
  }
  _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.solution_stats)
}
inline ::operations_research::pdlp::IterationStats* SolveLog::release_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::pdlp::IterationStats* released = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::unsafe_arena_release_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.solution_stats)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::pdlp::IterationStats* temp = _impl_.solution_stats_;
  _impl_.solution_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::_internal_mutable_solution_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.solution_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::IterationStats>(GetArena());
    _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(p);
  }
  return _impl_.solution_stats_;
}
inline ::operations_research::pdlp::IterationStats* SolveLog::mutable_solution_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::IterationStats* _msg = _internal_mutable_solution_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.solution_stats)
  return _msg;
}
inline void SolveLog::set_allocated_solution_stats(::operations_research::pdlp::IterationStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::pdlp::IterationStats*>(_impl_.solution_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.solution_stats_ = reinterpret_cast<::operations_research::pdlp::IterationStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.solution_stats)
}

// optional .operations_research.pdlp.PointType solution_type = 10;
inline bool SolveLog::has_solution_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SolveLog::clear_solution_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::operations_research::pdlp::PointType SolveLog::solution_type() const {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.solution_type)
  return _internal_solution_type();
}
inline void SolveLog::set_solution_type(::operations_research::pdlp::PointType value) {
  _internal_set_solution_type(value);
  // @@protoc_insertion_point(field_set:operations_research.pdlp.SolveLog.solution_type)
}
inline ::operations_research::pdlp::PointType SolveLog::_internal_solution_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::pdlp::PointType>(_impl_.solution_type_);
}
inline void SolveLog::_internal_set_solution_type(::operations_research::pdlp::PointType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::pdlp::PointType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.solution_type_ = value;
}

// repeated .operations_research.pdlp.IterationStats iteration_stats = 7;
inline int SolveLog::_internal_iteration_stats_size() const {
  return _internal_iteration_stats().size();
}
inline int SolveLog::iteration_stats_size() const {
  return _internal_iteration_stats_size();
}
inline void SolveLog::clear_iteration_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_stats_.Clear();
}
inline ::operations_research::pdlp::IterationStats* SolveLog::mutable_iteration_stats(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.iteration_stats)
  return _internal_mutable_iteration_stats()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>* SolveLog::mutable_iteration_stats()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.SolveLog.iteration_stats)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_iteration_stats();
}
inline const ::operations_research::pdlp::IterationStats& SolveLog::iteration_stats(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.iteration_stats)
  return _internal_iteration_stats().Get(index);
}
inline ::operations_research::pdlp::IterationStats* SolveLog::add_iteration_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::IterationStats* _add = _internal_mutable_iteration_stats()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.SolveLog.iteration_stats)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>& SolveLog::iteration_stats() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.SolveLog.iteration_stats)
  return _internal_iteration_stats();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>&
SolveLog::_internal_iteration_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_stats_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::IterationStats>*
SolveLog::_internal_mutable_iteration_stats() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.iteration_stats_;
}

// optional .operations_research.pdlp.QuadraticProgramStats original_problem_stats = 11;
inline bool SolveLog::has_original_problem_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.original_problem_stats_ != nullptr);
  return value;
}
inline void SolveLog::clear_original_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.original_problem_stats_ != nullptr) _impl_.original_problem_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::_internal_original_problem_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::QuadraticProgramStats* p = _impl_.original_problem_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::QuadraticProgramStats&>(::operations_research::pdlp::_QuadraticProgramStats_default_instance_);
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::original_problem_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.original_problem_stats)
  return _internal_original_problem_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.original_problem_stats_);
  }
  _impl_.original_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.original_problem_stats)
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::release_original_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::pdlp::QuadraticProgramStats* released = _impl_.original_problem_stats_;
  _impl_.original_problem_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::unsafe_arena_release_original_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.original_problem_stats)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.original_problem_stats_;
  _impl_.original_problem_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::_internal_mutable_original_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.original_problem_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::QuadraticProgramStats>(GetArena());
    _impl_.original_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(p);
  }
  return _impl_.original_problem_stats_;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::mutable_original_problem_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::QuadraticProgramStats* _msg = _internal_mutable_original_problem_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.original_problem_stats)
  return _msg;
}
inline void SolveLog::set_allocated_original_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(_impl_.original_problem_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.original_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.original_problem_stats)
}

// optional .operations_research.pdlp.QuadraticProgramStats preprocessed_problem_stats = 12;
inline bool SolveLog::has_preprocessed_problem_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preprocessed_problem_stats_ != nullptr);
  return value;
}
inline void SolveLog::clear_preprocessed_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.preprocessed_problem_stats_ != nullptr) _impl_.preprocessed_problem_stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::_internal_preprocessed_problem_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::pdlp::QuadraticProgramStats* p = _impl_.preprocessed_problem_stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::pdlp::QuadraticProgramStats&>(::operations_research::pdlp::_QuadraticProgramStats_default_instance_);
}
inline const ::operations_research::pdlp::QuadraticProgramStats& SolveLog::preprocessed_problem_stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
  return _internal_preprocessed_problem_stats();
}
inline void SolveLog::unsafe_arena_set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.preprocessed_problem_stats_);
  }
  _impl_.preprocessed_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::release_preprocessed_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::pdlp::QuadraticProgramStats* released = _impl_.preprocessed_problem_stats_;
  _impl_.preprocessed_problem_stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::unsafe_arena_release_preprocessed_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.pdlp.SolveLog.preprocessed_problem_stats)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::pdlp::QuadraticProgramStats* temp = _impl_.preprocessed_problem_stats_;
  _impl_.preprocessed_problem_stats_ = nullptr;
  return temp;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::_internal_mutable_preprocessed_problem_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.preprocessed_problem_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::pdlp::QuadraticProgramStats>(GetArena());
    _impl_.preprocessed_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(p);
  }
  return _impl_.preprocessed_problem_stats_;
}
inline ::operations_research::pdlp::QuadraticProgramStats* SolveLog::mutable_preprocessed_problem_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::pdlp::QuadraticProgramStats* _msg = _internal_mutable_preprocessed_problem_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
  return _msg;
}
inline void SolveLog::set_allocated_preprocessed_problem_stats(::operations_research::pdlp::QuadraticProgramStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(_impl_.preprocessed_problem_stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.preprocessed_problem_stats_ = reinterpret_cast<::operations_research::pdlp::QuadraticProgramStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.pdlp.SolveLog.preprocessed_problem_stats)
}

// repeated .operations_research.pdlp.FeasibilityPolishingDetails feasibility_polishing_details = 15;
inline int SolveLog::_internal_feasibility_polishing_details_size() const {
  return _internal_feasibility_polishing_details().size();
}
inline int SolveLog::feasibility_polishing_details_size() const {
  return _internal_feasibility_polishing_details_size();
}
inline void SolveLog::clear_feasibility_polishing_details() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.feasibility_polishing_details_.Clear();
}
inline ::operations_research::pdlp::FeasibilityPolishingDetails* SolveLog::mutable_feasibility_polishing_details(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.pdlp.SolveLog.feasibility_polishing_details)
  return _internal_mutable_feasibility_polishing_details()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>* SolveLog::mutable_feasibility_polishing_details()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.pdlp.SolveLog.feasibility_polishing_details)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_feasibility_polishing_details();
}
inline const ::operations_research::pdlp::FeasibilityPolishingDetails& SolveLog::feasibility_polishing_details(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.pdlp.SolveLog.feasibility_polishing_details)
  return _internal_feasibility_polishing_details().Get(index);
}
inline ::operations_research::pdlp::FeasibilityPolishingDetails* SolveLog::add_feasibility_polishing_details() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::pdlp::FeasibilityPolishingDetails* _add = _internal_mutable_feasibility_polishing_details()->Add();
  // @@protoc_insertion_point(field_add:operations_research.pdlp.SolveLog.feasibility_polishing_details)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>& SolveLog::feasibility_polishing_details() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.pdlp.SolveLog.feasibility_polishing_details)
  return _internal_feasibility_polishing_details();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>&
SolveLog::_internal_feasibility_polishing_details() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.feasibility_polishing_details_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::pdlp::FeasibilityPolishingDetails>*
SolveLog::_internal_mutable_feasibility_polishing_details() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.feasibility_polishing_details_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace pdlp
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::pdlp::RestartChoice> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::pdlp::RestartChoice>() {
  return ::operations_research::pdlp::RestartChoice_descriptor();
}
template <>
struct is_proto_enum<::operations_research::pdlp::PointType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::pdlp::PointType>() {
  return ::operations_research::pdlp::PointType_descriptor();
}
template <>
struct is_proto_enum<::operations_research::pdlp::TerminationReason> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::pdlp::TerminationReason>() {
  return ::operations_research::pdlp::TerminationReason_descriptor();
}
template <>
struct is_proto_enum<::operations_research::pdlp::PolishingPhaseType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::pdlp::PolishingPhaseType>() {
  return ::operations_research::pdlp::PolishingPhaseType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fpdlp_2fsolve_5flog_2eproto_2epb_2eh
