include "core_data.fbs";

/// A decision model message must be serialzied to be passed around between modules.
/// This enumeration dictates what type of encoding is used for the bytes present
/// insidea decision model message.
enum BodyEncoding: byte {
    FlatBuffer,
    CBOR,
    MsgPack,
    JSON_UTF8
}

/// A decision model is a collection of parameters and associated functions that potentially define design spaces,
///  e.g. a decision model for tiled based platforms.
///
/// This message enables the decision models to be exchaged between modules and programs in an opaque form.
table DecisionModelMessage {
    header: DecisionModelHeader;
    body_encoding: BodyEncoding;
    body: [byte];
}

/// A design model is a model used by MDE frameworks and tools, e.g. Simulink and ForSyDe IO.
/// Like [DesignModel], this trait requires a header so that the identification procedure can work
/// correctly and terminate. The header gives an idea to the framework on how much can be "identified"
/// from the input MDE model, i.e. the [DesignModel].
///
/// This message enables the design models to be exchaged between modules and programs in an opaque form.
table DesignModelMessage {
    header: DesignModelHeader;
    format: string;
    body: string;
}

/// A simple struct to define a key-valye pair that is used inside the exploration solution message.
table ExplorationSolutionMessageEntry {
    name: string;
    value: double;
}

/// A exploration message contains the decision model with its enhanced parameters as well as the objectives.
///
/// Both the model and its objectives are given back as a message so that explorers can quickly use the objectives
/// directly instead of rebuilding the model and recomputing the objectives from the rebuild model.
/// On a more advanced note, taking the objectives directly also enables the explorer to focus only on a few
/// design goals and/or share objectives between decision models that are "alike" but not of the same category.
table ExplorationSolutionMessage {
    solved: DecisionModelMessage;
    objectives: [ExplorationSolutionMessageEntry];
}

/// The results of an identification step during the identification procedure.
///
/// The "messages" enable the modules to broadcast informative messages to the orchestrator,
/// who then can report to the user as it deems appropriate.
table IdentificationResultMessage {
    identified: [DecisionModelMessage];
    messages: [string];
}

/// A request for exploration.
///
/// All the extra parameters related to exploration are aggregated into the ExplorationConfiguration
/// object/
table ExplorationRequestMessage {
    model: DecisionModelMessage;
    solutions: [ExplorationSolutionMessage];
    configuration: ExplorationConfiguration;
}

/// Analogous of a identification result message but for the reverse identification procedure.
table ReverseIdentificationResultMessage {
    identified: [DesignModelMessage];
    messages: [string];
}