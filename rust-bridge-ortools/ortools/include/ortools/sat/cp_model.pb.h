// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/cp_model.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fcp_5fmodel_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fsat_2fcp_5fmodel_2eproto;
namespace operations_research {
namespace sat {
class AllDifferentConstraintProto;
struct AllDifferentConstraintProtoDefaultTypeInternal;
extern AllDifferentConstraintProtoDefaultTypeInternal _AllDifferentConstraintProto_default_instance_;
class AutomatonConstraintProto;
struct AutomatonConstraintProtoDefaultTypeInternal;
extern AutomatonConstraintProtoDefaultTypeInternal _AutomatonConstraintProto_default_instance_;
class BoolArgumentProto;
struct BoolArgumentProtoDefaultTypeInternal;
extern BoolArgumentProtoDefaultTypeInternal _BoolArgumentProto_default_instance_;
class CircuitConstraintProto;
struct CircuitConstraintProtoDefaultTypeInternal;
extern CircuitConstraintProtoDefaultTypeInternal _CircuitConstraintProto_default_instance_;
class ConstraintProto;
struct ConstraintProtoDefaultTypeInternal;
extern ConstraintProtoDefaultTypeInternal _ConstraintProto_default_instance_;
class CpModelProto;
struct CpModelProtoDefaultTypeInternal;
extern CpModelProtoDefaultTypeInternal _CpModelProto_default_instance_;
class CpObjectiveProto;
struct CpObjectiveProtoDefaultTypeInternal;
extern CpObjectiveProtoDefaultTypeInternal _CpObjectiveProto_default_instance_;
class CpSolverResponse;
struct CpSolverResponseDefaultTypeInternal;
extern CpSolverResponseDefaultTypeInternal _CpSolverResponse_default_instance_;
class CpSolverSolution;
struct CpSolverSolutionDefaultTypeInternal;
extern CpSolverSolutionDefaultTypeInternal _CpSolverSolution_default_instance_;
class CumulativeConstraintProto;
struct CumulativeConstraintProtoDefaultTypeInternal;
extern CumulativeConstraintProtoDefaultTypeInternal _CumulativeConstraintProto_default_instance_;
class DecisionStrategyProto;
struct DecisionStrategyProtoDefaultTypeInternal;
extern DecisionStrategyProtoDefaultTypeInternal _DecisionStrategyProto_default_instance_;
class DecisionStrategyProto_AffineTransformation;
struct DecisionStrategyProto_AffineTransformationDefaultTypeInternal;
extern DecisionStrategyProto_AffineTransformationDefaultTypeInternal _DecisionStrategyProto_AffineTransformation_default_instance_;
class DenseMatrixProto;
struct DenseMatrixProtoDefaultTypeInternal;
extern DenseMatrixProtoDefaultTypeInternal _DenseMatrixProto_default_instance_;
class ElementConstraintProto;
struct ElementConstraintProtoDefaultTypeInternal;
extern ElementConstraintProtoDefaultTypeInternal _ElementConstraintProto_default_instance_;
class FloatObjectiveProto;
struct FloatObjectiveProtoDefaultTypeInternal;
extern FloatObjectiveProtoDefaultTypeInternal _FloatObjectiveProto_default_instance_;
class IntegerVariableProto;
struct IntegerVariableProtoDefaultTypeInternal;
extern IntegerVariableProtoDefaultTypeInternal _IntegerVariableProto_default_instance_;
class IntervalConstraintProto;
struct IntervalConstraintProtoDefaultTypeInternal;
extern IntervalConstraintProtoDefaultTypeInternal _IntervalConstraintProto_default_instance_;
class InverseConstraintProto;
struct InverseConstraintProtoDefaultTypeInternal;
extern InverseConstraintProtoDefaultTypeInternal _InverseConstraintProto_default_instance_;
class LinearArgumentProto;
struct LinearArgumentProtoDefaultTypeInternal;
extern LinearArgumentProtoDefaultTypeInternal _LinearArgumentProto_default_instance_;
class LinearConstraintProto;
struct LinearConstraintProtoDefaultTypeInternal;
extern LinearConstraintProtoDefaultTypeInternal _LinearConstraintProto_default_instance_;
class LinearExpressionProto;
struct LinearExpressionProtoDefaultTypeInternal;
extern LinearExpressionProtoDefaultTypeInternal _LinearExpressionProto_default_instance_;
class ListOfVariablesProto;
struct ListOfVariablesProtoDefaultTypeInternal;
extern ListOfVariablesProtoDefaultTypeInternal _ListOfVariablesProto_default_instance_;
class NoOverlap2DConstraintProto;
struct NoOverlap2DConstraintProtoDefaultTypeInternal;
extern NoOverlap2DConstraintProtoDefaultTypeInternal _NoOverlap2DConstraintProto_default_instance_;
class NoOverlapConstraintProto;
struct NoOverlapConstraintProtoDefaultTypeInternal;
extern NoOverlapConstraintProtoDefaultTypeInternal _NoOverlapConstraintProto_default_instance_;
class PartialVariableAssignment;
struct PartialVariableAssignmentDefaultTypeInternal;
extern PartialVariableAssignmentDefaultTypeInternal _PartialVariableAssignment_default_instance_;
class ReservoirConstraintProto;
struct ReservoirConstraintProtoDefaultTypeInternal;
extern ReservoirConstraintProtoDefaultTypeInternal _ReservoirConstraintProto_default_instance_;
class RoutesConstraintProto;
struct RoutesConstraintProtoDefaultTypeInternal;
extern RoutesConstraintProtoDefaultTypeInternal _RoutesConstraintProto_default_instance_;
class SparsePermutationProto;
struct SparsePermutationProtoDefaultTypeInternal;
extern SparsePermutationProtoDefaultTypeInternal _SparsePermutationProto_default_instance_;
class SymmetryProto;
struct SymmetryProtoDefaultTypeInternal;
extern SymmetryProtoDefaultTypeInternal _SymmetryProto_default_instance_;
class TableConstraintProto;
struct TableConstraintProtoDefaultTypeInternal;
extern TableConstraintProtoDefaultTypeInternal _TableConstraintProto_default_instance_;
}  // namespace sat
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace sat {
enum DecisionStrategyProto_VariableSelectionStrategy : int {
  DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_FIRST = 0,
  DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_LOWEST_MIN = 1,
  DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_HIGHEST_MAX = 2,
  DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MIN_DOMAIN_SIZE = 3,
  DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MAX_DOMAIN_SIZE = 4,
  DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DecisionStrategyProto_VariableSelectionStrategy_DecisionStrategyProto_VariableSelectionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DecisionStrategyProto_VariableSelectionStrategy_IsValid(int value);
extern const uint32_t DecisionStrategyProto_VariableSelectionStrategy_internal_data_[];
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MIN = static_cast<DecisionStrategyProto_VariableSelectionStrategy>(0);
constexpr DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MAX = static_cast<DecisionStrategyProto_VariableSelectionStrategy>(4);
constexpr int DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
DecisionStrategyProto_VariableSelectionStrategy_descriptor();
template <typename T>
const std::string& DecisionStrategyProto_VariableSelectionStrategy_Name(T value) {
  static_assert(std::is_same<T, DecisionStrategyProto_VariableSelectionStrategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VariableSelectionStrategy_Name().");
  return DecisionStrategyProto_VariableSelectionStrategy_Name(static_cast<DecisionStrategyProto_VariableSelectionStrategy>(value));
}
template <>
inline const std::string& DecisionStrategyProto_VariableSelectionStrategy_Name(DecisionStrategyProto_VariableSelectionStrategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DecisionStrategyProto_VariableSelectionStrategy_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool DecisionStrategyProto_VariableSelectionStrategy_Parse(absl::string_view name, DecisionStrategyProto_VariableSelectionStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DecisionStrategyProto_VariableSelectionStrategy>(
      DecisionStrategyProto_VariableSelectionStrategy_descriptor(), name, value);
}
enum DecisionStrategyProto_DomainReductionStrategy : int {
  DecisionStrategyProto_DomainReductionStrategy_SELECT_MIN_VALUE = 0,
  DecisionStrategyProto_DomainReductionStrategy_SELECT_MAX_VALUE = 1,
  DecisionStrategyProto_DomainReductionStrategy_SELECT_LOWER_HALF = 2,
  DecisionStrategyProto_DomainReductionStrategy_SELECT_UPPER_HALF = 3,
  DecisionStrategyProto_DomainReductionStrategy_SELECT_MEDIAN_VALUE = 4,
  DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DecisionStrategyProto_DomainReductionStrategy_DecisionStrategyProto_DomainReductionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DecisionStrategyProto_DomainReductionStrategy_IsValid(int value);
extern const uint32_t DecisionStrategyProto_DomainReductionStrategy_internal_data_[];
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MIN = static_cast<DecisionStrategyProto_DomainReductionStrategy>(0);
constexpr DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MAX = static_cast<DecisionStrategyProto_DomainReductionStrategy>(4);
constexpr int DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
DecisionStrategyProto_DomainReductionStrategy_descriptor();
template <typename T>
const std::string& DecisionStrategyProto_DomainReductionStrategy_Name(T value) {
  static_assert(std::is_same<T, DecisionStrategyProto_DomainReductionStrategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DomainReductionStrategy_Name().");
  return DecisionStrategyProto_DomainReductionStrategy_Name(static_cast<DecisionStrategyProto_DomainReductionStrategy>(value));
}
template <>
inline const std::string& DecisionStrategyProto_DomainReductionStrategy_Name(DecisionStrategyProto_DomainReductionStrategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<DecisionStrategyProto_DomainReductionStrategy_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool DecisionStrategyProto_DomainReductionStrategy_Parse(absl::string_view name, DecisionStrategyProto_DomainReductionStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DecisionStrategyProto_DomainReductionStrategy>(
      DecisionStrategyProto_DomainReductionStrategy_descriptor(), name, value);
}
enum CpSolverStatus : int {
  UNKNOWN = 0,
  MODEL_INVALID = 1,
  FEASIBLE = 2,
  INFEASIBLE = 3,
  OPTIMAL = 4,
  CpSolverStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CpSolverStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CpSolverStatus_IsValid(int value);
extern const uint32_t CpSolverStatus_internal_data_[];
constexpr CpSolverStatus CpSolverStatus_MIN = static_cast<CpSolverStatus>(0);
constexpr CpSolverStatus CpSolverStatus_MAX = static_cast<CpSolverStatus>(4);
constexpr int CpSolverStatus_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
CpSolverStatus_descriptor();
template <typename T>
const std::string& CpSolverStatus_Name(T value) {
  static_assert(std::is_same<T, CpSolverStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CpSolverStatus_Name().");
  return CpSolverStatus_Name(static_cast<CpSolverStatus>(value));
}
template <>
inline const std::string& CpSolverStatus_Name(CpSolverStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CpSolverStatus_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool CpSolverStatus_Parse(absl::string_view name, CpSolverStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CpSolverStatus>(
      CpSolverStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TableConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.TableConstraintProto) */ {
 public:
  inline TableConstraintProto() : TableConstraintProto(nullptr) {}
  ~TableConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TableConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline TableConstraintProto(const TableConstraintProto& from)
      : TableConstraintProto(nullptr, from) {}
  TableConstraintProto(TableConstraintProto&& from) noexcept
    : TableConstraintProto() {
    *this = ::std::move(from);
  }

  inline TableConstraintProto& operator=(const TableConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline TableConstraintProto& operator=(TableConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TableConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const TableConstraintProto* internal_default_instance() {
    return reinterpret_cast<const TableConstraintProto*>(
               &_TableConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TableConstraintProto& a, TableConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(TableConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TableConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TableConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TableConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TableConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TableConstraintProto& from) {
    TableConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TableConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.TableConstraintProto";
  }
  protected:
  explicit TableConstraintProto(::google::protobuf::Arena* arena);
  TableConstraintProto(::google::protobuf::Arena* arena, const TableConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kValuesFieldNumber = 2,
    kNegatedFieldNumber = 3,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated int64 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int64_t values(int index) const;
  void set_values(int index, ::int64_t value);
  void add_values(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& values() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_values();

  public:
  // bool negated = 3;
  void clear_negated() ;
  bool negated() const;
  void set_negated(bool value);

  private:
  bool _internal_negated() const;
  void _internal_set_negated(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.TableConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> values_;
    mutable ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    bool negated_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class SparsePermutationProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.SparsePermutationProto) */ {
 public:
  inline SparsePermutationProto() : SparsePermutationProto(nullptr) {}
  ~SparsePermutationProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SparsePermutationProto(::google::protobuf::internal::ConstantInitialized);

  inline SparsePermutationProto(const SparsePermutationProto& from)
      : SparsePermutationProto(nullptr, from) {}
  SparsePermutationProto(SparsePermutationProto&& from) noexcept
    : SparsePermutationProto() {
    *this = ::std::move(from);
  }

  inline SparsePermutationProto& operator=(const SparsePermutationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SparsePermutationProto& operator=(SparsePermutationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SparsePermutationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SparsePermutationProto* internal_default_instance() {
    return reinterpret_cast<const SparsePermutationProto*>(
               &_SparsePermutationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(SparsePermutationProto& a, SparsePermutationProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SparsePermutationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SparsePermutationProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SparsePermutationProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SparsePermutationProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SparsePermutationProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SparsePermutationProto& from) {
    SparsePermutationProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SparsePermutationProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.SparsePermutationProto";
  }
  protected:
  explicit SparsePermutationProto(::google::protobuf::Arena* arena);
  SparsePermutationProto(::google::protobuf::Arena* arena, const SparsePermutationProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportFieldNumber = 1,
    kCycleSizesFieldNumber = 2,
  };
  // repeated int32 support = 1;
  int support_size() const;
  private:
  int _internal_support_size() const;

  public:
  void clear_support() ;
  ::int32_t support(int index) const;
  void set_support(int index, ::int32_t value);
  void add_support(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& support() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_support();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_support() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_support();

  public:
  // repeated int32 cycle_sizes = 2;
  int cycle_sizes_size() const;
  private:
  int _internal_cycle_sizes_size() const;

  public:
  void clear_cycle_sizes() ;
  ::int32_t cycle_sizes(int index) const;
  void set_cycle_sizes(int index, ::int32_t value);
  void add_cycle_sizes(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& cycle_sizes() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_cycle_sizes();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_cycle_sizes() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_cycle_sizes();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.SparsePermutationProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> support_;
    mutable ::google::protobuf::internal::CachedSize _support_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> cycle_sizes_;
    mutable ::google::protobuf::internal::CachedSize _cycle_sizes_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class RoutesConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.RoutesConstraintProto) */ {
 public:
  inline RoutesConstraintProto() : RoutesConstraintProto(nullptr) {}
  ~RoutesConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoutesConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline RoutesConstraintProto(const RoutesConstraintProto& from)
      : RoutesConstraintProto(nullptr, from) {}
  RoutesConstraintProto(RoutesConstraintProto&& from) noexcept
    : RoutesConstraintProto() {
    *this = ::std::move(from);
  }

  inline RoutesConstraintProto& operator=(const RoutesConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutesConstraintProto& operator=(RoutesConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutesConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutesConstraintProto* internal_default_instance() {
    return reinterpret_cast<const RoutesConstraintProto*>(
               &_RoutesConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RoutesConstraintProto& a, RoutesConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutesConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutesConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutesConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutesConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutesConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoutesConstraintProto& from) {
    RoutesConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoutesConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.RoutesConstraintProto";
  }
  protected:
  explicit RoutesConstraintProto(::google::protobuf::Arena* arena);
  RoutesConstraintProto(::google::protobuf::Arena* arena, const RoutesConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTailsFieldNumber = 1,
    kHeadsFieldNumber = 2,
    kLiteralsFieldNumber = 3,
    kDemandsFieldNumber = 4,
    kCapacityFieldNumber = 5,
  };
  // repeated int32 tails = 1;
  int tails_size() const;
  private:
  int _internal_tails_size() const;

  public:
  void clear_tails() ;
  ::int32_t tails(int index) const;
  void set_tails(int index, ::int32_t value);
  void add_tails(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& tails() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_tails();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_tails() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_tails();

  public:
  // repeated int32 heads = 2;
  int heads_size() const;
  private:
  int _internal_heads_size() const;

  public:
  void clear_heads() ;
  ::int32_t heads(int index) const;
  void set_heads(int index, ::int32_t value);
  void add_heads(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& heads() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_heads();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_heads() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_heads();

  public:
  // repeated int32 literals = 3;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // repeated int32 demands = 4;
  int demands_size() const;
  private:
  int _internal_demands_size() const;

  public:
  void clear_demands() ;
  ::int32_t demands(int index) const;
  void set_demands(int index, ::int32_t value);
  void add_demands(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& demands() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_demands();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_demands() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_demands();

  public:
  // int64 capacity = 5;
  void clear_capacity() ;
  ::int64_t capacity() const;
  void set_capacity(::int64_t value);

  private:
  ::int64_t _internal_capacity() const;
  void _internal_set_capacity(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.RoutesConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> tails_;
    mutable ::google::protobuf::internal::CachedSize _tails_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> heads_;
    mutable ::google::protobuf::internal::CachedSize _heads_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    mutable ::google::protobuf::internal::CachedSize _literals_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> demands_;
    mutable ::google::protobuf::internal::CachedSize _demands_cached_byte_size_;
    ::int64_t capacity_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class PartialVariableAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.PartialVariableAssignment) */ {
 public:
  inline PartialVariableAssignment() : PartialVariableAssignment(nullptr) {}
  ~PartialVariableAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PartialVariableAssignment(::google::protobuf::internal::ConstantInitialized);

  inline PartialVariableAssignment(const PartialVariableAssignment& from)
      : PartialVariableAssignment(nullptr, from) {}
  PartialVariableAssignment(PartialVariableAssignment&& from) noexcept
    : PartialVariableAssignment() {
    *this = ::std::move(from);
  }

  inline PartialVariableAssignment& operator=(const PartialVariableAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialVariableAssignment& operator=(PartialVariableAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PartialVariableAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialVariableAssignment* internal_default_instance() {
    return reinterpret_cast<const PartialVariableAssignment*>(
               &_PartialVariableAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PartialVariableAssignment& a, PartialVariableAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(PartialVariableAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialVariableAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialVariableAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialVariableAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PartialVariableAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PartialVariableAssignment& from) {
    PartialVariableAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PartialVariableAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.PartialVariableAssignment";
  }
  protected:
  explicit PartialVariableAssignment(::google::protobuf::Arena* arena);
  PartialVariableAssignment(::google::protobuf::Arena* arena, const PartialVariableAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kValuesFieldNumber = 2,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated int64 values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int64_t values(int index) const;
  void set_values(int index, ::int64_t value);
  void add_values(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& values() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.PartialVariableAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> values_;
    mutable ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class NoOverlapConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.NoOverlapConstraintProto) */ {
 public:
  inline NoOverlapConstraintProto() : NoOverlapConstraintProto(nullptr) {}
  ~NoOverlapConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NoOverlapConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline NoOverlapConstraintProto(const NoOverlapConstraintProto& from)
      : NoOverlapConstraintProto(nullptr, from) {}
  NoOverlapConstraintProto(NoOverlapConstraintProto&& from) noexcept
    : NoOverlapConstraintProto() {
    *this = ::std::move(from);
  }

  inline NoOverlapConstraintProto& operator=(const NoOverlapConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoOverlapConstraintProto& operator=(NoOverlapConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoOverlapConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoOverlapConstraintProto* internal_default_instance() {
    return reinterpret_cast<const NoOverlapConstraintProto*>(
               &_NoOverlapConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(NoOverlapConstraintProto& a, NoOverlapConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NoOverlapConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoOverlapConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoOverlapConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoOverlapConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NoOverlapConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NoOverlapConstraintProto& from) {
    NoOverlapConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NoOverlapConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.NoOverlapConstraintProto";
  }
  protected:
  explicit NoOverlapConstraintProto(::google::protobuf::Arena* arena);
  NoOverlapConstraintProto(::google::protobuf::Arena* arena, const NoOverlapConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 1,
  };
  // repeated int32 intervals = 1;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;

  public:
  void clear_intervals() ;
  ::int32_t intervals(int index) const;
  void set_intervals(int index, ::int32_t value);
  void add_intervals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_intervals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_intervals();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.NoOverlapConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> intervals_;
    mutable ::google::protobuf::internal::CachedSize _intervals_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class NoOverlap2DConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.NoOverlap2DConstraintProto) */ {
 public:
  inline NoOverlap2DConstraintProto() : NoOverlap2DConstraintProto(nullptr) {}
  ~NoOverlap2DConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NoOverlap2DConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline NoOverlap2DConstraintProto(const NoOverlap2DConstraintProto& from)
      : NoOverlap2DConstraintProto(nullptr, from) {}
  NoOverlap2DConstraintProto(NoOverlap2DConstraintProto&& from) noexcept
    : NoOverlap2DConstraintProto() {
    *this = ::std::move(from);
  }

  inline NoOverlap2DConstraintProto& operator=(const NoOverlap2DConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoOverlap2DConstraintProto& operator=(NoOverlap2DConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NoOverlap2DConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const NoOverlap2DConstraintProto* internal_default_instance() {
    return reinterpret_cast<const NoOverlap2DConstraintProto*>(
               &_NoOverlap2DConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NoOverlap2DConstraintProto& a, NoOverlap2DConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(NoOverlap2DConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoOverlap2DConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NoOverlap2DConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NoOverlap2DConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NoOverlap2DConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NoOverlap2DConstraintProto& from) {
    NoOverlap2DConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(NoOverlap2DConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.NoOverlap2DConstraintProto";
  }
  protected:
  explicit NoOverlap2DConstraintProto(::google::protobuf::Arena* arena);
  NoOverlap2DConstraintProto(::google::protobuf::Arena* arena, const NoOverlap2DConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXIntervalsFieldNumber = 1,
    kYIntervalsFieldNumber = 2,
  };
  // repeated int32 x_intervals = 1;
  int x_intervals_size() const;
  private:
  int _internal_x_intervals_size() const;

  public:
  void clear_x_intervals() ;
  ::int32_t x_intervals(int index) const;
  void set_x_intervals(int index, ::int32_t value);
  void add_x_intervals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& x_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_x_intervals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_x_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_x_intervals();

  public:
  // repeated int32 y_intervals = 2;
  int y_intervals_size() const;
  private:
  int _internal_y_intervals_size() const;

  public:
  void clear_y_intervals() ;
  ::int32_t y_intervals(int index) const;
  void set_y_intervals(int index, ::int32_t value);
  void add_y_intervals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& y_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_y_intervals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_y_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_y_intervals();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.NoOverlap2DConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> x_intervals_;
    mutable ::google::protobuf::internal::CachedSize _x_intervals_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> y_intervals_;
    mutable ::google::protobuf::internal::CachedSize _y_intervals_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ListOfVariablesProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.ListOfVariablesProto) */ {
 public:
  inline ListOfVariablesProto() : ListOfVariablesProto(nullptr) {}
  ~ListOfVariablesProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ListOfVariablesProto(::google::protobuf::internal::ConstantInitialized);

  inline ListOfVariablesProto(const ListOfVariablesProto& from)
      : ListOfVariablesProto(nullptr, from) {}
  ListOfVariablesProto(ListOfVariablesProto&& from) noexcept
    : ListOfVariablesProto() {
    *this = ::std::move(from);
  }

  inline ListOfVariablesProto& operator=(const ListOfVariablesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListOfVariablesProto& operator=(ListOfVariablesProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListOfVariablesProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListOfVariablesProto* internal_default_instance() {
    return reinterpret_cast<const ListOfVariablesProto*>(
               &_ListOfVariablesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListOfVariablesProto& a, ListOfVariablesProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ListOfVariablesProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListOfVariablesProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListOfVariablesProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListOfVariablesProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListOfVariablesProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ListOfVariablesProto& from) {
    ListOfVariablesProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ListOfVariablesProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.ListOfVariablesProto";
  }
  protected:
  explicit ListOfVariablesProto(::google::protobuf::Arena* arena);
  ListOfVariablesProto(::google::protobuf::Arena* arena, const ListOfVariablesProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.ListOfVariablesProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class LinearExpressionProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearExpressionProto) */ {
 public:
  inline LinearExpressionProto() : LinearExpressionProto(nullptr) {}
  ~LinearExpressionProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearExpressionProto(::google::protobuf::internal::ConstantInitialized);

  inline LinearExpressionProto(const LinearExpressionProto& from)
      : LinearExpressionProto(nullptr, from) {}
  LinearExpressionProto(LinearExpressionProto&& from) noexcept
    : LinearExpressionProto() {
    *this = ::std::move(from);
  }

  inline LinearExpressionProto& operator=(const LinearExpressionProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearExpressionProto& operator=(LinearExpressionProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearExpressionProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearExpressionProto* internal_default_instance() {
    return reinterpret_cast<const LinearExpressionProto*>(
               &_LinearExpressionProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LinearExpressionProto& a, LinearExpressionProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearExpressionProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearExpressionProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearExpressionProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearExpressionProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearExpressionProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearExpressionProto& from) {
    LinearExpressionProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearExpressionProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearExpressionProto";
  }
  protected:
  explicit LinearExpressionProto(::google::protobuf::Arena* arena);
  LinearExpressionProto(::google::protobuf::Arena* arena, const LinearExpressionProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kCoeffsFieldNumber = 2,
    kOffsetFieldNumber = 3,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated int64 coeffs = 2;
  int coeffs_size() const;
  private:
  int _internal_coeffs_size() const;

  public:
  void clear_coeffs() ;
  ::int64_t coeffs(int index) const;
  void set_coeffs(int index, ::int64_t value);
  void add_coeffs(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_coeffs();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_coeffs();

  public:
  // int64 offset = 3;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearExpressionProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> coeffs_;
    mutable ::google::protobuf::internal::CachedSize _coeffs_cached_byte_size_;
    ::int64_t offset_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class LinearConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearConstraintProto) */ {
 public:
  inline LinearConstraintProto() : LinearConstraintProto(nullptr) {}
  ~LinearConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline LinearConstraintProto(const LinearConstraintProto& from)
      : LinearConstraintProto(nullptr, from) {}
  LinearConstraintProto(LinearConstraintProto&& from) noexcept
    : LinearConstraintProto() {
    *this = ::std::move(from);
  }

  inline LinearConstraintProto& operator=(const LinearConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearConstraintProto& operator=(LinearConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearConstraintProto* internal_default_instance() {
    return reinterpret_cast<const LinearConstraintProto*>(
               &_LinearConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LinearConstraintProto& a, LinearConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearConstraintProto& from) {
    LinearConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearConstraintProto";
  }
  protected:
  explicit LinearConstraintProto(::google::protobuf::Arena* arena);
  LinearConstraintProto(::google::protobuf::Arena* arena, const LinearConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kCoeffsFieldNumber = 2,
    kDomainFieldNumber = 3,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated int64 coeffs = 2;
  int coeffs_size() const;
  private:
  int _internal_coeffs_size() const;

  public:
  void clear_coeffs() ;
  ::int64_t coeffs(int index) const;
  void set_coeffs(int index, ::int64_t value);
  void add_coeffs(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_coeffs();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_coeffs();

  public:
  // repeated int64 domain = 3;
  int domain_size() const;
  private:
  int _internal_domain_size() const;

  public:
  void clear_domain() ;
  ::int64_t domain(int index) const;
  void set_domain(int index, ::int64_t value);
  void add_domain(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_domain();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_domain();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> coeffs_;
    mutable ::google::protobuf::internal::CachedSize _coeffs_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> domain_;
    mutable ::google::protobuf::internal::CachedSize _domain_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class InverseConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.InverseConstraintProto) */ {
 public:
  inline InverseConstraintProto() : InverseConstraintProto(nullptr) {}
  ~InverseConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR InverseConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline InverseConstraintProto(const InverseConstraintProto& from)
      : InverseConstraintProto(nullptr, from) {}
  InverseConstraintProto(InverseConstraintProto&& from) noexcept
    : InverseConstraintProto() {
    *this = ::std::move(from);
  }

  inline InverseConstraintProto& operator=(const InverseConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline InverseConstraintProto& operator=(InverseConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InverseConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const InverseConstraintProto* internal_default_instance() {
    return reinterpret_cast<const InverseConstraintProto*>(
               &_InverseConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(InverseConstraintProto& a, InverseConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(InverseConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InverseConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InverseConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InverseConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InverseConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const InverseConstraintProto& from) {
    InverseConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(InverseConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.InverseConstraintProto";
  }
  protected:
  explicit InverseConstraintProto(::google::protobuf::Arena* arena);
  InverseConstraintProto(::google::protobuf::Arena* arena, const InverseConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFDirectFieldNumber = 1,
    kFInverseFieldNumber = 2,
  };
  // repeated int32 f_direct = 1;
  int f_direct_size() const;
  private:
  int _internal_f_direct_size() const;

  public:
  void clear_f_direct() ;
  ::int32_t f_direct(int index) const;
  void set_f_direct(int index, ::int32_t value);
  void add_f_direct(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_direct() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_direct();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_direct() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_direct();

  public:
  // repeated int32 f_inverse = 2;
  int f_inverse_size() const;
  private:
  int _internal_f_inverse_size() const;

  public:
  void clear_f_inverse() ;
  ::int32_t f_inverse(int index) const;
  void set_f_inverse(int index, ::int32_t value);
  void add_f_inverse(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& f_inverse() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_f_inverse();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_f_inverse() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_f_inverse();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.InverseConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> f_direct_;
    mutable ::google::protobuf::internal::CachedSize _f_direct_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> f_inverse_;
    mutable ::google::protobuf::internal::CachedSize _f_inverse_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class IntegerVariableProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.IntegerVariableProto) */ {
 public:
  inline IntegerVariableProto() : IntegerVariableProto(nullptr) {}
  ~IntegerVariableProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntegerVariableProto(::google::protobuf::internal::ConstantInitialized);

  inline IntegerVariableProto(const IntegerVariableProto& from)
      : IntegerVariableProto(nullptr, from) {}
  IntegerVariableProto(IntegerVariableProto&& from) noexcept
    : IntegerVariableProto() {
    *this = ::std::move(from);
  }

  inline IntegerVariableProto& operator=(const IntegerVariableProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntegerVariableProto& operator=(IntegerVariableProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntegerVariableProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntegerVariableProto* internal_default_instance() {
    return reinterpret_cast<const IntegerVariableProto*>(
               &_IntegerVariableProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntegerVariableProto& a, IntegerVariableProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntegerVariableProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntegerVariableProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntegerVariableProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntegerVariableProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntegerVariableProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntegerVariableProto& from) {
    IntegerVariableProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntegerVariableProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.IntegerVariableProto";
  }
  protected:
  explicit IntegerVariableProto(::google::protobuf::Arena* arena);
  IntegerVariableProto(::google::protobuf::Arena* arena, const IntegerVariableProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated int64 domain = 2;
  int domain_size() const;
  private:
  int _internal_domain_size() const;

  public:
  void clear_domain() ;
  ::int64_t domain(int index) const;
  void set_domain(int index, ::int64_t value);
  void add_domain(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_domain();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_domain();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.IntegerVariableProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> domain_;
    mutable ::google::protobuf::internal::CachedSize _domain_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class FloatObjectiveProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.FloatObjectiveProto) */ {
 public:
  inline FloatObjectiveProto() : FloatObjectiveProto(nullptr) {}
  ~FloatObjectiveProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FloatObjectiveProto(::google::protobuf::internal::ConstantInitialized);

  inline FloatObjectiveProto(const FloatObjectiveProto& from)
      : FloatObjectiveProto(nullptr, from) {}
  FloatObjectiveProto(FloatObjectiveProto&& from) noexcept
    : FloatObjectiveProto() {
    *this = ::std::move(from);
  }

  inline FloatObjectiveProto& operator=(const FloatObjectiveProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatObjectiveProto& operator=(FloatObjectiveProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FloatObjectiveProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatObjectiveProto* internal_default_instance() {
    return reinterpret_cast<const FloatObjectiveProto*>(
               &_FloatObjectiveProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FloatObjectiveProto& a, FloatObjectiveProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FloatObjectiveProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatObjectiveProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatObjectiveProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatObjectiveProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FloatObjectiveProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FloatObjectiveProto& from) {
    FloatObjectiveProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FloatObjectiveProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.FloatObjectiveProto";
  }
  protected:
  explicit FloatObjectiveProto(::google::protobuf::Arena* arena);
  FloatObjectiveProto(::google::protobuf::Arena* arena, const FloatObjectiveProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kCoeffsFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kMaximizeFieldNumber = 4,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated double coeffs = 2;
  int coeffs_size() const;
  private:
  int _internal_coeffs_size() const;

  public:
  void clear_coeffs() ;
  double coeffs(int index) const;
  void set_coeffs(int index, double value);
  void add_coeffs(double value);
  const ::google::protobuf::RepeatedField<double>& coeffs() const;
  ::google::protobuf::RepeatedField<double>* mutable_coeffs();

  private:
  const ::google::protobuf::RepeatedField<double>& _internal_coeffs() const;
  ::google::protobuf::RepeatedField<double>* _internal_mutable_coeffs();

  public:
  // double offset = 3;
  void clear_offset() ;
  double offset() const;
  void set_offset(double value);

  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);

  public:
  // bool maximize = 4;
  void clear_maximize() ;
  bool maximize() const;
  void set_maximize(bool value);

  private:
  bool _internal_maximize() const;
  void _internal_set_maximize(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.FloatObjectiveProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<double> coeffs_;
    double offset_;
    bool maximize_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ElementConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.ElementConstraintProto) */ {
 public:
  inline ElementConstraintProto() : ElementConstraintProto(nullptr) {}
  ~ElementConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ElementConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline ElementConstraintProto(const ElementConstraintProto& from)
      : ElementConstraintProto(nullptr, from) {}
  ElementConstraintProto(ElementConstraintProto&& from) noexcept
    : ElementConstraintProto() {
    *this = ::std::move(from);
  }

  inline ElementConstraintProto& operator=(const ElementConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ElementConstraintProto& operator=(ElementConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ElementConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ElementConstraintProto* internal_default_instance() {
    return reinterpret_cast<const ElementConstraintProto*>(
               &_ElementConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ElementConstraintProto& a, ElementConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ElementConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ElementConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ElementConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ElementConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ElementConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ElementConstraintProto& from) {
    ElementConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ElementConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.ElementConstraintProto";
  }
  protected:
  explicit ElementConstraintProto(::google::protobuf::Arena* arena);
  ElementConstraintProto(::google::protobuf::Arena* arena, const ElementConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 3,
    kIndexFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated int32 vars = 3;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // int32 target = 2;
  void clear_target() ;
  ::int32_t target() const;
  void set_target(::int32_t value);

  private:
  ::int32_t _internal_target() const;
  void _internal_set_target(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.ElementConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::int32_t index_;
    ::int32_t target_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class DenseMatrixProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.DenseMatrixProto) */ {
 public:
  inline DenseMatrixProto() : DenseMatrixProto(nullptr) {}
  ~DenseMatrixProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DenseMatrixProto(::google::protobuf::internal::ConstantInitialized);

  inline DenseMatrixProto(const DenseMatrixProto& from)
      : DenseMatrixProto(nullptr, from) {}
  DenseMatrixProto(DenseMatrixProto&& from) noexcept
    : DenseMatrixProto() {
    *this = ::std::move(from);
  }

  inline DenseMatrixProto& operator=(const DenseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DenseMatrixProto& operator=(DenseMatrixProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DenseMatrixProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DenseMatrixProto* internal_default_instance() {
    return reinterpret_cast<const DenseMatrixProto*>(
               &_DenseMatrixProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DenseMatrixProto& a, DenseMatrixProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DenseMatrixProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DenseMatrixProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DenseMatrixProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DenseMatrixProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DenseMatrixProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DenseMatrixProto& from) {
    DenseMatrixProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DenseMatrixProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.DenseMatrixProto";
  }
  protected:
  explicit DenseMatrixProto(::google::protobuf::Arena* arena);
  DenseMatrixProto(::google::protobuf::Arena* arena, const DenseMatrixProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 3,
    kNumRowsFieldNumber = 1,
    kNumColsFieldNumber = 2,
  };
  // repeated int32 entries = 3;
  int entries_size() const;
  private:
  int _internal_entries_size() const;

  public:
  void clear_entries() ;
  ::int32_t entries(int index) const;
  void set_entries(int index, ::int32_t value);
  void add_entries(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& entries() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_entries();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_entries() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_entries();

  public:
  // int32 num_rows = 1;
  void clear_num_rows() ;
  ::int32_t num_rows() const;
  void set_num_rows(::int32_t value);

  private:
  ::int32_t _internal_num_rows() const;
  void _internal_set_num_rows(::int32_t value);

  public:
  // int32 num_cols = 2;
  void clear_num_cols() ;
  ::int32_t num_cols() const;
  void set_num_cols(::int32_t value);

  private:
  ::int32_t _internal_num_cols() const;
  void _internal_set_num_cols(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.DenseMatrixProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> entries_;
    mutable ::google::protobuf::internal::CachedSize _entries_cached_byte_size_;
    ::int32_t num_rows_;
    ::int32_t num_cols_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class DecisionStrategyProto_AffineTransformation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.DecisionStrategyProto.AffineTransformation) */ {
 public:
  inline DecisionStrategyProto_AffineTransformation() : DecisionStrategyProto_AffineTransformation(nullptr) {}
  ~DecisionStrategyProto_AffineTransformation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DecisionStrategyProto_AffineTransformation(::google::protobuf::internal::ConstantInitialized);

  inline DecisionStrategyProto_AffineTransformation(const DecisionStrategyProto_AffineTransformation& from)
      : DecisionStrategyProto_AffineTransformation(nullptr, from) {}
  DecisionStrategyProto_AffineTransformation(DecisionStrategyProto_AffineTransformation&& from) noexcept
    : DecisionStrategyProto_AffineTransformation() {
    *this = ::std::move(from);
  }

  inline DecisionStrategyProto_AffineTransformation& operator=(const DecisionStrategyProto_AffineTransformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionStrategyProto_AffineTransformation& operator=(DecisionStrategyProto_AffineTransformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionStrategyProto_AffineTransformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionStrategyProto_AffineTransformation* internal_default_instance() {
    return reinterpret_cast<const DecisionStrategyProto_AffineTransformation*>(
               &_DecisionStrategyProto_AffineTransformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DecisionStrategyProto_AffineTransformation& a, DecisionStrategyProto_AffineTransformation& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionStrategyProto_AffineTransformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionStrategyProto_AffineTransformation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionStrategyProto_AffineTransformation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionStrategyProto_AffineTransformation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecisionStrategyProto_AffineTransformation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DecisionStrategyProto_AffineTransformation& from) {
    DecisionStrategyProto_AffineTransformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DecisionStrategyProto_AffineTransformation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.DecisionStrategyProto.AffineTransformation";
  }
  protected:
  explicit DecisionStrategyProto_AffineTransformation(::google::protobuf::Arena* arena);
  DecisionStrategyProto_AffineTransformation(::google::protobuf::Arena* arena, const DecisionStrategyProto_AffineTransformation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOffsetFieldNumber = 2,
    kPositiveCoeffFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // int64 offset = 2;
  void clear_offset() ;
  ::int64_t offset() const;
  void set_offset(::int64_t value);

  private:
  ::int64_t _internal_offset() const;
  void _internal_set_offset(::int64_t value);

  public:
  // int64 positive_coeff = 3;
  void clear_positive_coeff() ;
  ::int64_t positive_coeff() const;
  void set_positive_coeff(::int64_t value);

  private:
  ::int64_t _internal_positive_coeff() const;
  void _internal_set_positive_coeff(::int64_t value);

  public:
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.DecisionStrategyProto.AffineTransformation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t offset_;
    ::int64_t positive_coeff_;
    ::int32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CpSolverSolution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CpSolverSolution) */ {
 public:
  inline CpSolverSolution() : CpSolverSolution(nullptr) {}
  ~CpSolverSolution() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpSolverSolution(::google::protobuf::internal::ConstantInitialized);

  inline CpSolverSolution(const CpSolverSolution& from)
      : CpSolverSolution(nullptr, from) {}
  CpSolverSolution(CpSolverSolution&& from) noexcept
    : CpSolverSolution() {
    *this = ::std::move(from);
  }

  inline CpSolverSolution& operator=(const CpSolverSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpSolverSolution& operator=(CpSolverSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpSolverSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpSolverSolution* internal_default_instance() {
    return reinterpret_cast<const CpSolverSolution*>(
               &_CpSolverSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CpSolverSolution& a, CpSolverSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(CpSolverSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpSolverSolution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpSolverSolution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpSolverSolution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CpSolverSolution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CpSolverSolution& from) {
    CpSolverSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CpSolverSolution* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CpSolverSolution";
  }
  protected:
  explicit CpSolverSolution(::google::protobuf::Arena* arena);
  CpSolverSolution(::google::protobuf::Arena* arena, const CpSolverSolution& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated int64 values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  ::int64_t values(int index) const;
  void set_values(int index, ::int64_t value);
  void add_values(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& values() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_values();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_values() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CpSolverSolution)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> values_;
    mutable ::google::protobuf::internal::CachedSize _values_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CpObjectiveProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CpObjectiveProto) */ {
 public:
  inline CpObjectiveProto() : CpObjectiveProto(nullptr) {}
  ~CpObjectiveProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpObjectiveProto(::google::protobuf::internal::ConstantInitialized);

  inline CpObjectiveProto(const CpObjectiveProto& from)
      : CpObjectiveProto(nullptr, from) {}
  CpObjectiveProto(CpObjectiveProto&& from) noexcept
    : CpObjectiveProto() {
    *this = ::std::move(from);
  }

  inline CpObjectiveProto& operator=(const CpObjectiveProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpObjectiveProto& operator=(CpObjectiveProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpObjectiveProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpObjectiveProto* internal_default_instance() {
    return reinterpret_cast<const CpObjectiveProto*>(
               &_CpObjectiveProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CpObjectiveProto& a, CpObjectiveProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CpObjectiveProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpObjectiveProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpObjectiveProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpObjectiveProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CpObjectiveProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CpObjectiveProto& from) {
    CpObjectiveProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CpObjectiveProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CpObjectiveProto";
  }
  protected:
  explicit CpObjectiveProto(::google::protobuf::Arena* arena);
  CpObjectiveProto(::google::protobuf::Arena* arena, const CpObjectiveProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarsFieldNumber = 1,
    kCoeffsFieldNumber = 4,
    kDomainFieldNumber = 5,
    kOffsetFieldNumber = 2,
    kScalingFactorFieldNumber = 3,
    kIntegerBeforeOffsetFieldNumber = 7,
    kIntegerScalingFactorFieldNumber = 8,
    kIntegerAfterOffsetFieldNumber = 9,
    kScalingWasExactFieldNumber = 6,
  };
  // repeated int32 vars = 1;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // repeated int64 coeffs = 4;
  int coeffs_size() const;
  private:
  int _internal_coeffs_size() const;

  public:
  void clear_coeffs() ;
  ::int64_t coeffs(int index) const;
  void set_coeffs(int index, ::int64_t value);
  void add_coeffs(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_coeffs();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_coeffs() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_coeffs();

  public:
  // repeated int64 domain = 5;
  int domain_size() const;
  private:
  int _internal_domain_size() const;

  public:
  void clear_domain() ;
  ::int64_t domain(int index) const;
  void set_domain(int index, ::int64_t value);
  void add_domain(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_domain();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_domain() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_domain();

  public:
  // double offset = 2;
  void clear_offset() ;
  double offset() const;
  void set_offset(double value);

  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);

  public:
  // double scaling_factor = 3;
  void clear_scaling_factor() ;
  double scaling_factor() const;
  void set_scaling_factor(double value);

  private:
  double _internal_scaling_factor() const;
  void _internal_set_scaling_factor(double value);

  public:
  // int64 integer_before_offset = 7;
  void clear_integer_before_offset() ;
  ::int64_t integer_before_offset() const;
  void set_integer_before_offset(::int64_t value);

  private:
  ::int64_t _internal_integer_before_offset() const;
  void _internal_set_integer_before_offset(::int64_t value);

  public:
  // int64 integer_scaling_factor = 8;
  void clear_integer_scaling_factor() ;
  ::int64_t integer_scaling_factor() const;
  void set_integer_scaling_factor(::int64_t value);

  private:
  ::int64_t _internal_integer_scaling_factor() const;
  void _internal_set_integer_scaling_factor(::int64_t value);

  public:
  // int64 integer_after_offset = 9;
  void clear_integer_after_offset() ;
  ::int64_t integer_after_offset() const;
  void set_integer_after_offset(::int64_t value);

  private:
  ::int64_t _internal_integer_after_offset() const;
  void _internal_set_integer_after_offset(::int64_t value);

  public:
  // bool scaling_was_exact = 6;
  void clear_scaling_was_exact() ;
  bool scaling_was_exact() const;
  void set_scaling_was_exact(bool value);

  private:
  bool _internal_scaling_was_exact() const;
  void _internal_set_scaling_was_exact(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CpObjectiveProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> coeffs_;
    mutable ::google::protobuf::internal::CachedSize _coeffs_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> domain_;
    mutable ::google::protobuf::internal::CachedSize _domain_cached_byte_size_;
    double offset_;
    double scaling_factor_;
    ::int64_t integer_before_offset_;
    ::int64_t integer_scaling_factor_;
    ::int64_t integer_after_offset_;
    bool scaling_was_exact_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CircuitConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CircuitConstraintProto) */ {
 public:
  inline CircuitConstraintProto() : CircuitConstraintProto(nullptr) {}
  ~CircuitConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CircuitConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline CircuitConstraintProto(const CircuitConstraintProto& from)
      : CircuitConstraintProto(nullptr, from) {}
  CircuitConstraintProto(CircuitConstraintProto&& from) noexcept
    : CircuitConstraintProto() {
    *this = ::std::move(from);
  }

  inline CircuitConstraintProto& operator=(const CircuitConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CircuitConstraintProto& operator=(CircuitConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CircuitConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CircuitConstraintProto* internal_default_instance() {
    return reinterpret_cast<const CircuitConstraintProto*>(
               &_CircuitConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CircuitConstraintProto& a, CircuitConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CircuitConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CircuitConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CircuitConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CircuitConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CircuitConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CircuitConstraintProto& from) {
    CircuitConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CircuitConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CircuitConstraintProto";
  }
  protected:
  explicit CircuitConstraintProto(::google::protobuf::Arena* arena);
  CircuitConstraintProto(::google::protobuf::Arena* arena, const CircuitConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTailsFieldNumber = 3,
    kHeadsFieldNumber = 4,
    kLiteralsFieldNumber = 5,
  };
  // repeated int32 tails = 3;
  int tails_size() const;
  private:
  int _internal_tails_size() const;

  public:
  void clear_tails() ;
  ::int32_t tails(int index) const;
  void set_tails(int index, ::int32_t value);
  void add_tails(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& tails() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_tails();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_tails() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_tails();

  public:
  // repeated int32 heads = 4;
  int heads_size() const;
  private:
  int _internal_heads_size() const;

  public:
  void clear_heads() ;
  ::int32_t heads(int index) const;
  void set_heads(int index, ::int32_t value);
  void add_heads(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& heads() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_heads();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_heads() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_heads();

  public:
  // repeated int32 literals = 5;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CircuitConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> tails_;
    mutable ::google::protobuf::internal::CachedSize _tails_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> heads_;
    mutable ::google::protobuf::internal::CachedSize _heads_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    mutable ::google::protobuf::internal::CachedSize _literals_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class BoolArgumentProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.BoolArgumentProto) */ {
 public:
  inline BoolArgumentProto() : BoolArgumentProto(nullptr) {}
  ~BoolArgumentProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BoolArgumentProto(::google::protobuf::internal::ConstantInitialized);

  inline BoolArgumentProto(const BoolArgumentProto& from)
      : BoolArgumentProto(nullptr, from) {}
  BoolArgumentProto(BoolArgumentProto&& from) noexcept
    : BoolArgumentProto() {
    *this = ::std::move(from);
  }

  inline BoolArgumentProto& operator=(const BoolArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoolArgumentProto& operator=(BoolArgumentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoolArgumentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoolArgumentProto* internal_default_instance() {
    return reinterpret_cast<const BoolArgumentProto*>(
               &_BoolArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BoolArgumentProto& a, BoolArgumentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(BoolArgumentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoolArgumentProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoolArgumentProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoolArgumentProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BoolArgumentProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BoolArgumentProto& from) {
    BoolArgumentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BoolArgumentProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.BoolArgumentProto";
  }
  protected:
  explicit BoolArgumentProto(::google::protobuf::Arena* arena);
  BoolArgumentProto(::google::protobuf::Arena* arena, const BoolArgumentProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.BoolArgumentProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    mutable ::google::protobuf::internal::CachedSize _literals_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class AutomatonConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.AutomatonConstraintProto) */ {
 public:
  inline AutomatonConstraintProto() : AutomatonConstraintProto(nullptr) {}
  ~AutomatonConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AutomatonConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline AutomatonConstraintProto(const AutomatonConstraintProto& from)
      : AutomatonConstraintProto(nullptr, from) {}
  AutomatonConstraintProto(AutomatonConstraintProto&& from) noexcept
    : AutomatonConstraintProto() {
    *this = ::std::move(from);
  }

  inline AutomatonConstraintProto& operator=(const AutomatonConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutomatonConstraintProto& operator=(AutomatonConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AutomatonConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutomatonConstraintProto* internal_default_instance() {
    return reinterpret_cast<const AutomatonConstraintProto*>(
               &_AutomatonConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(AutomatonConstraintProto& a, AutomatonConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AutomatonConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutomatonConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutomatonConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutomatonConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AutomatonConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AutomatonConstraintProto& from) {
    AutomatonConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AutomatonConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.AutomatonConstraintProto";
  }
  protected:
  explicit AutomatonConstraintProto(::google::protobuf::Arena* arena);
  AutomatonConstraintProto(::google::protobuf::Arena* arena, const AutomatonConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFinalStatesFieldNumber = 3,
    kTransitionTailFieldNumber = 4,
    kTransitionHeadFieldNumber = 5,
    kTransitionLabelFieldNumber = 6,
    kVarsFieldNumber = 7,
    kStartingStateFieldNumber = 2,
  };
  // repeated int64 final_states = 3;
  int final_states_size() const;
  private:
  int _internal_final_states_size() const;

  public:
  void clear_final_states() ;
  ::int64_t final_states(int index) const;
  void set_final_states(int index, ::int64_t value);
  void add_final_states(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& final_states() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_final_states();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_final_states() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_final_states();

  public:
  // repeated int64 transition_tail = 4;
  int transition_tail_size() const;
  private:
  int _internal_transition_tail_size() const;

  public:
  void clear_transition_tail() ;
  ::int64_t transition_tail(int index) const;
  void set_transition_tail(int index, ::int64_t value);
  void add_transition_tail(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& transition_tail() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_transition_tail();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_transition_tail() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_transition_tail();

  public:
  // repeated int64 transition_head = 5;
  int transition_head_size() const;
  private:
  int _internal_transition_head_size() const;

  public:
  void clear_transition_head() ;
  ::int64_t transition_head(int index) const;
  void set_transition_head(int index, ::int64_t value);
  void add_transition_head(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& transition_head() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_transition_head();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_transition_head() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_transition_head();

  public:
  // repeated int64 transition_label = 6;
  int transition_label_size() const;
  private:
  int _internal_transition_label_size() const;

  public:
  void clear_transition_label() ;
  ::int64_t transition_label(int index) const;
  void set_transition_label(int index, ::int64_t value);
  void add_transition_label(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& transition_label() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_transition_label();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_transition_label() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_transition_label();

  public:
  // repeated int32 vars = 7;
  int vars_size() const;
  private:
  int _internal_vars_size() const;

  public:
  void clear_vars() ;
  ::int32_t vars(int index) const;
  void set_vars(int index, ::int32_t value);
  void add_vars(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_vars();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_vars() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_vars();

  public:
  // int64 starting_state = 2;
  void clear_starting_state() ;
  ::int64_t starting_state() const;
  void set_starting_state(::int64_t value);

  private:
  ::int64_t _internal_starting_state() const;
  void _internal_set_starting_state(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.AutomatonConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> final_states_;
    mutable ::google::protobuf::internal::CachedSize _final_states_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> transition_tail_;
    mutable ::google::protobuf::internal::CachedSize _transition_tail_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> transition_head_;
    mutable ::google::protobuf::internal::CachedSize _transition_head_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int64_t> transition_label_;
    mutable ::google::protobuf::internal::CachedSize _transition_label_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> vars_;
    mutable ::google::protobuf::internal::CachedSize _vars_cached_byte_size_;
    ::int64_t starting_state_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class SymmetryProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.SymmetryProto) */ {
 public:
  inline SymmetryProto() : SymmetryProto(nullptr) {}
  ~SymmetryProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SymmetryProto(::google::protobuf::internal::ConstantInitialized);

  inline SymmetryProto(const SymmetryProto& from)
      : SymmetryProto(nullptr, from) {}
  SymmetryProto(SymmetryProto&& from) noexcept
    : SymmetryProto() {
    *this = ::std::move(from);
  }

  inline SymmetryProto& operator=(const SymmetryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SymmetryProto& operator=(SymmetryProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SymmetryProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SymmetryProto* internal_default_instance() {
    return reinterpret_cast<const SymmetryProto*>(
               &_SymmetryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SymmetryProto& a, SymmetryProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SymmetryProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SymmetryProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SymmetryProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SymmetryProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SymmetryProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SymmetryProto& from) {
    SymmetryProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SymmetryProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.SymmetryProto";
  }
  protected:
  explicit SymmetryProto(::google::protobuf::Arena* arena);
  SymmetryProto(::google::protobuf::Arena* arena, const SymmetryProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermutationsFieldNumber = 1,
    kOrbitopesFieldNumber = 2,
  };
  // repeated .operations_research.sat.SparsePermutationProto permutations = 1;
  int permutations_size() const;
  private:
  int _internal_permutations_size() const;

  public:
  void clear_permutations() ;
  ::operations_research::sat::SparsePermutationProto* mutable_permutations(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::SparsePermutationProto >*
      mutable_permutations();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>& _internal_permutations() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>* _internal_mutable_permutations();
  public:
  const ::operations_research::sat::SparsePermutationProto& permutations(int index) const;
  ::operations_research::sat::SparsePermutationProto* add_permutations();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::SparsePermutationProto >&
      permutations() const;
  // repeated .operations_research.sat.DenseMatrixProto orbitopes = 2;
  int orbitopes_size() const;
  private:
  int _internal_orbitopes_size() const;

  public:
  void clear_orbitopes() ;
  ::operations_research::sat::DenseMatrixProto* mutable_orbitopes(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DenseMatrixProto >*
      mutable_orbitopes();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>& _internal_orbitopes() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>* _internal_mutable_orbitopes();
  public:
  const ::operations_research::sat::DenseMatrixProto& orbitopes(int index) const;
  ::operations_research::sat::DenseMatrixProto* add_orbitopes();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DenseMatrixProto >&
      orbitopes() const;
  // @@protoc_insertion_point(class_scope:operations_research.sat.SymmetryProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::SparsePermutationProto > permutations_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DenseMatrixProto > orbitopes_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ReservoirConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.ReservoirConstraintProto) */ {
 public:
  inline ReservoirConstraintProto() : ReservoirConstraintProto(nullptr) {}
  ~ReservoirConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ReservoirConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline ReservoirConstraintProto(const ReservoirConstraintProto& from)
      : ReservoirConstraintProto(nullptr, from) {}
  ReservoirConstraintProto(ReservoirConstraintProto&& from) noexcept
    : ReservoirConstraintProto() {
    *this = ::std::move(from);
  }

  inline ReservoirConstraintProto& operator=(const ReservoirConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReservoirConstraintProto& operator=(ReservoirConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReservoirConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReservoirConstraintProto* internal_default_instance() {
    return reinterpret_cast<const ReservoirConstraintProto*>(
               &_ReservoirConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReservoirConstraintProto& a, ReservoirConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ReservoirConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReservoirConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReservoirConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReservoirConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ReservoirConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ReservoirConstraintProto& from) {
    ReservoirConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ReservoirConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.ReservoirConstraintProto";
  }
  protected:
  explicit ReservoirConstraintProto(::google::protobuf::Arena* arena);
  ReservoirConstraintProto(::google::protobuf::Arena* arena, const ReservoirConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeExprsFieldNumber = 3,
    kActiveLiteralsFieldNumber = 5,
    kLevelChangesFieldNumber = 6,
    kMinLevelFieldNumber = 1,
    kMaxLevelFieldNumber = 2,
  };
  // repeated .operations_research.sat.LinearExpressionProto time_exprs = 3;
  int time_exprs_size() const;
  private:
  int _internal_time_exprs_size() const;

  public:
  void clear_time_exprs() ;
  ::operations_research::sat::LinearExpressionProto* mutable_time_exprs(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >*
      mutable_time_exprs();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& _internal_time_exprs() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* _internal_mutable_time_exprs();
  public:
  const ::operations_research::sat::LinearExpressionProto& time_exprs(int index) const;
  ::operations_research::sat::LinearExpressionProto* add_time_exprs();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >&
      time_exprs() const;
  // repeated int32 active_literals = 5;
  int active_literals_size() const;
  private:
  int _internal_active_literals_size() const;

  public:
  void clear_active_literals() ;
  ::int32_t active_literals(int index) const;
  void set_active_literals(int index, ::int32_t value);
  void add_active_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& active_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_active_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_active_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_active_literals();

  public:
  // repeated .operations_research.sat.LinearExpressionProto level_changes = 6;
  int level_changes_size() const;
  private:
  int _internal_level_changes_size() const;

  public:
  void clear_level_changes() ;
  ::operations_research::sat::LinearExpressionProto* mutable_level_changes(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >*
      mutable_level_changes();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& _internal_level_changes() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* _internal_mutable_level_changes();
  public:
  const ::operations_research::sat::LinearExpressionProto& level_changes(int index) const;
  ::operations_research::sat::LinearExpressionProto* add_level_changes();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >&
      level_changes() const;
  // int64 min_level = 1;
  void clear_min_level() ;
  ::int64_t min_level() const;
  void set_min_level(::int64_t value);

  private:
  ::int64_t _internal_min_level() const;
  void _internal_set_min_level(::int64_t value);

  public:
  // int64 max_level = 2;
  void clear_max_level() ;
  ::int64_t max_level() const;
  void set_max_level(::int64_t value);

  private:
  ::int64_t _internal_max_level() const;
  void _internal_set_max_level(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.ReservoirConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto > time_exprs_;
    ::google::protobuf::RepeatedField<::int32_t> active_literals_;
    mutable ::google::protobuf::internal::CachedSize _active_literals_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto > level_changes_;
    ::int64_t min_level_;
    ::int64_t max_level_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class LinearArgumentProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearArgumentProto) */ {
 public:
  inline LinearArgumentProto() : LinearArgumentProto(nullptr) {}
  ~LinearArgumentProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearArgumentProto(::google::protobuf::internal::ConstantInitialized);

  inline LinearArgumentProto(const LinearArgumentProto& from)
      : LinearArgumentProto(nullptr, from) {}
  LinearArgumentProto(LinearArgumentProto&& from) noexcept
    : LinearArgumentProto() {
    *this = ::std::move(from);
  }

  inline LinearArgumentProto& operator=(const LinearArgumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearArgumentProto& operator=(LinearArgumentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearArgumentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearArgumentProto* internal_default_instance() {
    return reinterpret_cast<const LinearArgumentProto*>(
               &_LinearArgumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LinearArgumentProto& a, LinearArgumentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearArgumentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearArgumentProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearArgumentProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearArgumentProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearArgumentProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearArgumentProto& from) {
    LinearArgumentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearArgumentProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearArgumentProto";
  }
  protected:
  explicit LinearArgumentProto(::google::protobuf::Arena* arena);
  LinearArgumentProto(::google::protobuf::Arena* arena, const LinearArgumentProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprsFieldNumber = 2,
    kTargetFieldNumber = 1,
  };
  // repeated .operations_research.sat.LinearExpressionProto exprs = 2;
  int exprs_size() const;
  private:
  int _internal_exprs_size() const;

  public:
  void clear_exprs() ;
  ::operations_research::sat::LinearExpressionProto* mutable_exprs(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >*
      mutable_exprs();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& _internal_exprs() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* _internal_mutable_exprs();
  public:
  const ::operations_research::sat::LinearExpressionProto& exprs(int index) const;
  ::operations_research::sat::LinearExpressionProto* add_exprs();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >&
      exprs() const;
  // .operations_research.sat.LinearExpressionProto target = 1;
  bool has_target() const;
  void clear_target() ;
  const ::operations_research::sat::LinearExpressionProto& target() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearExpressionProto* release_target();
  ::operations_research::sat::LinearExpressionProto* mutable_target();
  void set_allocated_target(::operations_research::sat::LinearExpressionProto* value);
  void unsafe_arena_set_allocated_target(::operations_research::sat::LinearExpressionProto* value);
  ::operations_research::sat::LinearExpressionProto* unsafe_arena_release_target();

  private:
  const ::operations_research::sat::LinearExpressionProto& _internal_target() const;
  ::operations_research::sat::LinearExpressionProto* _internal_mutable_target();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearArgumentProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto > exprs_;
    ::operations_research::sat::LinearExpressionProto* target_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class IntervalConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.IntervalConstraintProto) */ {
 public:
  inline IntervalConstraintProto() : IntervalConstraintProto(nullptr) {}
  ~IntervalConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntervalConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline IntervalConstraintProto(const IntervalConstraintProto& from)
      : IntervalConstraintProto(nullptr, from) {}
  IntervalConstraintProto(IntervalConstraintProto&& from) noexcept
    : IntervalConstraintProto() {
    *this = ::std::move(from);
  }

  inline IntervalConstraintProto& operator=(const IntervalConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalConstraintProto& operator=(IntervalConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntervalConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntervalConstraintProto* internal_default_instance() {
    return reinterpret_cast<const IntervalConstraintProto*>(
               &_IntervalConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntervalConstraintProto& a, IntervalConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntervalConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntervalConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntervalConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntervalConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntervalConstraintProto& from) {
    IntervalConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntervalConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.IntervalConstraintProto";
  }
  protected:
  explicit IntervalConstraintProto(::google::protobuf::Arena* arena);
  IntervalConstraintProto(::google::protobuf::Arena* arena, const IntervalConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 4,
    kEndFieldNumber = 5,
    kSizeFieldNumber = 6,
  };
  // .operations_research.sat.LinearExpressionProto start = 4;
  bool has_start() const;
  void clear_start() ;
  const ::operations_research::sat::LinearExpressionProto& start() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearExpressionProto* release_start();
  ::operations_research::sat::LinearExpressionProto* mutable_start();
  void set_allocated_start(::operations_research::sat::LinearExpressionProto* value);
  void unsafe_arena_set_allocated_start(::operations_research::sat::LinearExpressionProto* value);
  ::operations_research::sat::LinearExpressionProto* unsafe_arena_release_start();

  private:
  const ::operations_research::sat::LinearExpressionProto& _internal_start() const;
  ::operations_research::sat::LinearExpressionProto* _internal_mutable_start();

  public:
  // .operations_research.sat.LinearExpressionProto end = 5;
  bool has_end() const;
  void clear_end() ;
  const ::operations_research::sat::LinearExpressionProto& end() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearExpressionProto* release_end();
  ::operations_research::sat::LinearExpressionProto* mutable_end();
  void set_allocated_end(::operations_research::sat::LinearExpressionProto* value);
  void unsafe_arena_set_allocated_end(::operations_research::sat::LinearExpressionProto* value);
  ::operations_research::sat::LinearExpressionProto* unsafe_arena_release_end();

  private:
  const ::operations_research::sat::LinearExpressionProto& _internal_end() const;
  ::operations_research::sat::LinearExpressionProto* _internal_mutable_end();

  public:
  // .operations_research.sat.LinearExpressionProto size = 6;
  bool has_size() const;
  void clear_size() ;
  const ::operations_research::sat::LinearExpressionProto& size() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearExpressionProto* release_size();
  ::operations_research::sat::LinearExpressionProto* mutable_size();
  void set_allocated_size(::operations_research::sat::LinearExpressionProto* value);
  void unsafe_arena_set_allocated_size(::operations_research::sat::LinearExpressionProto* value);
  ::operations_research::sat::LinearExpressionProto* unsafe_arena_release_size();

  private:
  const ::operations_research::sat::LinearExpressionProto& _internal_size() const;
  ::operations_research::sat::LinearExpressionProto* _internal_mutable_size();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.IntervalConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::operations_research::sat::LinearExpressionProto* start_;
    ::operations_research::sat::LinearExpressionProto* end_;
    ::operations_research::sat::LinearExpressionProto* size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class DecisionStrategyProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.DecisionStrategyProto) */ {
 public:
  inline DecisionStrategyProto() : DecisionStrategyProto(nullptr) {}
  ~DecisionStrategyProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DecisionStrategyProto(::google::protobuf::internal::ConstantInitialized);

  inline DecisionStrategyProto(const DecisionStrategyProto& from)
      : DecisionStrategyProto(nullptr, from) {}
  DecisionStrategyProto(DecisionStrategyProto&& from) noexcept
    : DecisionStrategyProto() {
    *this = ::std::move(from);
  }

  inline DecisionStrategyProto& operator=(const DecisionStrategyProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline DecisionStrategyProto& operator=(DecisionStrategyProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DecisionStrategyProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const DecisionStrategyProto* internal_default_instance() {
    return reinterpret_cast<const DecisionStrategyProto*>(
               &_DecisionStrategyProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DecisionStrategyProto& a, DecisionStrategyProto& b) {
    a.Swap(&b);
  }
  inline void Swap(DecisionStrategyProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DecisionStrategyProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DecisionStrategyProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DecisionStrategyProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DecisionStrategyProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DecisionStrategyProto& from) {
    DecisionStrategyProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DecisionStrategyProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.DecisionStrategyProto";
  }
  protected:
  explicit DecisionStrategyProto(::google::protobuf::Arena* arena);
  DecisionStrategyProto(::google::protobuf::Arena* arena, const DecisionStrategyProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using AffineTransformation = DecisionStrategyProto_AffineTransformation;

  using VariableSelectionStrategy = DecisionStrategyProto_VariableSelectionStrategy;
  static constexpr VariableSelectionStrategy CHOOSE_FIRST = DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_FIRST;
  static constexpr VariableSelectionStrategy CHOOSE_LOWEST_MIN = DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_LOWEST_MIN;
  static constexpr VariableSelectionStrategy CHOOSE_HIGHEST_MAX = DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_HIGHEST_MAX;
  static constexpr VariableSelectionStrategy CHOOSE_MIN_DOMAIN_SIZE = DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MIN_DOMAIN_SIZE;
  static constexpr VariableSelectionStrategy CHOOSE_MAX_DOMAIN_SIZE = DecisionStrategyProto_VariableSelectionStrategy_CHOOSE_MAX_DOMAIN_SIZE;
  static inline bool VariableSelectionStrategy_IsValid(int value) {
    return DecisionStrategyProto_VariableSelectionStrategy_IsValid(value);
  }
  static constexpr VariableSelectionStrategy VariableSelectionStrategy_MIN = DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MIN;
  static constexpr VariableSelectionStrategy VariableSelectionStrategy_MAX = DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_MAX;
  static constexpr int VariableSelectionStrategy_ARRAYSIZE = DecisionStrategyProto_VariableSelectionStrategy_VariableSelectionStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VariableSelectionStrategy_descriptor() {
    return DecisionStrategyProto_VariableSelectionStrategy_descriptor();
  }
  template <typename T>
  static inline const std::string& VariableSelectionStrategy_Name(T value) {
    return DecisionStrategyProto_VariableSelectionStrategy_Name(value);
  }
  static inline bool VariableSelectionStrategy_Parse(absl::string_view name, VariableSelectionStrategy* value) {
    return DecisionStrategyProto_VariableSelectionStrategy_Parse(name, value);
  }

  using DomainReductionStrategy = DecisionStrategyProto_DomainReductionStrategy;
  static constexpr DomainReductionStrategy SELECT_MIN_VALUE = DecisionStrategyProto_DomainReductionStrategy_SELECT_MIN_VALUE;
  static constexpr DomainReductionStrategy SELECT_MAX_VALUE = DecisionStrategyProto_DomainReductionStrategy_SELECT_MAX_VALUE;
  static constexpr DomainReductionStrategy SELECT_LOWER_HALF = DecisionStrategyProto_DomainReductionStrategy_SELECT_LOWER_HALF;
  static constexpr DomainReductionStrategy SELECT_UPPER_HALF = DecisionStrategyProto_DomainReductionStrategy_SELECT_UPPER_HALF;
  static constexpr DomainReductionStrategy SELECT_MEDIAN_VALUE = DecisionStrategyProto_DomainReductionStrategy_SELECT_MEDIAN_VALUE;
  static inline bool DomainReductionStrategy_IsValid(int value) {
    return DecisionStrategyProto_DomainReductionStrategy_IsValid(value);
  }
  static constexpr DomainReductionStrategy DomainReductionStrategy_MIN = DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MIN;
  static constexpr DomainReductionStrategy DomainReductionStrategy_MAX = DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_MAX;
  static constexpr int DomainReductionStrategy_ARRAYSIZE = DecisionStrategyProto_DomainReductionStrategy_DomainReductionStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* DomainReductionStrategy_descriptor() {
    return DecisionStrategyProto_DomainReductionStrategy_descriptor();
  }
  template <typename T>
  static inline const std::string& DomainReductionStrategy_Name(T value) {
    return DecisionStrategyProto_DomainReductionStrategy_Name(value);
  }
  static inline bool DomainReductionStrategy_Parse(absl::string_view name, DomainReductionStrategy* value) {
    return DecisionStrategyProto_DomainReductionStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 1,
    kTransformationsFieldNumber = 4,
    kVariableSelectionStrategyFieldNumber = 2,
    kDomainReductionStrategyFieldNumber = 3,
  };
  // repeated int32 variables = 1;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::int32_t variables(int index) const;
  void set_variables(int index, ::int32_t value);
  void add_variables(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& variables() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_variables();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_variables() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_variables();

  public:
  // repeated .operations_research.sat.DecisionStrategyProto.AffineTransformation transformations = 4;
  int transformations_size() const;
  private:
  int _internal_transformations_size() const;

  public:
  void clear_transformations() ;
  ::operations_research::sat::DecisionStrategyProto_AffineTransformation* mutable_transformations(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto_AffineTransformation >*
      mutable_transformations();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>& _internal_transformations() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>* _internal_mutable_transformations();
  public:
  const ::operations_research::sat::DecisionStrategyProto_AffineTransformation& transformations(int index) const;
  ::operations_research::sat::DecisionStrategyProto_AffineTransformation* add_transformations();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto_AffineTransformation >&
      transformations() const;
  // .operations_research.sat.DecisionStrategyProto.VariableSelectionStrategy variable_selection_strategy = 2;
  void clear_variable_selection_strategy() ;
  ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy variable_selection_strategy() const;
  void set_variable_selection_strategy(::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy value);

  private:
  ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy _internal_variable_selection_strategy() const;
  void _internal_set_variable_selection_strategy(::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy value);

  public:
  // .operations_research.sat.DecisionStrategyProto.DomainReductionStrategy domain_reduction_strategy = 3;
  void clear_domain_reduction_strategy() ;
  ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy domain_reduction_strategy() const;
  void set_domain_reduction_strategy(::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy value);

  private:
  ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy _internal_domain_reduction_strategy() const;
  void _internal_set_domain_reduction_strategy(::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.DecisionStrategyProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> variables_;
    mutable ::google::protobuf::internal::CachedSize _variables_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto_AffineTransformation > transformations_;
    int variable_selection_strategy_;
    int domain_reduction_strategy_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CumulativeConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CumulativeConstraintProto) */ {
 public:
  inline CumulativeConstraintProto() : CumulativeConstraintProto(nullptr) {}
  ~CumulativeConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CumulativeConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline CumulativeConstraintProto(const CumulativeConstraintProto& from)
      : CumulativeConstraintProto(nullptr, from) {}
  CumulativeConstraintProto(CumulativeConstraintProto&& from) noexcept
    : CumulativeConstraintProto() {
    *this = ::std::move(from);
  }

  inline CumulativeConstraintProto& operator=(const CumulativeConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CumulativeConstraintProto& operator=(CumulativeConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CumulativeConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CumulativeConstraintProto* internal_default_instance() {
    return reinterpret_cast<const CumulativeConstraintProto*>(
               &_CumulativeConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CumulativeConstraintProto& a, CumulativeConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CumulativeConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CumulativeConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CumulativeConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CumulativeConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CumulativeConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CumulativeConstraintProto& from) {
    CumulativeConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CumulativeConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CumulativeConstraintProto";
  }
  protected:
  explicit CumulativeConstraintProto(::google::protobuf::Arena* arena);
  CumulativeConstraintProto(::google::protobuf::Arena* arena, const CumulativeConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntervalsFieldNumber = 2,
    kDemandsFieldNumber = 3,
    kCapacityFieldNumber = 1,
  };
  // repeated int32 intervals = 2;
  int intervals_size() const;
  private:
  int _internal_intervals_size() const;

  public:
  void clear_intervals() ;
  ::int32_t intervals(int index) const;
  void set_intervals(int index, ::int32_t value);
  void add_intervals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_intervals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_intervals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_intervals();

  public:
  // repeated .operations_research.sat.LinearExpressionProto demands = 3;
  int demands_size() const;
  private:
  int _internal_demands_size() const;

  public:
  void clear_demands() ;
  ::operations_research::sat::LinearExpressionProto* mutable_demands(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >*
      mutable_demands();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& _internal_demands() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* _internal_mutable_demands();
  public:
  const ::operations_research::sat::LinearExpressionProto& demands(int index) const;
  ::operations_research::sat::LinearExpressionProto* add_demands();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >&
      demands() const;
  // .operations_research.sat.LinearExpressionProto capacity = 1;
  bool has_capacity() const;
  void clear_capacity() ;
  const ::operations_research::sat::LinearExpressionProto& capacity() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearExpressionProto* release_capacity();
  ::operations_research::sat::LinearExpressionProto* mutable_capacity();
  void set_allocated_capacity(::operations_research::sat::LinearExpressionProto* value);
  void unsafe_arena_set_allocated_capacity(::operations_research::sat::LinearExpressionProto* value);
  ::operations_research::sat::LinearExpressionProto* unsafe_arena_release_capacity();

  private:
  const ::operations_research::sat::LinearExpressionProto& _internal_capacity() const;
  ::operations_research::sat::LinearExpressionProto* _internal_mutable_capacity();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CumulativeConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> intervals_;
    mutable ::google::protobuf::internal::CachedSize _intervals_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto > demands_;
    ::operations_research::sat::LinearExpressionProto* capacity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CpSolverResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CpSolverResponse) */ {
 public:
  inline CpSolverResponse() : CpSolverResponse(nullptr) {}
  ~CpSolverResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpSolverResponse(::google::protobuf::internal::ConstantInitialized);

  inline CpSolverResponse(const CpSolverResponse& from)
      : CpSolverResponse(nullptr, from) {}
  CpSolverResponse(CpSolverResponse&& from) noexcept
    : CpSolverResponse() {
    *this = ::std::move(from);
  }

  inline CpSolverResponse& operator=(const CpSolverResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpSolverResponse& operator=(CpSolverResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpSolverResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpSolverResponse* internal_default_instance() {
    return reinterpret_cast<const CpSolverResponse*>(
               &_CpSolverResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CpSolverResponse& a, CpSolverResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CpSolverResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpSolverResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpSolverResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpSolverResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CpSolverResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CpSolverResponse& from) {
    CpSolverResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CpSolverResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CpSolverResponse";
  }
  protected:
  explicit CpSolverResponse(::google::protobuf::Arena* arena);
  CpSolverResponse(::google::protobuf::Arena* arena, const CpSolverResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolutionFieldNumber = 2,
    kTightenedVariablesFieldNumber = 21,
    kSufficientAssumptionsForInfeasibilityFieldNumber = 23,
    kAdditionalSolutionsFieldNumber = 27,
    kSolutionInfoFieldNumber = 20,
    kSolveLogFieldNumber = 26,
    kIntegerObjectiveFieldNumber = 28,
    kObjectiveValueFieldNumber = 3,
    kBestObjectiveBoundFieldNumber = 4,
    kNumBooleansFieldNumber = 10,
    kNumConflictsFieldNumber = 11,
    kNumBranchesFieldNumber = 12,
    kNumBinaryPropagationsFieldNumber = 13,
    kNumIntegerPropagationsFieldNumber = 14,
    kWallTimeFieldNumber = 15,
    kUserTimeFieldNumber = 16,
    kDeterministicTimeFieldNumber = 17,
    kGapIntegralFieldNumber = 22,
    kNumRestartsFieldNumber = 24,
    kNumLpIterationsFieldNumber = 25,
    kInnerObjectiveLowerBoundFieldNumber = 29,
    kNumIntegersFieldNumber = 30,
    kStatusFieldNumber = 1,
  };
  // repeated int64 solution = 2;
  int solution_size() const;
  private:
  int _internal_solution_size() const;

  public:
  void clear_solution() ;
  ::int64_t solution(int index) const;
  void set_solution(int index, ::int64_t value);
  void add_solution(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& solution() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_solution();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_solution() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_solution();

  public:
  // repeated .operations_research.sat.IntegerVariableProto tightened_variables = 21;
  int tightened_variables_size() const;
  private:
  int _internal_tightened_variables_size() const;

  public:
  void clear_tightened_variables() ;
  ::operations_research::sat::IntegerVariableProto* mutable_tightened_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto >*
      mutable_tightened_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>& _internal_tightened_variables() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>* _internal_mutable_tightened_variables();
  public:
  const ::operations_research::sat::IntegerVariableProto& tightened_variables(int index) const;
  ::operations_research::sat::IntegerVariableProto* add_tightened_variables();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto >&
      tightened_variables() const;
  // repeated int32 sufficient_assumptions_for_infeasibility = 23;
  int sufficient_assumptions_for_infeasibility_size() const;
  private:
  int _internal_sufficient_assumptions_for_infeasibility_size() const;

  public:
  void clear_sufficient_assumptions_for_infeasibility() ;
  ::int32_t sufficient_assumptions_for_infeasibility(int index) const;
  void set_sufficient_assumptions_for_infeasibility(int index, ::int32_t value);
  void add_sufficient_assumptions_for_infeasibility(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& sufficient_assumptions_for_infeasibility() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_sufficient_assumptions_for_infeasibility();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_sufficient_assumptions_for_infeasibility() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_sufficient_assumptions_for_infeasibility();

  public:
  // repeated .operations_research.sat.CpSolverSolution additional_solutions = 27;
  int additional_solutions_size() const;
  private:
  int _internal_additional_solutions_size() const;

  public:
  void clear_additional_solutions() ;
  ::operations_research::sat::CpSolverSolution* mutable_additional_solutions(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::CpSolverSolution >*
      mutable_additional_solutions();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>& _internal_additional_solutions() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>* _internal_mutable_additional_solutions();
  public:
  const ::operations_research::sat::CpSolverSolution& additional_solutions(int index) const;
  ::operations_research::sat::CpSolverSolution* add_additional_solutions();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::CpSolverSolution >&
      additional_solutions() const;
  // string solution_info = 20;
  void clear_solution_info() ;
  const std::string& solution_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_solution_info(Arg_&& arg, Args_... args);
  std::string* mutable_solution_info();
  PROTOBUF_NODISCARD std::string* release_solution_info();
  void set_allocated_solution_info(std::string* value);

  private:
  const std::string& _internal_solution_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_solution_info(
      const std::string& value);
  std::string* _internal_mutable_solution_info();

  public:
  // string solve_log = 26;
  void clear_solve_log() ;
  const std::string& solve_log() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_solve_log(Arg_&& arg, Args_... args);
  std::string* mutable_solve_log();
  PROTOBUF_NODISCARD std::string* release_solve_log();
  void set_allocated_solve_log(std::string* value);

  private:
  const std::string& _internal_solve_log() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_solve_log(
      const std::string& value);
  std::string* _internal_mutable_solve_log();

  public:
  // .operations_research.sat.CpObjectiveProto integer_objective = 28;
  bool has_integer_objective() const;
  void clear_integer_objective() ;
  const ::operations_research::sat::CpObjectiveProto& integer_objective() const;
  PROTOBUF_NODISCARD ::operations_research::sat::CpObjectiveProto* release_integer_objective();
  ::operations_research::sat::CpObjectiveProto* mutable_integer_objective();
  void set_allocated_integer_objective(::operations_research::sat::CpObjectiveProto* value);
  void unsafe_arena_set_allocated_integer_objective(::operations_research::sat::CpObjectiveProto* value);
  ::operations_research::sat::CpObjectiveProto* unsafe_arena_release_integer_objective();

  private:
  const ::operations_research::sat::CpObjectiveProto& _internal_integer_objective() const;
  ::operations_research::sat::CpObjectiveProto* _internal_mutable_integer_objective();

  public:
  // double objective_value = 3;
  void clear_objective_value() ;
  double objective_value() const;
  void set_objective_value(double value);

  private:
  double _internal_objective_value() const;
  void _internal_set_objective_value(double value);

  public:
  // double best_objective_bound = 4;
  void clear_best_objective_bound() ;
  double best_objective_bound() const;
  void set_best_objective_bound(double value);

  private:
  double _internal_best_objective_bound() const;
  void _internal_set_best_objective_bound(double value);

  public:
  // int64 num_booleans = 10;
  void clear_num_booleans() ;
  ::int64_t num_booleans() const;
  void set_num_booleans(::int64_t value);

  private:
  ::int64_t _internal_num_booleans() const;
  void _internal_set_num_booleans(::int64_t value);

  public:
  // int64 num_conflicts = 11;
  void clear_num_conflicts() ;
  ::int64_t num_conflicts() const;
  void set_num_conflicts(::int64_t value);

  private:
  ::int64_t _internal_num_conflicts() const;
  void _internal_set_num_conflicts(::int64_t value);

  public:
  // int64 num_branches = 12;
  void clear_num_branches() ;
  ::int64_t num_branches() const;
  void set_num_branches(::int64_t value);

  private:
  ::int64_t _internal_num_branches() const;
  void _internal_set_num_branches(::int64_t value);

  public:
  // int64 num_binary_propagations = 13;
  void clear_num_binary_propagations() ;
  ::int64_t num_binary_propagations() const;
  void set_num_binary_propagations(::int64_t value);

  private:
  ::int64_t _internal_num_binary_propagations() const;
  void _internal_set_num_binary_propagations(::int64_t value);

  public:
  // int64 num_integer_propagations = 14;
  void clear_num_integer_propagations() ;
  ::int64_t num_integer_propagations() const;
  void set_num_integer_propagations(::int64_t value);

  private:
  ::int64_t _internal_num_integer_propagations() const;
  void _internal_set_num_integer_propagations(::int64_t value);

  public:
  // double wall_time = 15;
  void clear_wall_time() ;
  double wall_time() const;
  void set_wall_time(double value);

  private:
  double _internal_wall_time() const;
  void _internal_set_wall_time(double value);

  public:
  // double user_time = 16;
  void clear_user_time() ;
  double user_time() const;
  void set_user_time(double value);

  private:
  double _internal_user_time() const;
  void _internal_set_user_time(double value);

  public:
  // double deterministic_time = 17;
  void clear_deterministic_time() ;
  double deterministic_time() const;
  void set_deterministic_time(double value);

  private:
  double _internal_deterministic_time() const;
  void _internal_set_deterministic_time(double value);

  public:
  // double gap_integral = 22;
  void clear_gap_integral() ;
  double gap_integral() const;
  void set_gap_integral(double value);

  private:
  double _internal_gap_integral() const;
  void _internal_set_gap_integral(double value);

  public:
  // int64 num_restarts = 24;
  void clear_num_restarts() ;
  ::int64_t num_restarts() const;
  void set_num_restarts(::int64_t value);

  private:
  ::int64_t _internal_num_restarts() const;
  void _internal_set_num_restarts(::int64_t value);

  public:
  // int64 num_lp_iterations = 25;
  void clear_num_lp_iterations() ;
  ::int64_t num_lp_iterations() const;
  void set_num_lp_iterations(::int64_t value);

  private:
  ::int64_t _internal_num_lp_iterations() const;
  void _internal_set_num_lp_iterations(::int64_t value);

  public:
  // int64 inner_objective_lower_bound = 29;
  void clear_inner_objective_lower_bound() ;
  ::int64_t inner_objective_lower_bound() const;
  void set_inner_objective_lower_bound(::int64_t value);

  private:
  ::int64_t _internal_inner_objective_lower_bound() const;
  void _internal_set_inner_objective_lower_bound(::int64_t value);

  public:
  // int64 num_integers = 30;
  void clear_num_integers() ;
  ::int64_t num_integers() const;
  void set_num_integers(::int64_t value);

  private:
  ::int64_t _internal_num_integers() const;
  void _internal_set_num_integers(::int64_t value);

  public:
  // .operations_research.sat.CpSolverStatus status = 1;
  void clear_status() ;
  ::operations_research::sat::CpSolverStatus status() const;
  void set_status(::operations_research::sat::CpSolverStatus value);

  private:
  ::operations_research::sat::CpSolverStatus _internal_status() const;
  void _internal_set_status(::operations_research::sat::CpSolverStatus value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CpSolverResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 23, 3,
      87, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> solution_;
    mutable ::google::protobuf::internal::CachedSize _solution_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto > tightened_variables_;
    ::google::protobuf::RepeatedField<::int32_t> sufficient_assumptions_for_infeasibility_;
    mutable ::google::protobuf::internal::CachedSize _sufficient_assumptions_for_infeasibility_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::CpSolverSolution > additional_solutions_;
    ::google::protobuf::internal::ArenaStringPtr solution_info_;
    ::google::protobuf::internal::ArenaStringPtr solve_log_;
    ::operations_research::sat::CpObjectiveProto* integer_objective_;
    double objective_value_;
    double best_objective_bound_;
    ::int64_t num_booleans_;
    ::int64_t num_conflicts_;
    ::int64_t num_branches_;
    ::int64_t num_binary_propagations_;
    ::int64_t num_integer_propagations_;
    double wall_time_;
    double user_time_;
    double deterministic_time_;
    double gap_integral_;
    ::int64_t num_restarts_;
    ::int64_t num_lp_iterations_;
    ::int64_t inner_objective_lower_bound_;
    ::int64_t num_integers_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class AllDifferentConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.AllDifferentConstraintProto) */ {
 public:
  inline AllDifferentConstraintProto() : AllDifferentConstraintProto(nullptr) {}
  ~AllDifferentConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AllDifferentConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline AllDifferentConstraintProto(const AllDifferentConstraintProto& from)
      : AllDifferentConstraintProto(nullptr, from) {}
  AllDifferentConstraintProto(AllDifferentConstraintProto&& from) noexcept
    : AllDifferentConstraintProto() {
    *this = ::std::move(from);
  }

  inline AllDifferentConstraintProto& operator=(const AllDifferentConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllDifferentConstraintProto& operator=(AllDifferentConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AllDifferentConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllDifferentConstraintProto* internal_default_instance() {
    return reinterpret_cast<const AllDifferentConstraintProto*>(
               &_AllDifferentConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AllDifferentConstraintProto& a, AllDifferentConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AllDifferentConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllDifferentConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AllDifferentConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AllDifferentConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AllDifferentConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AllDifferentConstraintProto& from) {
    AllDifferentConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AllDifferentConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.AllDifferentConstraintProto";
  }
  protected:
  explicit AllDifferentConstraintProto(::google::protobuf::Arena* arena);
  AllDifferentConstraintProto(::google::protobuf::Arena* arena, const AllDifferentConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExprsFieldNumber = 1,
  };
  // repeated .operations_research.sat.LinearExpressionProto exprs = 1;
  int exprs_size() const;
  private:
  int _internal_exprs_size() const;

  public:
  void clear_exprs() ;
  ::operations_research::sat::LinearExpressionProto* mutable_exprs(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >*
      mutable_exprs();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& _internal_exprs() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* _internal_mutable_exprs();
  public:
  const ::operations_research::sat::LinearExpressionProto& exprs(int index) const;
  ::operations_research::sat::LinearExpressionProto* add_exprs();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto >&
      exprs() const;
  // @@protoc_insertion_point(class_scope:operations_research.sat.AllDifferentConstraintProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearExpressionProto > exprs_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class ConstraintProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.ConstraintProto) */ {
 public:
  inline ConstraintProto() : ConstraintProto(nullptr) {}
  ~ConstraintProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ConstraintProto(::google::protobuf::internal::ConstantInitialized);

  inline ConstraintProto(const ConstraintProto& from)
      : ConstraintProto(nullptr, from) {}
  ConstraintProto(ConstraintProto&& from) noexcept
    : ConstraintProto() {
    *this = ::std::move(from);
  }

  inline ConstraintProto& operator=(const ConstraintProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConstraintProto& operator=(ConstraintProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConstraintProto& default_instance() {
    return *internal_default_instance();
  }
  enum ConstraintCase {
    kBoolOr = 3,
    kBoolAnd = 4,
    kAtMostOne = 26,
    kExactlyOne = 29,
    kBoolXor = 5,
    kIntDiv = 7,
    kIntMod = 8,
    kIntProd = 11,
    kLinMax = 27,
    kLinear = 12,
    kAllDiff = 13,
    kElement = 14,
    kCircuit = 15,
    kRoutes = 23,
    kTable = 16,
    kAutomaton = 17,
    kInverse = 18,
    kReservoir = 24,
    kInterval = 19,
    kNoOverlap = 20,
    kNoOverlap2D = 21,
    kCumulative = 22,
    kDummyConstraint = 30,
    CONSTRAINT_NOT_SET = 0,
  };

  static inline const ConstraintProto* internal_default_instance() {
    return reinterpret_cast<const ConstraintProto*>(
               &_ConstraintProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ConstraintProto& a, ConstraintProto& b) {
    a.Swap(&b);
  }
  inline void Swap(ConstraintProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConstraintProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConstraintProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConstraintProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ConstraintProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ConstraintProto& from) {
    ConstraintProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ConstraintProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.ConstraintProto";
  }
  protected:
  explicit ConstraintProto(::google::protobuf::Arena* arena);
  ConstraintProto(::google::protobuf::Arena* arena, const ConstraintProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnforcementLiteralFieldNumber = 2,
    kNameFieldNumber = 1,
    kBoolOrFieldNumber = 3,
    kBoolAndFieldNumber = 4,
    kAtMostOneFieldNumber = 26,
    kExactlyOneFieldNumber = 29,
    kBoolXorFieldNumber = 5,
    kIntDivFieldNumber = 7,
    kIntModFieldNumber = 8,
    kIntProdFieldNumber = 11,
    kLinMaxFieldNumber = 27,
    kLinearFieldNumber = 12,
    kAllDiffFieldNumber = 13,
    kElementFieldNumber = 14,
    kCircuitFieldNumber = 15,
    kRoutesFieldNumber = 23,
    kTableFieldNumber = 16,
    kAutomatonFieldNumber = 17,
    kInverseFieldNumber = 18,
    kReservoirFieldNumber = 24,
    kIntervalFieldNumber = 19,
    kNoOverlapFieldNumber = 20,
    kNoOverlap2DFieldNumber = 21,
    kCumulativeFieldNumber = 22,
    kDummyConstraintFieldNumber = 30,
  };
  // repeated int32 enforcement_literal = 2;
  int enforcement_literal_size() const;
  private:
  int _internal_enforcement_literal_size() const;

  public:
  void clear_enforcement_literal() ;
  ::int32_t enforcement_literal(int index) const;
  void set_enforcement_literal(int index, ::int32_t value);
  void add_enforcement_literal(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& enforcement_literal() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_enforcement_literal();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_enforcement_literal() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_enforcement_literal();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .operations_research.sat.BoolArgumentProto bool_or = 3;
  bool has_bool_or() const;
  private:
  bool _internal_has_bool_or() const;

  public:
  void clear_bool_or() ;
  const ::operations_research::sat::BoolArgumentProto& bool_or() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BoolArgumentProto* release_bool_or();
  ::operations_research::sat::BoolArgumentProto* mutable_bool_or();
  void set_allocated_bool_or(::operations_research::sat::BoolArgumentProto* value);
  void unsafe_arena_set_allocated_bool_or(::operations_research::sat::BoolArgumentProto* value);
  ::operations_research::sat::BoolArgumentProto* unsafe_arena_release_bool_or();

  private:
  const ::operations_research::sat::BoolArgumentProto& _internal_bool_or() const;
  ::operations_research::sat::BoolArgumentProto* _internal_mutable_bool_or();

  public:
  // .operations_research.sat.BoolArgumentProto bool_and = 4;
  bool has_bool_and() const;
  private:
  bool _internal_has_bool_and() const;

  public:
  void clear_bool_and() ;
  const ::operations_research::sat::BoolArgumentProto& bool_and() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BoolArgumentProto* release_bool_and();
  ::operations_research::sat::BoolArgumentProto* mutable_bool_and();
  void set_allocated_bool_and(::operations_research::sat::BoolArgumentProto* value);
  void unsafe_arena_set_allocated_bool_and(::operations_research::sat::BoolArgumentProto* value);
  ::operations_research::sat::BoolArgumentProto* unsafe_arena_release_bool_and();

  private:
  const ::operations_research::sat::BoolArgumentProto& _internal_bool_and() const;
  ::operations_research::sat::BoolArgumentProto* _internal_mutable_bool_and();

  public:
  // .operations_research.sat.BoolArgumentProto at_most_one = 26;
  bool has_at_most_one() const;
  private:
  bool _internal_has_at_most_one() const;

  public:
  void clear_at_most_one() ;
  const ::operations_research::sat::BoolArgumentProto& at_most_one() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BoolArgumentProto* release_at_most_one();
  ::operations_research::sat::BoolArgumentProto* mutable_at_most_one();
  void set_allocated_at_most_one(::operations_research::sat::BoolArgumentProto* value);
  void unsafe_arena_set_allocated_at_most_one(::operations_research::sat::BoolArgumentProto* value);
  ::operations_research::sat::BoolArgumentProto* unsafe_arena_release_at_most_one();

  private:
  const ::operations_research::sat::BoolArgumentProto& _internal_at_most_one() const;
  ::operations_research::sat::BoolArgumentProto* _internal_mutable_at_most_one();

  public:
  // .operations_research.sat.BoolArgumentProto exactly_one = 29;
  bool has_exactly_one() const;
  private:
  bool _internal_has_exactly_one() const;

  public:
  void clear_exactly_one() ;
  const ::operations_research::sat::BoolArgumentProto& exactly_one() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BoolArgumentProto* release_exactly_one();
  ::operations_research::sat::BoolArgumentProto* mutable_exactly_one();
  void set_allocated_exactly_one(::operations_research::sat::BoolArgumentProto* value);
  void unsafe_arena_set_allocated_exactly_one(::operations_research::sat::BoolArgumentProto* value);
  ::operations_research::sat::BoolArgumentProto* unsafe_arena_release_exactly_one();

  private:
  const ::operations_research::sat::BoolArgumentProto& _internal_exactly_one() const;
  ::operations_research::sat::BoolArgumentProto* _internal_mutable_exactly_one();

  public:
  // .operations_research.sat.BoolArgumentProto bool_xor = 5;
  bool has_bool_xor() const;
  private:
  bool _internal_has_bool_xor() const;

  public:
  void clear_bool_xor() ;
  const ::operations_research::sat::BoolArgumentProto& bool_xor() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BoolArgumentProto* release_bool_xor();
  ::operations_research::sat::BoolArgumentProto* mutable_bool_xor();
  void set_allocated_bool_xor(::operations_research::sat::BoolArgumentProto* value);
  void unsafe_arena_set_allocated_bool_xor(::operations_research::sat::BoolArgumentProto* value);
  ::operations_research::sat::BoolArgumentProto* unsafe_arena_release_bool_xor();

  private:
  const ::operations_research::sat::BoolArgumentProto& _internal_bool_xor() const;
  ::operations_research::sat::BoolArgumentProto* _internal_mutable_bool_xor();

  public:
  // .operations_research.sat.LinearArgumentProto int_div = 7;
  bool has_int_div() const;
  private:
  bool _internal_has_int_div() const;

  public:
  void clear_int_div() ;
  const ::operations_research::sat::LinearArgumentProto& int_div() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearArgumentProto* release_int_div();
  ::operations_research::sat::LinearArgumentProto* mutable_int_div();
  void set_allocated_int_div(::operations_research::sat::LinearArgumentProto* value);
  void unsafe_arena_set_allocated_int_div(::operations_research::sat::LinearArgumentProto* value);
  ::operations_research::sat::LinearArgumentProto* unsafe_arena_release_int_div();

  private:
  const ::operations_research::sat::LinearArgumentProto& _internal_int_div() const;
  ::operations_research::sat::LinearArgumentProto* _internal_mutable_int_div();

  public:
  // .operations_research.sat.LinearArgumentProto int_mod = 8;
  bool has_int_mod() const;
  private:
  bool _internal_has_int_mod() const;

  public:
  void clear_int_mod() ;
  const ::operations_research::sat::LinearArgumentProto& int_mod() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearArgumentProto* release_int_mod();
  ::operations_research::sat::LinearArgumentProto* mutable_int_mod();
  void set_allocated_int_mod(::operations_research::sat::LinearArgumentProto* value);
  void unsafe_arena_set_allocated_int_mod(::operations_research::sat::LinearArgumentProto* value);
  ::operations_research::sat::LinearArgumentProto* unsafe_arena_release_int_mod();

  private:
  const ::operations_research::sat::LinearArgumentProto& _internal_int_mod() const;
  ::operations_research::sat::LinearArgumentProto* _internal_mutable_int_mod();

  public:
  // .operations_research.sat.LinearArgumentProto int_prod = 11;
  bool has_int_prod() const;
  private:
  bool _internal_has_int_prod() const;

  public:
  void clear_int_prod() ;
  const ::operations_research::sat::LinearArgumentProto& int_prod() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearArgumentProto* release_int_prod();
  ::operations_research::sat::LinearArgumentProto* mutable_int_prod();
  void set_allocated_int_prod(::operations_research::sat::LinearArgumentProto* value);
  void unsafe_arena_set_allocated_int_prod(::operations_research::sat::LinearArgumentProto* value);
  ::operations_research::sat::LinearArgumentProto* unsafe_arena_release_int_prod();

  private:
  const ::operations_research::sat::LinearArgumentProto& _internal_int_prod() const;
  ::operations_research::sat::LinearArgumentProto* _internal_mutable_int_prod();

  public:
  // .operations_research.sat.LinearArgumentProto lin_max = 27;
  bool has_lin_max() const;
  private:
  bool _internal_has_lin_max() const;

  public:
  void clear_lin_max() ;
  const ::operations_research::sat::LinearArgumentProto& lin_max() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearArgumentProto* release_lin_max();
  ::operations_research::sat::LinearArgumentProto* mutable_lin_max();
  void set_allocated_lin_max(::operations_research::sat::LinearArgumentProto* value);
  void unsafe_arena_set_allocated_lin_max(::operations_research::sat::LinearArgumentProto* value);
  ::operations_research::sat::LinearArgumentProto* unsafe_arena_release_lin_max();

  private:
  const ::operations_research::sat::LinearArgumentProto& _internal_lin_max() const;
  ::operations_research::sat::LinearArgumentProto* _internal_mutable_lin_max();

  public:
  // .operations_research.sat.LinearConstraintProto linear = 12;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;

  public:
  void clear_linear() ;
  const ::operations_research::sat::LinearConstraintProto& linear() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearConstraintProto* release_linear();
  ::operations_research::sat::LinearConstraintProto* mutable_linear();
  void set_allocated_linear(::operations_research::sat::LinearConstraintProto* value);
  void unsafe_arena_set_allocated_linear(::operations_research::sat::LinearConstraintProto* value);
  ::operations_research::sat::LinearConstraintProto* unsafe_arena_release_linear();

  private:
  const ::operations_research::sat::LinearConstraintProto& _internal_linear() const;
  ::operations_research::sat::LinearConstraintProto* _internal_mutable_linear();

  public:
  // .operations_research.sat.AllDifferentConstraintProto all_diff = 13;
  bool has_all_diff() const;
  private:
  bool _internal_has_all_diff() const;

  public:
  void clear_all_diff() ;
  const ::operations_research::sat::AllDifferentConstraintProto& all_diff() const;
  PROTOBUF_NODISCARD ::operations_research::sat::AllDifferentConstraintProto* release_all_diff();
  ::operations_research::sat::AllDifferentConstraintProto* mutable_all_diff();
  void set_allocated_all_diff(::operations_research::sat::AllDifferentConstraintProto* value);
  void unsafe_arena_set_allocated_all_diff(::operations_research::sat::AllDifferentConstraintProto* value);
  ::operations_research::sat::AllDifferentConstraintProto* unsafe_arena_release_all_diff();

  private:
  const ::operations_research::sat::AllDifferentConstraintProto& _internal_all_diff() const;
  ::operations_research::sat::AllDifferentConstraintProto* _internal_mutable_all_diff();

  public:
  // .operations_research.sat.ElementConstraintProto element = 14;
  bool has_element() const;
  private:
  bool _internal_has_element() const;

  public:
  void clear_element() ;
  const ::operations_research::sat::ElementConstraintProto& element() const;
  PROTOBUF_NODISCARD ::operations_research::sat::ElementConstraintProto* release_element();
  ::operations_research::sat::ElementConstraintProto* mutable_element();
  void set_allocated_element(::operations_research::sat::ElementConstraintProto* value);
  void unsafe_arena_set_allocated_element(::operations_research::sat::ElementConstraintProto* value);
  ::operations_research::sat::ElementConstraintProto* unsafe_arena_release_element();

  private:
  const ::operations_research::sat::ElementConstraintProto& _internal_element() const;
  ::operations_research::sat::ElementConstraintProto* _internal_mutable_element();

  public:
  // .operations_research.sat.CircuitConstraintProto circuit = 15;
  bool has_circuit() const;
  private:
  bool _internal_has_circuit() const;

  public:
  void clear_circuit() ;
  const ::operations_research::sat::CircuitConstraintProto& circuit() const;
  PROTOBUF_NODISCARD ::operations_research::sat::CircuitConstraintProto* release_circuit();
  ::operations_research::sat::CircuitConstraintProto* mutable_circuit();
  void set_allocated_circuit(::operations_research::sat::CircuitConstraintProto* value);
  void unsafe_arena_set_allocated_circuit(::operations_research::sat::CircuitConstraintProto* value);
  ::operations_research::sat::CircuitConstraintProto* unsafe_arena_release_circuit();

  private:
  const ::operations_research::sat::CircuitConstraintProto& _internal_circuit() const;
  ::operations_research::sat::CircuitConstraintProto* _internal_mutable_circuit();

  public:
  // .operations_research.sat.RoutesConstraintProto routes = 23;
  bool has_routes() const;
  private:
  bool _internal_has_routes() const;

  public:
  void clear_routes() ;
  const ::operations_research::sat::RoutesConstraintProto& routes() const;
  PROTOBUF_NODISCARD ::operations_research::sat::RoutesConstraintProto* release_routes();
  ::operations_research::sat::RoutesConstraintProto* mutable_routes();
  void set_allocated_routes(::operations_research::sat::RoutesConstraintProto* value);
  void unsafe_arena_set_allocated_routes(::operations_research::sat::RoutesConstraintProto* value);
  ::operations_research::sat::RoutesConstraintProto* unsafe_arena_release_routes();

  private:
  const ::operations_research::sat::RoutesConstraintProto& _internal_routes() const;
  ::operations_research::sat::RoutesConstraintProto* _internal_mutable_routes();

  public:
  // .operations_research.sat.TableConstraintProto table = 16;
  bool has_table() const;
  private:
  bool _internal_has_table() const;

  public:
  void clear_table() ;
  const ::operations_research::sat::TableConstraintProto& table() const;
  PROTOBUF_NODISCARD ::operations_research::sat::TableConstraintProto* release_table();
  ::operations_research::sat::TableConstraintProto* mutable_table();
  void set_allocated_table(::operations_research::sat::TableConstraintProto* value);
  void unsafe_arena_set_allocated_table(::operations_research::sat::TableConstraintProto* value);
  ::operations_research::sat::TableConstraintProto* unsafe_arena_release_table();

  private:
  const ::operations_research::sat::TableConstraintProto& _internal_table() const;
  ::operations_research::sat::TableConstraintProto* _internal_mutable_table();

  public:
  // .operations_research.sat.AutomatonConstraintProto automaton = 17;
  bool has_automaton() const;
  private:
  bool _internal_has_automaton() const;

  public:
  void clear_automaton() ;
  const ::operations_research::sat::AutomatonConstraintProto& automaton() const;
  PROTOBUF_NODISCARD ::operations_research::sat::AutomatonConstraintProto* release_automaton();
  ::operations_research::sat::AutomatonConstraintProto* mutable_automaton();
  void set_allocated_automaton(::operations_research::sat::AutomatonConstraintProto* value);
  void unsafe_arena_set_allocated_automaton(::operations_research::sat::AutomatonConstraintProto* value);
  ::operations_research::sat::AutomatonConstraintProto* unsafe_arena_release_automaton();

  private:
  const ::operations_research::sat::AutomatonConstraintProto& _internal_automaton() const;
  ::operations_research::sat::AutomatonConstraintProto* _internal_mutable_automaton();

  public:
  // .operations_research.sat.InverseConstraintProto inverse = 18;
  bool has_inverse() const;
  private:
  bool _internal_has_inverse() const;

  public:
  void clear_inverse() ;
  const ::operations_research::sat::InverseConstraintProto& inverse() const;
  PROTOBUF_NODISCARD ::operations_research::sat::InverseConstraintProto* release_inverse();
  ::operations_research::sat::InverseConstraintProto* mutable_inverse();
  void set_allocated_inverse(::operations_research::sat::InverseConstraintProto* value);
  void unsafe_arena_set_allocated_inverse(::operations_research::sat::InverseConstraintProto* value);
  ::operations_research::sat::InverseConstraintProto* unsafe_arena_release_inverse();

  private:
  const ::operations_research::sat::InverseConstraintProto& _internal_inverse() const;
  ::operations_research::sat::InverseConstraintProto* _internal_mutable_inverse();

  public:
  // .operations_research.sat.ReservoirConstraintProto reservoir = 24;
  bool has_reservoir() const;
  private:
  bool _internal_has_reservoir() const;

  public:
  void clear_reservoir() ;
  const ::operations_research::sat::ReservoirConstraintProto& reservoir() const;
  PROTOBUF_NODISCARD ::operations_research::sat::ReservoirConstraintProto* release_reservoir();
  ::operations_research::sat::ReservoirConstraintProto* mutable_reservoir();
  void set_allocated_reservoir(::operations_research::sat::ReservoirConstraintProto* value);
  void unsafe_arena_set_allocated_reservoir(::operations_research::sat::ReservoirConstraintProto* value);
  ::operations_research::sat::ReservoirConstraintProto* unsafe_arena_release_reservoir();

  private:
  const ::operations_research::sat::ReservoirConstraintProto& _internal_reservoir() const;
  ::operations_research::sat::ReservoirConstraintProto* _internal_mutable_reservoir();

  public:
  // .operations_research.sat.IntervalConstraintProto interval = 19;
  bool has_interval() const;
  private:
  bool _internal_has_interval() const;

  public:
  void clear_interval() ;
  const ::operations_research::sat::IntervalConstraintProto& interval() const;
  PROTOBUF_NODISCARD ::operations_research::sat::IntervalConstraintProto* release_interval();
  ::operations_research::sat::IntervalConstraintProto* mutable_interval();
  void set_allocated_interval(::operations_research::sat::IntervalConstraintProto* value);
  void unsafe_arena_set_allocated_interval(::operations_research::sat::IntervalConstraintProto* value);
  ::operations_research::sat::IntervalConstraintProto* unsafe_arena_release_interval();

  private:
  const ::operations_research::sat::IntervalConstraintProto& _internal_interval() const;
  ::operations_research::sat::IntervalConstraintProto* _internal_mutable_interval();

  public:
  // .operations_research.sat.NoOverlapConstraintProto no_overlap = 20;
  bool has_no_overlap() const;
  private:
  bool _internal_has_no_overlap() const;

  public:
  void clear_no_overlap() ;
  const ::operations_research::sat::NoOverlapConstraintProto& no_overlap() const;
  PROTOBUF_NODISCARD ::operations_research::sat::NoOverlapConstraintProto* release_no_overlap();
  ::operations_research::sat::NoOverlapConstraintProto* mutable_no_overlap();
  void set_allocated_no_overlap(::operations_research::sat::NoOverlapConstraintProto* value);
  void unsafe_arena_set_allocated_no_overlap(::operations_research::sat::NoOverlapConstraintProto* value);
  ::operations_research::sat::NoOverlapConstraintProto* unsafe_arena_release_no_overlap();

  private:
  const ::operations_research::sat::NoOverlapConstraintProto& _internal_no_overlap() const;
  ::operations_research::sat::NoOverlapConstraintProto* _internal_mutable_no_overlap();

  public:
  // .operations_research.sat.NoOverlap2DConstraintProto no_overlap_2d = 21;
  bool has_no_overlap_2d() const;
  private:
  bool _internal_has_no_overlap_2d() const;

  public:
  void clear_no_overlap_2d() ;
  const ::operations_research::sat::NoOverlap2DConstraintProto& no_overlap_2d() const;
  PROTOBUF_NODISCARD ::operations_research::sat::NoOverlap2DConstraintProto* release_no_overlap_2d();
  ::operations_research::sat::NoOverlap2DConstraintProto* mutable_no_overlap_2d();
  void set_allocated_no_overlap_2d(::operations_research::sat::NoOverlap2DConstraintProto* value);
  void unsafe_arena_set_allocated_no_overlap_2d(::operations_research::sat::NoOverlap2DConstraintProto* value);
  ::operations_research::sat::NoOverlap2DConstraintProto* unsafe_arena_release_no_overlap_2d();

  private:
  const ::operations_research::sat::NoOverlap2DConstraintProto& _internal_no_overlap_2d() const;
  ::operations_research::sat::NoOverlap2DConstraintProto* _internal_mutable_no_overlap_2d();

  public:
  // .operations_research.sat.CumulativeConstraintProto cumulative = 22;
  bool has_cumulative() const;
  private:
  bool _internal_has_cumulative() const;

  public:
  void clear_cumulative() ;
  const ::operations_research::sat::CumulativeConstraintProto& cumulative() const;
  PROTOBUF_NODISCARD ::operations_research::sat::CumulativeConstraintProto* release_cumulative();
  ::operations_research::sat::CumulativeConstraintProto* mutable_cumulative();
  void set_allocated_cumulative(::operations_research::sat::CumulativeConstraintProto* value);
  void unsafe_arena_set_allocated_cumulative(::operations_research::sat::CumulativeConstraintProto* value);
  ::operations_research::sat::CumulativeConstraintProto* unsafe_arena_release_cumulative();

  private:
  const ::operations_research::sat::CumulativeConstraintProto& _internal_cumulative() const;
  ::operations_research::sat::CumulativeConstraintProto* _internal_mutable_cumulative();

  public:
  // .operations_research.sat.ListOfVariablesProto dummy_constraint = 30;
  bool has_dummy_constraint() const;
  private:
  bool _internal_has_dummy_constraint() const;

  public:
  void clear_dummy_constraint() ;
  const ::operations_research::sat::ListOfVariablesProto& dummy_constraint() const;
  PROTOBUF_NODISCARD ::operations_research::sat::ListOfVariablesProto* release_dummy_constraint();
  ::operations_research::sat::ListOfVariablesProto* mutable_dummy_constraint();
  void set_allocated_dummy_constraint(::operations_research::sat::ListOfVariablesProto* value);
  void unsafe_arena_set_allocated_dummy_constraint(::operations_research::sat::ListOfVariablesProto* value);
  ::operations_research::sat::ListOfVariablesProto* unsafe_arena_release_dummy_constraint();

  private:
  const ::operations_research::sat::ListOfVariablesProto& _internal_dummy_constraint() const;
  ::operations_research::sat::ListOfVariablesProto* _internal_mutable_dummy_constraint();

  public:
  void clear_constraint();
  ConstraintCase constraint_case() const;
  // @@protoc_insertion_point(class_scope:operations_research.sat.ConstraintProto)
 private:
  class _Internal;
  void set_has_bool_or();
  void set_has_bool_and();
  void set_has_at_most_one();
  void set_has_exactly_one();
  void set_has_bool_xor();
  void set_has_int_div();
  void set_has_int_mod();
  void set_has_int_prod();
  void set_has_lin_max();
  void set_has_linear();
  void set_has_all_diff();
  void set_has_element();
  void set_has_circuit();
  void set_has_routes();
  void set_has_table();
  void set_has_automaton();
  void set_has_inverse();
  void set_has_reservoir();
  void set_has_interval();
  void set_has_no_overlap();
  void set_has_no_overlap_2d();
  void set_has_cumulative();
  void set_has_dummy_constraint();

  inline bool has_constraint() const;
  inline void clear_has_constraint();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 25, 23,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> enforcement_literal_;
    mutable ::google::protobuf::internal::CachedSize _enforcement_literal_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    union ConstraintUnion {
      constexpr ConstraintUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::operations_research::sat::BoolArgumentProto* bool_or_;
      ::operations_research::sat::BoolArgumentProto* bool_and_;
      ::operations_research::sat::BoolArgumentProto* at_most_one_;
      ::operations_research::sat::BoolArgumentProto* exactly_one_;
      ::operations_research::sat::BoolArgumentProto* bool_xor_;
      ::operations_research::sat::LinearArgumentProto* int_div_;
      ::operations_research::sat::LinearArgumentProto* int_mod_;
      ::operations_research::sat::LinearArgumentProto* int_prod_;
      ::operations_research::sat::LinearArgumentProto* lin_max_;
      ::operations_research::sat::LinearConstraintProto* linear_;
      ::operations_research::sat::AllDifferentConstraintProto* all_diff_;
      ::operations_research::sat::ElementConstraintProto* element_;
      ::operations_research::sat::CircuitConstraintProto* circuit_;
      ::operations_research::sat::RoutesConstraintProto* routes_;
      ::operations_research::sat::TableConstraintProto* table_;
      ::operations_research::sat::AutomatonConstraintProto* automaton_;
      ::operations_research::sat::InverseConstraintProto* inverse_;
      ::operations_research::sat::ReservoirConstraintProto* reservoir_;
      ::operations_research::sat::IntervalConstraintProto* interval_;
      ::operations_research::sat::NoOverlapConstraintProto* no_overlap_;
      ::operations_research::sat::NoOverlap2DConstraintProto* no_overlap_2d_;
      ::operations_research::sat::CumulativeConstraintProto* cumulative_;
      ::operations_research::sat::ListOfVariablesProto* dummy_constraint_;
    } constraint_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};// -------------------------------------------------------------------

class CpModelProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.CpModelProto) */ {
 public:
  inline CpModelProto() : CpModelProto(nullptr) {}
  ~CpModelProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CpModelProto(::google::protobuf::internal::ConstantInitialized);

  inline CpModelProto(const CpModelProto& from)
      : CpModelProto(nullptr, from) {}
  CpModelProto(CpModelProto&& from) noexcept
    : CpModelProto() {
    *this = ::std::move(from);
  }

  inline CpModelProto& operator=(const CpModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline CpModelProto& operator=(CpModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CpModelProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const CpModelProto* internal_default_instance() {
    return reinterpret_cast<const CpModelProto*>(
               &_CpModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CpModelProto& a, CpModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(CpModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CpModelProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CpModelProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CpModelProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CpModelProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CpModelProto& from) {
    CpModelProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CpModelProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.CpModelProto";
  }
  protected:
  explicit CpModelProto(::google::protobuf::Arena* arena);
  CpModelProto(::google::protobuf::Arena* arena, const CpModelProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariablesFieldNumber = 2,
    kConstraintsFieldNumber = 3,
    kSearchStrategyFieldNumber = 5,
    kAssumptionsFieldNumber = 7,
    kNameFieldNumber = 1,
    kObjectiveFieldNumber = 4,
    kSolutionHintFieldNumber = 6,
    kSymmetryFieldNumber = 8,
    kFloatingPointObjectiveFieldNumber = 9,
  };
  // repeated .operations_research.sat.IntegerVariableProto variables = 2;
  int variables_size() const;
  private:
  int _internal_variables_size() const;

  public:
  void clear_variables() ;
  ::operations_research::sat::IntegerVariableProto* mutable_variables(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto >*
      mutable_variables();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>& _internal_variables() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>* _internal_mutable_variables();
  public:
  const ::operations_research::sat::IntegerVariableProto& variables(int index) const;
  ::operations_research::sat::IntegerVariableProto* add_variables();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto >&
      variables() const;
  // repeated .operations_research.sat.ConstraintProto constraints = 3;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;

  public:
  void clear_constraints() ;
  ::operations_research::sat::ConstraintProto* mutable_constraints(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::ConstraintProto >*
      mutable_constraints();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>& _internal_constraints() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>* _internal_mutable_constraints();
  public:
  const ::operations_research::sat::ConstraintProto& constraints(int index) const;
  ::operations_research::sat::ConstraintProto* add_constraints();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::ConstraintProto >&
      constraints() const;
  // repeated .operations_research.sat.DecisionStrategyProto search_strategy = 5;
  int search_strategy_size() const;
  private:
  int _internal_search_strategy_size() const;

  public:
  void clear_search_strategy() ;
  ::operations_research::sat::DecisionStrategyProto* mutable_search_strategy(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto >*
      mutable_search_strategy();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>& _internal_search_strategy() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>* _internal_mutable_search_strategy();
  public:
  const ::operations_research::sat::DecisionStrategyProto& search_strategy(int index) const;
  ::operations_research::sat::DecisionStrategyProto* add_search_strategy();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto >&
      search_strategy() const;
  // repeated int32 assumptions = 7;
  int assumptions_size() const;
  private:
  int _internal_assumptions_size() const;

  public:
  void clear_assumptions() ;
  ::int32_t assumptions(int index) const;
  void set_assumptions(int index, ::int32_t value);
  void add_assumptions(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& assumptions() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_assumptions();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_assumptions() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_assumptions();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .operations_research.sat.CpObjectiveProto objective = 4;
  bool has_objective() const;
  void clear_objective() ;
  const ::operations_research::sat::CpObjectiveProto& objective() const;
  PROTOBUF_NODISCARD ::operations_research::sat::CpObjectiveProto* release_objective();
  ::operations_research::sat::CpObjectiveProto* mutable_objective();
  void set_allocated_objective(::operations_research::sat::CpObjectiveProto* value);
  void unsafe_arena_set_allocated_objective(::operations_research::sat::CpObjectiveProto* value);
  ::operations_research::sat::CpObjectiveProto* unsafe_arena_release_objective();

  private:
  const ::operations_research::sat::CpObjectiveProto& _internal_objective() const;
  ::operations_research::sat::CpObjectiveProto* _internal_mutable_objective();

  public:
  // .operations_research.sat.PartialVariableAssignment solution_hint = 6;
  bool has_solution_hint() const;
  void clear_solution_hint() ;
  const ::operations_research::sat::PartialVariableAssignment& solution_hint() const;
  PROTOBUF_NODISCARD ::operations_research::sat::PartialVariableAssignment* release_solution_hint();
  ::operations_research::sat::PartialVariableAssignment* mutable_solution_hint();
  void set_allocated_solution_hint(::operations_research::sat::PartialVariableAssignment* value);
  void unsafe_arena_set_allocated_solution_hint(::operations_research::sat::PartialVariableAssignment* value);
  ::operations_research::sat::PartialVariableAssignment* unsafe_arena_release_solution_hint();

  private:
  const ::operations_research::sat::PartialVariableAssignment& _internal_solution_hint() const;
  ::operations_research::sat::PartialVariableAssignment* _internal_mutable_solution_hint();

  public:
  // .operations_research.sat.SymmetryProto symmetry = 8;
  bool has_symmetry() const;
  void clear_symmetry() ;
  const ::operations_research::sat::SymmetryProto& symmetry() const;
  PROTOBUF_NODISCARD ::operations_research::sat::SymmetryProto* release_symmetry();
  ::operations_research::sat::SymmetryProto* mutable_symmetry();
  void set_allocated_symmetry(::operations_research::sat::SymmetryProto* value);
  void unsafe_arena_set_allocated_symmetry(::operations_research::sat::SymmetryProto* value);
  ::operations_research::sat::SymmetryProto* unsafe_arena_release_symmetry();

  private:
  const ::operations_research::sat::SymmetryProto& _internal_symmetry() const;
  ::operations_research::sat::SymmetryProto* _internal_mutable_symmetry();

  public:
  // .operations_research.sat.FloatObjectiveProto floating_point_objective = 9;
  bool has_floating_point_objective() const;
  void clear_floating_point_objective() ;
  const ::operations_research::sat::FloatObjectiveProto& floating_point_objective() const;
  PROTOBUF_NODISCARD ::operations_research::sat::FloatObjectiveProto* release_floating_point_objective();
  ::operations_research::sat::FloatObjectiveProto* mutable_floating_point_objective();
  void set_allocated_floating_point_objective(::operations_research::sat::FloatObjectiveProto* value);
  void unsafe_arena_set_allocated_floating_point_objective(::operations_research::sat::FloatObjectiveProto* value);
  ::operations_research::sat::FloatObjectiveProto* unsafe_arena_release_floating_point_objective();

  private:
  const ::operations_research::sat::FloatObjectiveProto& _internal_floating_point_objective() const;
  ::operations_research::sat::FloatObjectiveProto* _internal_mutable_floating_point_objective();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.CpModelProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 7,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::IntegerVariableProto > variables_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::ConstraintProto > constraints_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::DecisionStrategyProto > search_strategy_;
    ::google::protobuf::RepeatedField<::int32_t> assumptions_;
    mutable ::google::protobuf::internal::CachedSize _assumptions_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::operations_research::sat::CpObjectiveProto* objective_;
    ::operations_research::sat::PartialVariableAssignment* solution_hint_;
    ::operations_research::sat::SymmetryProto* symmetry_;
    ::operations_research::sat::FloatObjectiveProto* floating_point_objective_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fcp_5fmodel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IntegerVariableProto

// string name = 1;
inline void IntegerVariableProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& IntegerVariableProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.IntegerVariableProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntegerVariableProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.IntegerVariableProto.name)
}
inline std::string* IntegerVariableProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.IntegerVariableProto.name)
  return _s;
}
inline const std::string& IntegerVariableProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void IntegerVariableProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* IntegerVariableProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* IntegerVariableProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.IntegerVariableProto.name)
  return _impl_.name_.Release();
}
inline void IntegerVariableProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.IntegerVariableProto.name)
}

// repeated int64 domain = 2;
inline int IntegerVariableProto::_internal_domain_size() const {
  return _internal_domain().size();
}
inline int IntegerVariableProto::domain_size() const {
  return _internal_domain_size();
}
inline void IntegerVariableProto::clear_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.Clear();
}
inline ::int64_t IntegerVariableProto::domain(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.IntegerVariableProto.domain)
  return _internal_domain().Get(index);
}
inline void IntegerVariableProto::set_domain(int index, ::int64_t value) {
  _internal_mutable_domain()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.IntegerVariableProto.domain)
}
inline void IntegerVariableProto::add_domain(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_domain()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.IntegerVariableProto.domain)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& IntegerVariableProto::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.IntegerVariableProto.domain)
  return _internal_domain();
}
inline ::google::protobuf::RepeatedField<::int64_t>* IntegerVariableProto::mutable_domain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.IntegerVariableProto.domain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_domain();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& IntegerVariableProto::_internal_domain()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domain_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* IntegerVariableProto::_internal_mutable_domain() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.domain_;
}

// -------------------------------------------------------------------

// BoolArgumentProto

// repeated int32 literals = 1;
inline int BoolArgumentProto::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int BoolArgumentProto::literals_size() const {
  return _internal_literals_size();
}
inline void BoolArgumentProto::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t BoolArgumentProto::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.BoolArgumentProto.literals)
  return _internal_literals().Get(index);
}
inline void BoolArgumentProto::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.BoolArgumentProto.literals)
}
inline void BoolArgumentProto::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.BoolArgumentProto.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BoolArgumentProto::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.BoolArgumentProto.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BoolArgumentProto::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.BoolArgumentProto.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BoolArgumentProto::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BoolArgumentProto::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// -------------------------------------------------------------------

// LinearExpressionProto

// repeated int32 vars = 1;
inline int LinearExpressionProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int LinearExpressionProto::vars_size() const {
  return _internal_vars_size();
}
inline void LinearExpressionProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t LinearExpressionProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearExpressionProto.vars)
  return _internal_vars().Get(index);
}
inline void LinearExpressionProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearExpressionProto.vars)
}
inline void LinearExpressionProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearExpressionProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearExpressionProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearExpressionProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearExpressionProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearExpressionProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearExpressionProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearExpressionProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated int64 coeffs = 2;
inline int LinearExpressionProto::_internal_coeffs_size() const {
  return _internal_coeffs().size();
}
inline int LinearExpressionProto::coeffs_size() const {
  return _internal_coeffs_size();
}
inline void LinearExpressionProto::clear_coeffs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeffs_.Clear();
}
inline ::int64_t LinearExpressionProto::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearExpressionProto.coeffs)
  return _internal_coeffs().Get(index);
}
inline void LinearExpressionProto::set_coeffs(int index, ::int64_t value) {
  _internal_mutable_coeffs()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearExpressionProto.coeffs)
}
inline void LinearExpressionProto::add_coeffs(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coeffs()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearExpressionProto.coeffs)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearExpressionProto::coeffs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearExpressionProto.coeffs)
  return _internal_coeffs();
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearExpressionProto::mutable_coeffs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearExpressionProto.coeffs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coeffs();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearExpressionProto::_internal_coeffs()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeffs_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearExpressionProto::_internal_mutable_coeffs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coeffs_;
}

// int64 offset = 3;
inline void LinearExpressionProto::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t LinearExpressionProto::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearExpressionProto.offset)
  return _internal_offset();
}
inline void LinearExpressionProto::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearExpressionProto.offset)
}
inline ::int64_t LinearExpressionProto::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void LinearExpressionProto::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// -------------------------------------------------------------------

// LinearArgumentProto

// .operations_research.sat.LinearExpressionProto target = 1;
inline bool LinearArgumentProto::has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline void LinearArgumentProto::clear_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::sat::LinearExpressionProto& LinearArgumentProto::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearExpressionProto* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearExpressionProto&>(::operations_research::sat::_LinearExpressionProto_default_instance_);
}
inline const ::operations_research::sat::LinearExpressionProto& LinearArgumentProto::target() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearArgumentProto.target)
  return _internal_target();
}
inline void LinearArgumentProto::unsafe_arena_set_allocated_target(::operations_research::sat::LinearExpressionProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearArgumentProto.target)
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* released = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::unsafe_arena_release_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearArgumentProto.target)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::_internal_mutable_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearExpressionProto>(GetArena());
    _impl_.target_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(p);
  }
  return _impl_.target_;
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::mutable_target() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearExpressionProto* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearArgumentProto.target)
  return _msg;
}
inline void LinearArgumentProto::set_allocated_target(::operations_research::sat::LinearExpressionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(_impl_.target_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.target_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearArgumentProto.target)
}

// repeated .operations_research.sat.LinearExpressionProto exprs = 2;
inline int LinearArgumentProto::_internal_exprs_size() const {
  return _internal_exprs().size();
}
inline int LinearArgumentProto::exprs_size() const {
  return _internal_exprs_size();
}
inline void LinearArgumentProto::clear_exprs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exprs_.Clear();
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::mutable_exprs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearArgumentProto.exprs)
  return _internal_mutable_exprs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* LinearArgumentProto::mutable_exprs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearArgumentProto.exprs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exprs();
}
inline const ::operations_research::sat::LinearExpressionProto& LinearArgumentProto::exprs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearArgumentProto.exprs)
  return _internal_exprs().Get(index);
}
inline ::operations_research::sat::LinearExpressionProto* LinearArgumentProto::add_exprs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearExpressionProto* _add = _internal_mutable_exprs()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearArgumentProto.exprs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& LinearArgumentProto::exprs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearArgumentProto.exprs)
  return _internal_exprs();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>&
LinearArgumentProto::_internal_exprs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exprs_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>*
LinearArgumentProto::_internal_mutable_exprs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exprs_;
}

// -------------------------------------------------------------------

// AllDifferentConstraintProto

// repeated .operations_research.sat.LinearExpressionProto exprs = 1;
inline int AllDifferentConstraintProto::_internal_exprs_size() const {
  return _internal_exprs().size();
}
inline int AllDifferentConstraintProto::exprs_size() const {
  return _internal_exprs_size();
}
inline void AllDifferentConstraintProto::clear_exprs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exprs_.Clear();
}
inline ::operations_research::sat::LinearExpressionProto* AllDifferentConstraintProto::mutable_exprs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.AllDifferentConstraintProto.exprs)
  return _internal_mutable_exprs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* AllDifferentConstraintProto::mutable_exprs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AllDifferentConstraintProto.exprs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_exprs();
}
inline const ::operations_research::sat::LinearExpressionProto& AllDifferentConstraintProto::exprs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.AllDifferentConstraintProto.exprs)
  return _internal_exprs().Get(index);
}
inline ::operations_research::sat::LinearExpressionProto* AllDifferentConstraintProto::add_exprs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearExpressionProto* _add = _internal_mutable_exprs()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.AllDifferentConstraintProto.exprs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& AllDifferentConstraintProto::exprs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AllDifferentConstraintProto.exprs)
  return _internal_exprs();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>&
AllDifferentConstraintProto::_internal_exprs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exprs_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>*
AllDifferentConstraintProto::_internal_mutable_exprs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.exprs_;
}

// -------------------------------------------------------------------

// LinearConstraintProto

// repeated int32 vars = 1;
inline int LinearConstraintProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int LinearConstraintProto::vars_size() const {
  return _internal_vars_size();
}
inline void LinearConstraintProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t LinearConstraintProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearConstraintProto.vars)
  return _internal_vars().Get(index);
}
inline void LinearConstraintProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearConstraintProto.vars)
}
inline void LinearConstraintProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearConstraintProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearConstraintProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearConstraintProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearConstraintProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearConstraintProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearConstraintProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearConstraintProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated int64 coeffs = 2;
inline int LinearConstraintProto::_internal_coeffs_size() const {
  return _internal_coeffs().size();
}
inline int LinearConstraintProto::coeffs_size() const {
  return _internal_coeffs_size();
}
inline void LinearConstraintProto::clear_coeffs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeffs_.Clear();
}
inline ::int64_t LinearConstraintProto::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearConstraintProto.coeffs)
  return _internal_coeffs().Get(index);
}
inline void LinearConstraintProto::set_coeffs(int index, ::int64_t value) {
  _internal_mutable_coeffs()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearConstraintProto.coeffs)
}
inline void LinearConstraintProto::add_coeffs(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coeffs()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearConstraintProto.coeffs)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearConstraintProto::coeffs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearConstraintProto.coeffs)
  return _internal_coeffs();
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearConstraintProto::mutable_coeffs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearConstraintProto.coeffs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coeffs();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearConstraintProto::_internal_coeffs()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeffs_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearConstraintProto::_internal_mutable_coeffs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coeffs_;
}

// repeated int64 domain = 3;
inline int LinearConstraintProto::_internal_domain_size() const {
  return _internal_domain().size();
}
inline int LinearConstraintProto::domain_size() const {
  return _internal_domain_size();
}
inline void LinearConstraintProto::clear_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.Clear();
}
inline ::int64_t LinearConstraintProto::domain(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearConstraintProto.domain)
  return _internal_domain().Get(index);
}
inline void LinearConstraintProto::set_domain(int index, ::int64_t value) {
  _internal_mutable_domain()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearConstraintProto.domain)
}
inline void LinearConstraintProto::add_domain(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_domain()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearConstraintProto.domain)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearConstraintProto::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearConstraintProto.domain)
  return _internal_domain();
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearConstraintProto::mutable_domain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearConstraintProto.domain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_domain();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearConstraintProto::_internal_domain()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domain_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearConstraintProto::_internal_mutable_domain() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.domain_;
}

// -------------------------------------------------------------------

// ElementConstraintProto

// int32 index = 1;
inline void ElementConstraintProto::clear_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_ = 0;
}
inline ::int32_t ElementConstraintProto::index() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ElementConstraintProto.index)
  return _internal_index();
}
inline void ElementConstraintProto::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ElementConstraintProto.index)
}
inline ::int32_t ElementConstraintProto::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void ElementConstraintProto::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// int32 target = 2;
inline void ElementConstraintProto::clear_target() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.target_ = 0;
}
inline ::int32_t ElementConstraintProto::target() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ElementConstraintProto.target)
  return _internal_target();
}
inline void ElementConstraintProto::set_target(::int32_t value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ElementConstraintProto.target)
}
inline ::int32_t ElementConstraintProto::_internal_target() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.target_;
}
inline void ElementConstraintProto::_internal_set_target(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.target_ = value;
}

// repeated int32 vars = 3;
inline int ElementConstraintProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int ElementConstraintProto::vars_size() const {
  return _internal_vars_size();
}
inline void ElementConstraintProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t ElementConstraintProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ElementConstraintProto.vars)
  return _internal_vars().Get(index);
}
inline void ElementConstraintProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ElementConstraintProto.vars)
}
inline void ElementConstraintProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.ElementConstraintProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ElementConstraintProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ElementConstraintProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ElementConstraintProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ElementConstraintProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ElementConstraintProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ElementConstraintProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// -------------------------------------------------------------------

// IntervalConstraintProto

// .operations_research.sat.LinearExpressionProto start = 4;
inline bool IntervalConstraintProto::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline void IntervalConstraintProto::clear_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.start_ != nullptr) _impl_.start_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::_internal_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearExpressionProto* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearExpressionProto&>(::operations_research::sat::_LinearExpressionProto_default_instance_);
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.IntervalConstraintProto.start)
  return _internal_start();
}
inline void IntervalConstraintProto::unsafe_arena_set_allocated_start(::operations_research::sat::LinearExpressionProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.IntervalConstraintProto.start)
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::release_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* released = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::unsafe_arena_release_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.IntervalConstraintProto.start)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::_internal_mutable_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearExpressionProto>(GetArena());
    _impl_.start_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(p);
  }
  return _impl_.start_;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearExpressionProto* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.IntervalConstraintProto.start)
  return _msg;
}
inline void IntervalConstraintProto::set_allocated_start(::operations_research::sat::LinearExpressionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(_impl_.start_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.IntervalConstraintProto.start)
}

// .operations_research.sat.LinearExpressionProto end = 5;
inline bool IntervalConstraintProto::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline void IntervalConstraintProto::clear_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.end_ != nullptr) _impl_.end_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::_internal_end() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearExpressionProto* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearExpressionProto&>(::operations_research::sat::_LinearExpressionProto_default_instance_);
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::end() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.IntervalConstraintProto.end)
  return _internal_end();
}
inline void IntervalConstraintProto::unsafe_arena_set_allocated_end(::operations_research::sat::LinearExpressionProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.IntervalConstraintProto.end)
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::release_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::LinearExpressionProto* released = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::unsafe_arena_release_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.IntervalConstraintProto.end)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::LinearExpressionProto* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::_internal_mutable_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearExpressionProto>(GetArena());
    _impl_.end_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(p);
  }
  return _impl_.end_;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::mutable_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearExpressionProto* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.IntervalConstraintProto.end)
  return _msg;
}
inline void IntervalConstraintProto::set_allocated_end(::operations_research::sat::LinearExpressionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(_impl_.end_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.IntervalConstraintProto.end)
}

// .operations_research.sat.LinearExpressionProto size = 6;
inline bool IntervalConstraintProto::has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline void IntervalConstraintProto::clear_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.size_ != nullptr) _impl_.size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::_internal_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearExpressionProto* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearExpressionProto&>(::operations_research::sat::_LinearExpressionProto_default_instance_);
}
inline const ::operations_research::sat::LinearExpressionProto& IntervalConstraintProto::size() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.IntervalConstraintProto.size)
  return _internal_size();
}
inline void IntervalConstraintProto::unsafe_arena_set_allocated_size(::operations_research::sat::LinearExpressionProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.IntervalConstraintProto.size)
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::LinearExpressionProto* released = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::unsafe_arena_release_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.IntervalConstraintProto.size)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::LinearExpressionProto* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::_internal_mutable_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearExpressionProto>(GetArena());
    _impl_.size_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(p);
  }
  return _impl_.size_;
}
inline ::operations_research::sat::LinearExpressionProto* IntervalConstraintProto::mutable_size() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearExpressionProto* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.IntervalConstraintProto.size)
  return _msg;
}
inline void IntervalConstraintProto::set_allocated_size(::operations_research::sat::LinearExpressionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(_impl_.size_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.size_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.IntervalConstraintProto.size)
}

// -------------------------------------------------------------------

// NoOverlapConstraintProto

// repeated int32 intervals = 1;
inline int NoOverlapConstraintProto::_internal_intervals_size() const {
  return _internal_intervals().size();
}
inline int NoOverlapConstraintProto::intervals_size() const {
  return _internal_intervals_size();
}
inline void NoOverlapConstraintProto::clear_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intervals_.Clear();
}
inline ::int32_t NoOverlapConstraintProto::intervals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.NoOverlapConstraintProto.intervals)
  return _internal_intervals().Get(index);
}
inline void NoOverlapConstraintProto::set_intervals(int index, ::int32_t value) {
  _internal_mutable_intervals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.NoOverlapConstraintProto.intervals)
}
inline void NoOverlapConstraintProto::add_intervals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_intervals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.NoOverlapConstraintProto.intervals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlapConstraintProto::intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.NoOverlapConstraintProto.intervals)
  return _internal_intervals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlapConstraintProto::mutable_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.NoOverlapConstraintProto.intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intervals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlapConstraintProto::_internal_intervals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intervals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlapConstraintProto::_internal_mutable_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intervals_;
}

// -------------------------------------------------------------------

// NoOverlap2DConstraintProto

// repeated int32 x_intervals = 1;
inline int NoOverlap2DConstraintProto::_internal_x_intervals_size() const {
  return _internal_x_intervals().size();
}
inline int NoOverlap2DConstraintProto::x_intervals_size() const {
  return _internal_x_intervals_size();
}
inline void NoOverlap2DConstraintProto::clear_x_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_intervals_.Clear();
}
inline ::int32_t NoOverlap2DConstraintProto::x_intervals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.NoOverlap2DConstraintProto.x_intervals)
  return _internal_x_intervals().Get(index);
}
inline void NoOverlap2DConstraintProto::set_x_intervals(int index, ::int32_t value) {
  _internal_mutable_x_intervals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.NoOverlap2DConstraintProto.x_intervals)
}
inline void NoOverlap2DConstraintProto::add_x_intervals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_x_intervals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.NoOverlap2DConstraintProto.x_intervals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlap2DConstraintProto::x_intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.NoOverlap2DConstraintProto.x_intervals)
  return _internal_x_intervals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlap2DConstraintProto::mutable_x_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.NoOverlap2DConstraintProto.x_intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_x_intervals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlap2DConstraintProto::_internal_x_intervals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_intervals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlap2DConstraintProto::_internal_mutable_x_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.x_intervals_;
}

// repeated int32 y_intervals = 2;
inline int NoOverlap2DConstraintProto::_internal_y_intervals_size() const {
  return _internal_y_intervals().size();
}
inline int NoOverlap2DConstraintProto::y_intervals_size() const {
  return _internal_y_intervals_size();
}
inline void NoOverlap2DConstraintProto::clear_y_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_intervals_.Clear();
}
inline ::int32_t NoOverlap2DConstraintProto::y_intervals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.NoOverlap2DConstraintProto.y_intervals)
  return _internal_y_intervals().Get(index);
}
inline void NoOverlap2DConstraintProto::set_y_intervals(int index, ::int32_t value) {
  _internal_mutable_y_intervals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.NoOverlap2DConstraintProto.y_intervals)
}
inline void NoOverlap2DConstraintProto::add_y_intervals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_y_intervals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.NoOverlap2DConstraintProto.y_intervals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlap2DConstraintProto::y_intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.NoOverlap2DConstraintProto.y_intervals)
  return _internal_y_intervals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlap2DConstraintProto::mutable_y_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.NoOverlap2DConstraintProto.y_intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_y_intervals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& NoOverlap2DConstraintProto::_internal_y_intervals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_intervals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* NoOverlap2DConstraintProto::_internal_mutable_y_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.y_intervals_;
}

// -------------------------------------------------------------------

// CumulativeConstraintProto

// .operations_research.sat.LinearExpressionProto capacity = 1;
inline bool CumulativeConstraintProto::has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capacity_ != nullptr);
  return value;
}
inline void CumulativeConstraintProto::clear_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.capacity_ != nullptr) _impl_.capacity_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::sat::LinearExpressionProto& CumulativeConstraintProto::_internal_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearExpressionProto* p = _impl_.capacity_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearExpressionProto&>(::operations_research::sat::_LinearExpressionProto_default_instance_);
}
inline const ::operations_research::sat::LinearExpressionProto& CumulativeConstraintProto::capacity() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CumulativeConstraintProto.capacity)
  return _internal_capacity();
}
inline void CumulativeConstraintProto::unsafe_arena_set_allocated_capacity(::operations_research::sat::LinearExpressionProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capacity_);
  }
  _impl_.capacity_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CumulativeConstraintProto.capacity)
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::release_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* released = _impl_.capacity_;
  _impl_.capacity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::unsafe_arena_release_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CumulativeConstraintProto.capacity)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::LinearExpressionProto* temp = _impl_.capacity_;
  _impl_.capacity_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::_internal_mutable_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.capacity_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearExpressionProto>(GetArena());
    _impl_.capacity_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(p);
  }
  return _impl_.capacity_;
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::mutable_capacity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearExpressionProto* _msg = _internal_mutable_capacity();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CumulativeConstraintProto.capacity)
  return _msg;
}
inline void CumulativeConstraintProto::set_allocated_capacity(::operations_research::sat::LinearExpressionProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(_impl_.capacity_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capacity_ = reinterpret_cast<::operations_research::sat::LinearExpressionProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CumulativeConstraintProto.capacity)
}

// repeated int32 intervals = 2;
inline int CumulativeConstraintProto::_internal_intervals_size() const {
  return _internal_intervals().size();
}
inline int CumulativeConstraintProto::intervals_size() const {
  return _internal_intervals_size();
}
inline void CumulativeConstraintProto::clear_intervals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.intervals_.Clear();
}
inline ::int32_t CumulativeConstraintProto::intervals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CumulativeConstraintProto.intervals)
  return _internal_intervals().Get(index);
}
inline void CumulativeConstraintProto::set_intervals(int index, ::int32_t value) {
  _internal_mutable_intervals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CumulativeConstraintProto.intervals)
}
inline void CumulativeConstraintProto::add_intervals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_intervals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CumulativeConstraintProto.intervals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CumulativeConstraintProto::intervals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CumulativeConstraintProto.intervals)
  return _internal_intervals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CumulativeConstraintProto::mutable_intervals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CumulativeConstraintProto.intervals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_intervals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CumulativeConstraintProto::_internal_intervals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.intervals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CumulativeConstraintProto::_internal_mutable_intervals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.intervals_;
}

// repeated .operations_research.sat.LinearExpressionProto demands = 3;
inline int CumulativeConstraintProto::_internal_demands_size() const {
  return _internal_demands().size();
}
inline int CumulativeConstraintProto::demands_size() const {
  return _internal_demands_size();
}
inline void CumulativeConstraintProto::clear_demands() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.demands_.Clear();
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::mutable_demands(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CumulativeConstraintProto.demands)
  return _internal_mutable_demands()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* CumulativeConstraintProto::mutable_demands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CumulativeConstraintProto.demands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_demands();
}
inline const ::operations_research::sat::LinearExpressionProto& CumulativeConstraintProto::demands(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CumulativeConstraintProto.demands)
  return _internal_demands().Get(index);
}
inline ::operations_research::sat::LinearExpressionProto* CumulativeConstraintProto::add_demands() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearExpressionProto* _add = _internal_mutable_demands()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CumulativeConstraintProto.demands)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& CumulativeConstraintProto::demands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CumulativeConstraintProto.demands)
  return _internal_demands();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>&
CumulativeConstraintProto::_internal_demands() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.demands_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>*
CumulativeConstraintProto::_internal_mutable_demands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.demands_;
}

// -------------------------------------------------------------------

// ReservoirConstraintProto

// int64 min_level = 1;
inline void ReservoirConstraintProto::clear_min_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_level_ = ::int64_t{0};
}
inline ::int64_t ReservoirConstraintProto::min_level() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ReservoirConstraintProto.min_level)
  return _internal_min_level();
}
inline void ReservoirConstraintProto::set_min_level(::int64_t value) {
  _internal_set_min_level(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ReservoirConstraintProto.min_level)
}
inline ::int64_t ReservoirConstraintProto::_internal_min_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_level_;
}
inline void ReservoirConstraintProto::_internal_set_min_level(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_level_ = value;
}

// int64 max_level = 2;
inline void ReservoirConstraintProto::clear_max_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_level_ = ::int64_t{0};
}
inline ::int64_t ReservoirConstraintProto::max_level() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ReservoirConstraintProto.max_level)
  return _internal_max_level();
}
inline void ReservoirConstraintProto::set_max_level(::int64_t value) {
  _internal_set_max_level(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ReservoirConstraintProto.max_level)
}
inline ::int64_t ReservoirConstraintProto::_internal_max_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_level_;
}
inline void ReservoirConstraintProto::_internal_set_max_level(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_level_ = value;
}

// repeated .operations_research.sat.LinearExpressionProto time_exprs = 3;
inline int ReservoirConstraintProto::_internal_time_exprs_size() const {
  return _internal_time_exprs().size();
}
inline int ReservoirConstraintProto::time_exprs_size() const {
  return _internal_time_exprs_size();
}
inline void ReservoirConstraintProto::clear_time_exprs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_exprs_.Clear();
}
inline ::operations_research::sat::LinearExpressionProto* ReservoirConstraintProto::mutable_time_exprs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ReservoirConstraintProto.time_exprs)
  return _internal_mutable_time_exprs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* ReservoirConstraintProto::mutable_time_exprs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ReservoirConstraintProto.time_exprs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_time_exprs();
}
inline const ::operations_research::sat::LinearExpressionProto& ReservoirConstraintProto::time_exprs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ReservoirConstraintProto.time_exprs)
  return _internal_time_exprs().Get(index);
}
inline ::operations_research::sat::LinearExpressionProto* ReservoirConstraintProto::add_time_exprs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearExpressionProto* _add = _internal_mutable_time_exprs()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.ReservoirConstraintProto.time_exprs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& ReservoirConstraintProto::time_exprs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ReservoirConstraintProto.time_exprs)
  return _internal_time_exprs();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>&
ReservoirConstraintProto::_internal_time_exprs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_exprs_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>*
ReservoirConstraintProto::_internal_mutable_time_exprs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.time_exprs_;
}

// repeated .operations_research.sat.LinearExpressionProto level_changes = 6;
inline int ReservoirConstraintProto::_internal_level_changes_size() const {
  return _internal_level_changes().size();
}
inline int ReservoirConstraintProto::level_changes_size() const {
  return _internal_level_changes_size();
}
inline void ReservoirConstraintProto::clear_level_changes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.level_changes_.Clear();
}
inline ::operations_research::sat::LinearExpressionProto* ReservoirConstraintProto::mutable_level_changes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ReservoirConstraintProto.level_changes)
  return _internal_mutable_level_changes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>* ReservoirConstraintProto::mutable_level_changes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ReservoirConstraintProto.level_changes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_level_changes();
}
inline const ::operations_research::sat::LinearExpressionProto& ReservoirConstraintProto::level_changes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ReservoirConstraintProto.level_changes)
  return _internal_level_changes().Get(index);
}
inline ::operations_research::sat::LinearExpressionProto* ReservoirConstraintProto::add_level_changes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearExpressionProto* _add = _internal_mutable_level_changes()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.ReservoirConstraintProto.level_changes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>& ReservoirConstraintProto::level_changes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ReservoirConstraintProto.level_changes)
  return _internal_level_changes();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>&
ReservoirConstraintProto::_internal_level_changes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.level_changes_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearExpressionProto>*
ReservoirConstraintProto::_internal_mutable_level_changes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.level_changes_;
}

// repeated int32 active_literals = 5;
inline int ReservoirConstraintProto::_internal_active_literals_size() const {
  return _internal_active_literals().size();
}
inline int ReservoirConstraintProto::active_literals_size() const {
  return _internal_active_literals_size();
}
inline void ReservoirConstraintProto::clear_active_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_literals_.Clear();
}
inline ::int32_t ReservoirConstraintProto::active_literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ReservoirConstraintProto.active_literals)
  return _internal_active_literals().Get(index);
}
inline void ReservoirConstraintProto::set_active_literals(int index, ::int32_t value) {
  _internal_mutable_active_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ReservoirConstraintProto.active_literals)
}
inline void ReservoirConstraintProto::add_active_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_active_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.ReservoirConstraintProto.active_literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ReservoirConstraintProto::active_literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ReservoirConstraintProto.active_literals)
  return _internal_active_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ReservoirConstraintProto::mutable_active_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ReservoirConstraintProto.active_literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_active_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ReservoirConstraintProto::_internal_active_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ReservoirConstraintProto::_internal_mutable_active_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.active_literals_;
}

// -------------------------------------------------------------------

// CircuitConstraintProto

// repeated int32 tails = 3;
inline int CircuitConstraintProto::_internal_tails_size() const {
  return _internal_tails().size();
}
inline int CircuitConstraintProto::tails_size() const {
  return _internal_tails_size();
}
inline void CircuitConstraintProto::clear_tails() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tails_.Clear();
}
inline ::int32_t CircuitConstraintProto::tails(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CircuitConstraintProto.tails)
  return _internal_tails().Get(index);
}
inline void CircuitConstraintProto::set_tails(int index, ::int32_t value) {
  _internal_mutable_tails()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CircuitConstraintProto.tails)
}
inline void CircuitConstraintProto::add_tails(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tails()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CircuitConstraintProto.tails)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::tails() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CircuitConstraintProto.tails)
  return _internal_tails();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::mutable_tails()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CircuitConstraintProto.tails)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tails();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::_internal_tails()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tails_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::_internal_mutable_tails() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tails_;
}

// repeated int32 heads = 4;
inline int CircuitConstraintProto::_internal_heads_size() const {
  return _internal_heads().size();
}
inline int CircuitConstraintProto::heads_size() const {
  return _internal_heads_size();
}
inline void CircuitConstraintProto::clear_heads() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heads_.Clear();
}
inline ::int32_t CircuitConstraintProto::heads(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CircuitConstraintProto.heads)
  return _internal_heads().Get(index);
}
inline void CircuitConstraintProto::set_heads(int index, ::int32_t value) {
  _internal_mutable_heads()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CircuitConstraintProto.heads)
}
inline void CircuitConstraintProto::add_heads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_heads()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CircuitConstraintProto.heads)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::heads() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CircuitConstraintProto.heads)
  return _internal_heads();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::mutable_heads()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CircuitConstraintProto.heads)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_heads();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::_internal_heads()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heads_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::_internal_mutable_heads() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.heads_;
}

// repeated int32 literals = 5;
inline int CircuitConstraintProto::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int CircuitConstraintProto::literals_size() const {
  return _internal_literals_size();
}
inline void CircuitConstraintProto::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t CircuitConstraintProto::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CircuitConstraintProto.literals)
  return _internal_literals().Get(index);
}
inline void CircuitConstraintProto::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CircuitConstraintProto.literals)
}
inline void CircuitConstraintProto::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CircuitConstraintProto.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CircuitConstraintProto.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CircuitConstraintProto.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CircuitConstraintProto::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CircuitConstraintProto::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// -------------------------------------------------------------------

// RoutesConstraintProto

// repeated int32 tails = 1;
inline int RoutesConstraintProto::_internal_tails_size() const {
  return _internal_tails().size();
}
inline int RoutesConstraintProto::tails_size() const {
  return _internal_tails_size();
}
inline void RoutesConstraintProto::clear_tails() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tails_.Clear();
}
inline ::int32_t RoutesConstraintProto::tails(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.RoutesConstraintProto.tails)
  return _internal_tails().Get(index);
}
inline void RoutesConstraintProto::set_tails(int index, ::int32_t value) {
  _internal_mutable_tails()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.RoutesConstraintProto.tails)
}
inline void RoutesConstraintProto::add_tails(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_tails()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.RoutesConstraintProto.tails)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::tails() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.RoutesConstraintProto.tails)
  return _internal_tails();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::mutable_tails()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.RoutesConstraintProto.tails)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tails();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::_internal_tails()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tails_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::_internal_mutable_tails() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tails_;
}

// repeated int32 heads = 2;
inline int RoutesConstraintProto::_internal_heads_size() const {
  return _internal_heads().size();
}
inline int RoutesConstraintProto::heads_size() const {
  return _internal_heads_size();
}
inline void RoutesConstraintProto::clear_heads() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heads_.Clear();
}
inline ::int32_t RoutesConstraintProto::heads(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.RoutesConstraintProto.heads)
  return _internal_heads().Get(index);
}
inline void RoutesConstraintProto::set_heads(int index, ::int32_t value) {
  _internal_mutable_heads()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.RoutesConstraintProto.heads)
}
inline void RoutesConstraintProto::add_heads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_heads()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.RoutesConstraintProto.heads)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::heads() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.RoutesConstraintProto.heads)
  return _internal_heads();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::mutable_heads()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.RoutesConstraintProto.heads)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_heads();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::_internal_heads()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heads_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::_internal_mutable_heads() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.heads_;
}

// repeated int32 literals = 3;
inline int RoutesConstraintProto::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int RoutesConstraintProto::literals_size() const {
  return _internal_literals_size();
}
inline void RoutesConstraintProto::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t RoutesConstraintProto::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.RoutesConstraintProto.literals)
  return _internal_literals().Get(index);
}
inline void RoutesConstraintProto::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.RoutesConstraintProto.literals)
}
inline void RoutesConstraintProto::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.RoutesConstraintProto.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.RoutesConstraintProto.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.RoutesConstraintProto.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// repeated int32 demands = 4;
inline int RoutesConstraintProto::_internal_demands_size() const {
  return _internal_demands().size();
}
inline int RoutesConstraintProto::demands_size() const {
  return _internal_demands_size();
}
inline void RoutesConstraintProto::clear_demands() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.demands_.Clear();
}
inline ::int32_t RoutesConstraintProto::demands(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.RoutesConstraintProto.demands)
  return _internal_demands().Get(index);
}
inline void RoutesConstraintProto::set_demands(int index, ::int32_t value) {
  _internal_mutable_demands()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.RoutesConstraintProto.demands)
}
inline void RoutesConstraintProto::add_demands(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_demands()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.RoutesConstraintProto.demands)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::demands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.RoutesConstraintProto.demands)
  return _internal_demands();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::mutable_demands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.RoutesConstraintProto.demands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_demands();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RoutesConstraintProto::_internal_demands()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.demands_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RoutesConstraintProto::_internal_mutable_demands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.demands_;
}

// int64 capacity = 5;
inline void RoutesConstraintProto::clear_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capacity_ = ::int64_t{0};
}
inline ::int64_t RoutesConstraintProto::capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.RoutesConstraintProto.capacity)
  return _internal_capacity();
}
inline void RoutesConstraintProto::set_capacity(::int64_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.RoutesConstraintProto.capacity)
}
inline ::int64_t RoutesConstraintProto::_internal_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_;
}
inline void RoutesConstraintProto::_internal_set_capacity(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.capacity_ = value;
}

// -------------------------------------------------------------------

// TableConstraintProto

// repeated int32 vars = 1;
inline int TableConstraintProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int TableConstraintProto::vars_size() const {
  return _internal_vars_size();
}
inline void TableConstraintProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t TableConstraintProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.TableConstraintProto.vars)
  return _internal_vars().Get(index);
}
inline void TableConstraintProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.TableConstraintProto.vars)
}
inline void TableConstraintProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.TableConstraintProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TableConstraintProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.TableConstraintProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* TableConstraintProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.TableConstraintProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& TableConstraintProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* TableConstraintProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated int64 values = 2;
inline int TableConstraintProto::_internal_values_size() const {
  return _internal_values().size();
}
inline int TableConstraintProto::values_size() const {
  return _internal_values_size();
}
inline void TableConstraintProto::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::int64_t TableConstraintProto::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.TableConstraintProto.values)
  return _internal_values().Get(index);
}
inline void TableConstraintProto::set_values(int index, ::int64_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.TableConstraintProto.values)
}
inline void TableConstraintProto::add_values(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.TableConstraintProto.values)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TableConstraintProto::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.TableConstraintProto.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int64_t>* TableConstraintProto::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.TableConstraintProto.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& TableConstraintProto::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* TableConstraintProto::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// bool negated = 3;
inline void TableConstraintProto::clear_negated() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.negated_ = false;
}
inline bool TableConstraintProto::negated() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.TableConstraintProto.negated)
  return _internal_negated();
}
inline void TableConstraintProto::set_negated(bool value) {
  _internal_set_negated(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.TableConstraintProto.negated)
}
inline bool TableConstraintProto::_internal_negated() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.negated_;
}
inline void TableConstraintProto::_internal_set_negated(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.negated_ = value;
}

// -------------------------------------------------------------------

// InverseConstraintProto

// repeated int32 f_direct = 1;
inline int InverseConstraintProto::_internal_f_direct_size() const {
  return _internal_f_direct().size();
}
inline int InverseConstraintProto::f_direct_size() const {
  return _internal_f_direct_size();
}
inline void InverseConstraintProto::clear_f_direct() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.f_direct_.Clear();
}
inline ::int32_t InverseConstraintProto::f_direct(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.InverseConstraintProto.f_direct)
  return _internal_f_direct().Get(index);
}
inline void InverseConstraintProto::set_f_direct(int index, ::int32_t value) {
  _internal_mutable_f_direct()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.InverseConstraintProto.f_direct)
}
inline void InverseConstraintProto::add_f_direct(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_f_direct()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.InverseConstraintProto.f_direct)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& InverseConstraintProto::f_direct() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.InverseConstraintProto.f_direct)
  return _internal_f_direct();
}
inline ::google::protobuf::RepeatedField<::int32_t>* InverseConstraintProto::mutable_f_direct()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.InverseConstraintProto.f_direct)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_f_direct();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& InverseConstraintProto::_internal_f_direct()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.f_direct_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* InverseConstraintProto::_internal_mutable_f_direct() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.f_direct_;
}

// repeated int32 f_inverse = 2;
inline int InverseConstraintProto::_internal_f_inverse_size() const {
  return _internal_f_inverse().size();
}
inline int InverseConstraintProto::f_inverse_size() const {
  return _internal_f_inverse_size();
}
inline void InverseConstraintProto::clear_f_inverse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.f_inverse_.Clear();
}
inline ::int32_t InverseConstraintProto::f_inverse(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.InverseConstraintProto.f_inverse)
  return _internal_f_inverse().Get(index);
}
inline void InverseConstraintProto::set_f_inverse(int index, ::int32_t value) {
  _internal_mutable_f_inverse()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.InverseConstraintProto.f_inverse)
}
inline void InverseConstraintProto::add_f_inverse(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_f_inverse()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.InverseConstraintProto.f_inverse)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& InverseConstraintProto::f_inverse() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.InverseConstraintProto.f_inverse)
  return _internal_f_inverse();
}
inline ::google::protobuf::RepeatedField<::int32_t>* InverseConstraintProto::mutable_f_inverse()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.InverseConstraintProto.f_inverse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_f_inverse();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& InverseConstraintProto::_internal_f_inverse()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.f_inverse_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* InverseConstraintProto::_internal_mutable_f_inverse() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.f_inverse_;
}

// -------------------------------------------------------------------

// AutomatonConstraintProto

// int64 starting_state = 2;
inline void AutomatonConstraintProto::clear_starting_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.starting_state_ = ::int64_t{0};
}
inline ::int64_t AutomatonConstraintProto::starting_state() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.starting_state)
  return _internal_starting_state();
}
inline void AutomatonConstraintProto::set_starting_state(::int64_t value) {
  _internal_set_starting_state(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.starting_state)
}
inline ::int64_t AutomatonConstraintProto::_internal_starting_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.starting_state_;
}
inline void AutomatonConstraintProto::_internal_set_starting_state(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.starting_state_ = value;
}

// repeated int64 final_states = 3;
inline int AutomatonConstraintProto::_internal_final_states_size() const {
  return _internal_final_states().size();
}
inline int AutomatonConstraintProto::final_states_size() const {
  return _internal_final_states_size();
}
inline void AutomatonConstraintProto::clear_final_states() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.final_states_.Clear();
}
inline ::int64_t AutomatonConstraintProto::final_states(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.final_states)
  return _internal_final_states().Get(index);
}
inline void AutomatonConstraintProto::set_final_states(int index, ::int64_t value) {
  _internal_mutable_final_states()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.final_states)
}
inline void AutomatonConstraintProto::add_final_states(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_final_states()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.AutomatonConstraintProto.final_states)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::final_states() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AutomatonConstraintProto.final_states)
  return _internal_final_states();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::mutable_final_states()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AutomatonConstraintProto.final_states)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_final_states();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::_internal_final_states()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.final_states_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::_internal_mutable_final_states() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.final_states_;
}

// repeated int64 transition_tail = 4;
inline int AutomatonConstraintProto::_internal_transition_tail_size() const {
  return _internal_transition_tail().size();
}
inline int AutomatonConstraintProto::transition_tail_size() const {
  return _internal_transition_tail_size();
}
inline void AutomatonConstraintProto::clear_transition_tail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transition_tail_.Clear();
}
inline ::int64_t AutomatonConstraintProto::transition_tail(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.transition_tail)
  return _internal_transition_tail().Get(index);
}
inline void AutomatonConstraintProto::set_transition_tail(int index, ::int64_t value) {
  _internal_mutable_transition_tail()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.transition_tail)
}
inline void AutomatonConstraintProto::add_transition_tail(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_transition_tail()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.AutomatonConstraintProto.transition_tail)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::transition_tail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AutomatonConstraintProto.transition_tail)
  return _internal_transition_tail();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::mutable_transition_tail()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AutomatonConstraintProto.transition_tail)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transition_tail();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::_internal_transition_tail()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transition_tail_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::_internal_mutable_transition_tail() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transition_tail_;
}

// repeated int64 transition_head = 5;
inline int AutomatonConstraintProto::_internal_transition_head_size() const {
  return _internal_transition_head().size();
}
inline int AutomatonConstraintProto::transition_head_size() const {
  return _internal_transition_head_size();
}
inline void AutomatonConstraintProto::clear_transition_head() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transition_head_.Clear();
}
inline ::int64_t AutomatonConstraintProto::transition_head(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.transition_head)
  return _internal_transition_head().Get(index);
}
inline void AutomatonConstraintProto::set_transition_head(int index, ::int64_t value) {
  _internal_mutable_transition_head()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.transition_head)
}
inline void AutomatonConstraintProto::add_transition_head(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_transition_head()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.AutomatonConstraintProto.transition_head)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::transition_head() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AutomatonConstraintProto.transition_head)
  return _internal_transition_head();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::mutable_transition_head()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AutomatonConstraintProto.transition_head)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transition_head();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::_internal_transition_head()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transition_head_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::_internal_mutable_transition_head() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transition_head_;
}

// repeated int64 transition_label = 6;
inline int AutomatonConstraintProto::_internal_transition_label_size() const {
  return _internal_transition_label().size();
}
inline int AutomatonConstraintProto::transition_label_size() const {
  return _internal_transition_label_size();
}
inline void AutomatonConstraintProto::clear_transition_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transition_label_.Clear();
}
inline ::int64_t AutomatonConstraintProto::transition_label(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.transition_label)
  return _internal_transition_label().Get(index);
}
inline void AutomatonConstraintProto::set_transition_label(int index, ::int64_t value) {
  _internal_mutable_transition_label()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.transition_label)
}
inline void AutomatonConstraintProto::add_transition_label(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_transition_label()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.AutomatonConstraintProto.transition_label)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::transition_label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AutomatonConstraintProto.transition_label)
  return _internal_transition_label();
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::mutable_transition_label()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AutomatonConstraintProto.transition_label)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transition_label();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& AutomatonConstraintProto::_internal_transition_label()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transition_label_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* AutomatonConstraintProto::_internal_mutable_transition_label() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transition_label_;
}

// repeated int32 vars = 7;
inline int AutomatonConstraintProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int AutomatonConstraintProto::vars_size() const {
  return _internal_vars_size();
}
inline void AutomatonConstraintProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t AutomatonConstraintProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.AutomatonConstraintProto.vars)
  return _internal_vars().Get(index);
}
inline void AutomatonConstraintProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.AutomatonConstraintProto.vars)
}
inline void AutomatonConstraintProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.AutomatonConstraintProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AutomatonConstraintProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.AutomatonConstraintProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* AutomatonConstraintProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.AutomatonConstraintProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& AutomatonConstraintProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* AutomatonConstraintProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// -------------------------------------------------------------------

// ListOfVariablesProto

// repeated int32 vars = 1;
inline int ListOfVariablesProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int ListOfVariablesProto::vars_size() const {
  return _internal_vars_size();
}
inline void ListOfVariablesProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t ListOfVariablesProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ListOfVariablesProto.vars)
  return _internal_vars().Get(index);
}
inline void ListOfVariablesProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ListOfVariablesProto.vars)
}
inline void ListOfVariablesProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.ListOfVariablesProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ListOfVariablesProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ListOfVariablesProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ListOfVariablesProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ListOfVariablesProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ListOfVariablesProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ListOfVariablesProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// -------------------------------------------------------------------

// ConstraintProto

// string name = 1;
inline void ConstraintProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ConstraintProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ConstraintProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.ConstraintProto.name)
}
inline std::string* ConstraintProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.name)
  return _s;
}
inline const std::string& ConstraintProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ConstraintProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ConstraintProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ConstraintProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.name)
  return _impl_.name_.Release();
}
inline void ConstraintProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.ConstraintProto.name)
}

// repeated int32 enforcement_literal = 2;
inline int ConstraintProto::_internal_enforcement_literal_size() const {
  return _internal_enforcement_literal().size();
}
inline int ConstraintProto::enforcement_literal_size() const {
  return _internal_enforcement_literal_size();
}
inline void ConstraintProto::clear_enforcement_literal() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enforcement_literal_.Clear();
}
inline ::int32_t ConstraintProto::enforcement_literal(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.enforcement_literal)
  return _internal_enforcement_literal().Get(index);
}
inline void ConstraintProto::set_enforcement_literal(int index, ::int32_t value) {
  _internal_mutable_enforcement_literal()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.ConstraintProto.enforcement_literal)
}
inline void ConstraintProto::add_enforcement_literal(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_enforcement_literal()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.ConstraintProto.enforcement_literal)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ConstraintProto::enforcement_literal() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.ConstraintProto.enforcement_literal)
  return _internal_enforcement_literal();
}
inline ::google::protobuf::RepeatedField<::int32_t>* ConstraintProto::mutable_enforcement_literal()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.ConstraintProto.enforcement_literal)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_enforcement_literal();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& ConstraintProto::_internal_enforcement_literal()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enforcement_literal_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* ConstraintProto::_internal_mutable_enforcement_literal() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.enforcement_literal_;
}

// .operations_research.sat.BoolArgumentProto bool_or = 3;
inline bool ConstraintProto::has_bool_or() const {
  return constraint_case() == kBoolOr;
}
inline bool ConstraintProto::_internal_has_bool_or() const {
  return constraint_case() == kBoolOr;
}
inline void ConstraintProto::set_has_bool_or() {
  _impl_._oneof_case_[0] = kBoolOr;
}
inline void ConstraintProto::clear_bool_or() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kBoolOr) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.bool_or_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::release_bool_or() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.bool_or)
  if (constraint_case() == kBoolOr) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_or_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.bool_or_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::_internal_bool_or() const {
  return constraint_case() == kBoolOr ? *_impl_.constraint_.bool_or_ : reinterpret_cast<::operations_research::sat::BoolArgumentProto&>(::operations_research::sat::_BoolArgumentProto_default_instance_);
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::bool_or() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.bool_or)
  return _internal_bool_or();
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::unsafe_arena_release_bool_or() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.bool_or)
  if (constraint_case() == kBoolOr) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_or_;
    _impl_.constraint_.bool_or_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_bool_or(::operations_research::sat::BoolArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_bool_or();
    _impl_.constraint_.bool_or_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.bool_or)
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::_internal_mutable_bool_or() {
  if (constraint_case() != kBoolOr) {
    clear_constraint();
    set_has_bool_or();
    _impl_.constraint_.bool_or_ = CreateMaybeMessage<::operations_research::sat::BoolArgumentProto>(GetArena());
  }
  return _impl_.constraint_.bool_or_;
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::mutable_bool_or() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BoolArgumentProto* _msg = _internal_mutable_bool_or();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.bool_or)
  return _msg;
}

// .operations_research.sat.BoolArgumentProto bool_and = 4;
inline bool ConstraintProto::has_bool_and() const {
  return constraint_case() == kBoolAnd;
}
inline bool ConstraintProto::_internal_has_bool_and() const {
  return constraint_case() == kBoolAnd;
}
inline void ConstraintProto::set_has_bool_and() {
  _impl_._oneof_case_[0] = kBoolAnd;
}
inline void ConstraintProto::clear_bool_and() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kBoolAnd) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.bool_and_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::release_bool_and() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.bool_and)
  if (constraint_case() == kBoolAnd) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_and_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.bool_and_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::_internal_bool_and() const {
  return constraint_case() == kBoolAnd ? *_impl_.constraint_.bool_and_ : reinterpret_cast<::operations_research::sat::BoolArgumentProto&>(::operations_research::sat::_BoolArgumentProto_default_instance_);
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::bool_and() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.bool_and)
  return _internal_bool_and();
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::unsafe_arena_release_bool_and() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.bool_and)
  if (constraint_case() == kBoolAnd) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_and_;
    _impl_.constraint_.bool_and_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_bool_and(::operations_research::sat::BoolArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_bool_and();
    _impl_.constraint_.bool_and_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.bool_and)
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::_internal_mutable_bool_and() {
  if (constraint_case() != kBoolAnd) {
    clear_constraint();
    set_has_bool_and();
    _impl_.constraint_.bool_and_ = CreateMaybeMessage<::operations_research::sat::BoolArgumentProto>(GetArena());
  }
  return _impl_.constraint_.bool_and_;
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::mutable_bool_and() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BoolArgumentProto* _msg = _internal_mutable_bool_and();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.bool_and)
  return _msg;
}

// .operations_research.sat.BoolArgumentProto at_most_one = 26;
inline bool ConstraintProto::has_at_most_one() const {
  return constraint_case() == kAtMostOne;
}
inline bool ConstraintProto::_internal_has_at_most_one() const {
  return constraint_case() == kAtMostOne;
}
inline void ConstraintProto::set_has_at_most_one() {
  _impl_._oneof_case_[0] = kAtMostOne;
}
inline void ConstraintProto::clear_at_most_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kAtMostOne) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.at_most_one_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::release_at_most_one() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.at_most_one)
  if (constraint_case() == kAtMostOne) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.at_most_one_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.at_most_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::_internal_at_most_one() const {
  return constraint_case() == kAtMostOne ? *_impl_.constraint_.at_most_one_ : reinterpret_cast<::operations_research::sat::BoolArgumentProto&>(::operations_research::sat::_BoolArgumentProto_default_instance_);
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::at_most_one() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.at_most_one)
  return _internal_at_most_one();
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::unsafe_arena_release_at_most_one() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.at_most_one)
  if (constraint_case() == kAtMostOne) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.at_most_one_;
    _impl_.constraint_.at_most_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_at_most_one(::operations_research::sat::BoolArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_at_most_one();
    _impl_.constraint_.at_most_one_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.at_most_one)
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::_internal_mutable_at_most_one() {
  if (constraint_case() != kAtMostOne) {
    clear_constraint();
    set_has_at_most_one();
    _impl_.constraint_.at_most_one_ = CreateMaybeMessage<::operations_research::sat::BoolArgumentProto>(GetArena());
  }
  return _impl_.constraint_.at_most_one_;
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::mutable_at_most_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BoolArgumentProto* _msg = _internal_mutable_at_most_one();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.at_most_one)
  return _msg;
}

// .operations_research.sat.BoolArgumentProto exactly_one = 29;
inline bool ConstraintProto::has_exactly_one() const {
  return constraint_case() == kExactlyOne;
}
inline bool ConstraintProto::_internal_has_exactly_one() const {
  return constraint_case() == kExactlyOne;
}
inline void ConstraintProto::set_has_exactly_one() {
  _impl_._oneof_case_[0] = kExactlyOne;
}
inline void ConstraintProto::clear_exactly_one() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kExactlyOne) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.exactly_one_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::release_exactly_one() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.exactly_one)
  if (constraint_case() == kExactlyOne) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.exactly_one_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.exactly_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::_internal_exactly_one() const {
  return constraint_case() == kExactlyOne ? *_impl_.constraint_.exactly_one_ : reinterpret_cast<::operations_research::sat::BoolArgumentProto&>(::operations_research::sat::_BoolArgumentProto_default_instance_);
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::exactly_one() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.exactly_one)
  return _internal_exactly_one();
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::unsafe_arena_release_exactly_one() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.exactly_one)
  if (constraint_case() == kExactlyOne) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.exactly_one_;
    _impl_.constraint_.exactly_one_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_exactly_one(::operations_research::sat::BoolArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_exactly_one();
    _impl_.constraint_.exactly_one_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.exactly_one)
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::_internal_mutable_exactly_one() {
  if (constraint_case() != kExactlyOne) {
    clear_constraint();
    set_has_exactly_one();
    _impl_.constraint_.exactly_one_ = CreateMaybeMessage<::operations_research::sat::BoolArgumentProto>(GetArena());
  }
  return _impl_.constraint_.exactly_one_;
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::mutable_exactly_one() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BoolArgumentProto* _msg = _internal_mutable_exactly_one();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.exactly_one)
  return _msg;
}

// .operations_research.sat.BoolArgumentProto bool_xor = 5;
inline bool ConstraintProto::has_bool_xor() const {
  return constraint_case() == kBoolXor;
}
inline bool ConstraintProto::_internal_has_bool_xor() const {
  return constraint_case() == kBoolXor;
}
inline void ConstraintProto::set_has_bool_xor() {
  _impl_._oneof_case_[0] = kBoolXor;
}
inline void ConstraintProto::clear_bool_xor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kBoolXor) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.bool_xor_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::release_bool_xor() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.bool_xor)
  if (constraint_case() == kBoolXor) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_xor_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.bool_xor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::_internal_bool_xor() const {
  return constraint_case() == kBoolXor ? *_impl_.constraint_.bool_xor_ : reinterpret_cast<::operations_research::sat::BoolArgumentProto&>(::operations_research::sat::_BoolArgumentProto_default_instance_);
}
inline const ::operations_research::sat::BoolArgumentProto& ConstraintProto::bool_xor() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.bool_xor)
  return _internal_bool_xor();
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::unsafe_arena_release_bool_xor() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.bool_xor)
  if (constraint_case() == kBoolXor) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.bool_xor_;
    _impl_.constraint_.bool_xor_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_bool_xor(::operations_research::sat::BoolArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_bool_xor();
    _impl_.constraint_.bool_xor_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.bool_xor)
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::_internal_mutable_bool_xor() {
  if (constraint_case() != kBoolXor) {
    clear_constraint();
    set_has_bool_xor();
    _impl_.constraint_.bool_xor_ = CreateMaybeMessage<::operations_research::sat::BoolArgumentProto>(GetArena());
  }
  return _impl_.constraint_.bool_xor_;
}
inline ::operations_research::sat::BoolArgumentProto* ConstraintProto::mutable_bool_xor() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BoolArgumentProto* _msg = _internal_mutable_bool_xor();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.bool_xor)
  return _msg;
}

// .operations_research.sat.LinearArgumentProto int_div = 7;
inline bool ConstraintProto::has_int_div() const {
  return constraint_case() == kIntDiv;
}
inline bool ConstraintProto::_internal_has_int_div() const {
  return constraint_case() == kIntDiv;
}
inline void ConstraintProto::set_has_int_div() {
  _impl_._oneof_case_[0] = kIntDiv;
}
inline void ConstraintProto::clear_int_div() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kIntDiv) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.int_div_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::release_int_div() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.int_div)
  if (constraint_case() == kIntDiv) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_div_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.int_div_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::_internal_int_div() const {
  return constraint_case() == kIntDiv ? *_impl_.constraint_.int_div_ : reinterpret_cast<::operations_research::sat::LinearArgumentProto&>(::operations_research::sat::_LinearArgumentProto_default_instance_);
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::int_div() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.int_div)
  return _internal_int_div();
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::unsafe_arena_release_int_div() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.int_div)
  if (constraint_case() == kIntDiv) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_div_;
    _impl_.constraint_.int_div_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_int_div(::operations_research::sat::LinearArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_int_div();
    _impl_.constraint_.int_div_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.int_div)
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::_internal_mutable_int_div() {
  if (constraint_case() != kIntDiv) {
    clear_constraint();
    set_has_int_div();
    _impl_.constraint_.int_div_ = CreateMaybeMessage<::operations_research::sat::LinearArgumentProto>(GetArena());
  }
  return _impl_.constraint_.int_div_;
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::mutable_int_div() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearArgumentProto* _msg = _internal_mutable_int_div();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.int_div)
  return _msg;
}

// .operations_research.sat.LinearArgumentProto int_mod = 8;
inline bool ConstraintProto::has_int_mod() const {
  return constraint_case() == kIntMod;
}
inline bool ConstraintProto::_internal_has_int_mod() const {
  return constraint_case() == kIntMod;
}
inline void ConstraintProto::set_has_int_mod() {
  _impl_._oneof_case_[0] = kIntMod;
}
inline void ConstraintProto::clear_int_mod() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kIntMod) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.int_mod_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::release_int_mod() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.int_mod)
  if (constraint_case() == kIntMod) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_mod_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.int_mod_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::_internal_int_mod() const {
  return constraint_case() == kIntMod ? *_impl_.constraint_.int_mod_ : reinterpret_cast<::operations_research::sat::LinearArgumentProto&>(::operations_research::sat::_LinearArgumentProto_default_instance_);
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::int_mod() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.int_mod)
  return _internal_int_mod();
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::unsafe_arena_release_int_mod() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.int_mod)
  if (constraint_case() == kIntMod) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_mod_;
    _impl_.constraint_.int_mod_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_int_mod(::operations_research::sat::LinearArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_int_mod();
    _impl_.constraint_.int_mod_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.int_mod)
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::_internal_mutable_int_mod() {
  if (constraint_case() != kIntMod) {
    clear_constraint();
    set_has_int_mod();
    _impl_.constraint_.int_mod_ = CreateMaybeMessage<::operations_research::sat::LinearArgumentProto>(GetArena());
  }
  return _impl_.constraint_.int_mod_;
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::mutable_int_mod() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearArgumentProto* _msg = _internal_mutable_int_mod();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.int_mod)
  return _msg;
}

// .operations_research.sat.LinearArgumentProto int_prod = 11;
inline bool ConstraintProto::has_int_prod() const {
  return constraint_case() == kIntProd;
}
inline bool ConstraintProto::_internal_has_int_prod() const {
  return constraint_case() == kIntProd;
}
inline void ConstraintProto::set_has_int_prod() {
  _impl_._oneof_case_[0] = kIntProd;
}
inline void ConstraintProto::clear_int_prod() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kIntProd) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.int_prod_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::release_int_prod() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.int_prod)
  if (constraint_case() == kIntProd) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_prod_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.int_prod_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::_internal_int_prod() const {
  return constraint_case() == kIntProd ? *_impl_.constraint_.int_prod_ : reinterpret_cast<::operations_research::sat::LinearArgumentProto&>(::operations_research::sat::_LinearArgumentProto_default_instance_);
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::int_prod() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.int_prod)
  return _internal_int_prod();
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::unsafe_arena_release_int_prod() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.int_prod)
  if (constraint_case() == kIntProd) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.int_prod_;
    _impl_.constraint_.int_prod_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_int_prod(::operations_research::sat::LinearArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_int_prod();
    _impl_.constraint_.int_prod_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.int_prod)
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::_internal_mutable_int_prod() {
  if (constraint_case() != kIntProd) {
    clear_constraint();
    set_has_int_prod();
    _impl_.constraint_.int_prod_ = CreateMaybeMessage<::operations_research::sat::LinearArgumentProto>(GetArena());
  }
  return _impl_.constraint_.int_prod_;
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::mutable_int_prod() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearArgumentProto* _msg = _internal_mutable_int_prod();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.int_prod)
  return _msg;
}

// .operations_research.sat.LinearArgumentProto lin_max = 27;
inline bool ConstraintProto::has_lin_max() const {
  return constraint_case() == kLinMax;
}
inline bool ConstraintProto::_internal_has_lin_max() const {
  return constraint_case() == kLinMax;
}
inline void ConstraintProto::set_has_lin_max() {
  _impl_._oneof_case_[0] = kLinMax;
}
inline void ConstraintProto::clear_lin_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kLinMax) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.lin_max_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::release_lin_max() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.lin_max)
  if (constraint_case() == kLinMax) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.lin_max_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.lin_max_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::_internal_lin_max() const {
  return constraint_case() == kLinMax ? *_impl_.constraint_.lin_max_ : reinterpret_cast<::operations_research::sat::LinearArgumentProto&>(::operations_research::sat::_LinearArgumentProto_default_instance_);
}
inline const ::operations_research::sat::LinearArgumentProto& ConstraintProto::lin_max() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.lin_max)
  return _internal_lin_max();
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::unsafe_arena_release_lin_max() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.lin_max)
  if (constraint_case() == kLinMax) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.lin_max_;
    _impl_.constraint_.lin_max_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_lin_max(::operations_research::sat::LinearArgumentProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_lin_max();
    _impl_.constraint_.lin_max_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.lin_max)
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::_internal_mutable_lin_max() {
  if (constraint_case() != kLinMax) {
    clear_constraint();
    set_has_lin_max();
    _impl_.constraint_.lin_max_ = CreateMaybeMessage<::operations_research::sat::LinearArgumentProto>(GetArena());
  }
  return _impl_.constraint_.lin_max_;
}
inline ::operations_research::sat::LinearArgumentProto* ConstraintProto::mutable_lin_max() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearArgumentProto* _msg = _internal_mutable_lin_max();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.lin_max)
  return _msg;
}

// .operations_research.sat.LinearConstraintProto linear = 12;
inline bool ConstraintProto::has_linear() const {
  return constraint_case() == kLinear;
}
inline bool ConstraintProto::_internal_has_linear() const {
  return constraint_case() == kLinear;
}
inline void ConstraintProto::set_has_linear() {
  _impl_._oneof_case_[0] = kLinear;
}
inline void ConstraintProto::clear_linear() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kLinear) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.linear_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::LinearConstraintProto* ConstraintProto::release_linear() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.linear)
  if (constraint_case() == kLinear) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.linear_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.linear_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::LinearConstraintProto& ConstraintProto::_internal_linear() const {
  return constraint_case() == kLinear ? *_impl_.constraint_.linear_ : reinterpret_cast<::operations_research::sat::LinearConstraintProto&>(::operations_research::sat::_LinearConstraintProto_default_instance_);
}
inline const ::operations_research::sat::LinearConstraintProto& ConstraintProto::linear() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.linear)
  return _internal_linear();
}
inline ::operations_research::sat::LinearConstraintProto* ConstraintProto::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.linear)
  if (constraint_case() == kLinear) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.linear_;
    _impl_.constraint_.linear_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_linear(::operations_research::sat::LinearConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_linear();
    _impl_.constraint_.linear_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.linear)
}
inline ::operations_research::sat::LinearConstraintProto* ConstraintProto::_internal_mutable_linear() {
  if (constraint_case() != kLinear) {
    clear_constraint();
    set_has_linear();
    _impl_.constraint_.linear_ = CreateMaybeMessage<::operations_research::sat::LinearConstraintProto>(GetArena());
  }
  return _impl_.constraint_.linear_;
}
inline ::operations_research::sat::LinearConstraintProto* ConstraintProto::mutable_linear() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearConstraintProto* _msg = _internal_mutable_linear();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.linear)
  return _msg;
}

// .operations_research.sat.AllDifferentConstraintProto all_diff = 13;
inline bool ConstraintProto::has_all_diff() const {
  return constraint_case() == kAllDiff;
}
inline bool ConstraintProto::_internal_has_all_diff() const {
  return constraint_case() == kAllDiff;
}
inline void ConstraintProto::set_has_all_diff() {
  _impl_._oneof_case_[0] = kAllDiff;
}
inline void ConstraintProto::clear_all_diff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kAllDiff) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.all_diff_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::AllDifferentConstraintProto* ConstraintProto::release_all_diff() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.all_diff)
  if (constraint_case() == kAllDiff) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.all_diff_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.all_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::AllDifferentConstraintProto& ConstraintProto::_internal_all_diff() const {
  return constraint_case() == kAllDiff ? *_impl_.constraint_.all_diff_ : reinterpret_cast<::operations_research::sat::AllDifferentConstraintProto&>(::operations_research::sat::_AllDifferentConstraintProto_default_instance_);
}
inline const ::operations_research::sat::AllDifferentConstraintProto& ConstraintProto::all_diff() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.all_diff)
  return _internal_all_diff();
}
inline ::operations_research::sat::AllDifferentConstraintProto* ConstraintProto::unsafe_arena_release_all_diff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.all_diff)
  if (constraint_case() == kAllDiff) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.all_diff_;
    _impl_.constraint_.all_diff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_all_diff(::operations_research::sat::AllDifferentConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_all_diff();
    _impl_.constraint_.all_diff_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.all_diff)
}
inline ::operations_research::sat::AllDifferentConstraintProto* ConstraintProto::_internal_mutable_all_diff() {
  if (constraint_case() != kAllDiff) {
    clear_constraint();
    set_has_all_diff();
    _impl_.constraint_.all_diff_ = CreateMaybeMessage<::operations_research::sat::AllDifferentConstraintProto>(GetArena());
  }
  return _impl_.constraint_.all_diff_;
}
inline ::operations_research::sat::AllDifferentConstraintProto* ConstraintProto::mutable_all_diff() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::AllDifferentConstraintProto* _msg = _internal_mutable_all_diff();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.all_diff)
  return _msg;
}

// .operations_research.sat.ElementConstraintProto element = 14;
inline bool ConstraintProto::has_element() const {
  return constraint_case() == kElement;
}
inline bool ConstraintProto::_internal_has_element() const {
  return constraint_case() == kElement;
}
inline void ConstraintProto::set_has_element() {
  _impl_._oneof_case_[0] = kElement;
}
inline void ConstraintProto::clear_element() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kElement) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.element_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::ElementConstraintProto* ConstraintProto::release_element() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.element)
  if (constraint_case() == kElement) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.element_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::ElementConstraintProto& ConstraintProto::_internal_element() const {
  return constraint_case() == kElement ? *_impl_.constraint_.element_ : reinterpret_cast<::operations_research::sat::ElementConstraintProto&>(::operations_research::sat::_ElementConstraintProto_default_instance_);
}
inline const ::operations_research::sat::ElementConstraintProto& ConstraintProto::element() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.element)
  return _internal_element();
}
inline ::operations_research::sat::ElementConstraintProto* ConstraintProto::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.element)
  if (constraint_case() == kElement) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.element_;
    _impl_.constraint_.element_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_element(::operations_research::sat::ElementConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_element();
    _impl_.constraint_.element_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.element)
}
inline ::operations_research::sat::ElementConstraintProto* ConstraintProto::_internal_mutable_element() {
  if (constraint_case() != kElement) {
    clear_constraint();
    set_has_element();
    _impl_.constraint_.element_ = CreateMaybeMessage<::operations_research::sat::ElementConstraintProto>(GetArena());
  }
  return _impl_.constraint_.element_;
}
inline ::operations_research::sat::ElementConstraintProto* ConstraintProto::mutable_element() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::ElementConstraintProto* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.element)
  return _msg;
}

// .operations_research.sat.CircuitConstraintProto circuit = 15;
inline bool ConstraintProto::has_circuit() const {
  return constraint_case() == kCircuit;
}
inline bool ConstraintProto::_internal_has_circuit() const {
  return constraint_case() == kCircuit;
}
inline void ConstraintProto::set_has_circuit() {
  _impl_._oneof_case_[0] = kCircuit;
}
inline void ConstraintProto::clear_circuit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kCircuit) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.circuit_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::CircuitConstraintProto* ConstraintProto::release_circuit() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.circuit)
  if (constraint_case() == kCircuit) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.circuit_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.circuit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::CircuitConstraintProto& ConstraintProto::_internal_circuit() const {
  return constraint_case() == kCircuit ? *_impl_.constraint_.circuit_ : reinterpret_cast<::operations_research::sat::CircuitConstraintProto&>(::operations_research::sat::_CircuitConstraintProto_default_instance_);
}
inline const ::operations_research::sat::CircuitConstraintProto& ConstraintProto::circuit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.circuit)
  return _internal_circuit();
}
inline ::operations_research::sat::CircuitConstraintProto* ConstraintProto::unsafe_arena_release_circuit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.circuit)
  if (constraint_case() == kCircuit) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.circuit_;
    _impl_.constraint_.circuit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_circuit(::operations_research::sat::CircuitConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_circuit();
    _impl_.constraint_.circuit_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.circuit)
}
inline ::operations_research::sat::CircuitConstraintProto* ConstraintProto::_internal_mutable_circuit() {
  if (constraint_case() != kCircuit) {
    clear_constraint();
    set_has_circuit();
    _impl_.constraint_.circuit_ = CreateMaybeMessage<::operations_research::sat::CircuitConstraintProto>(GetArena());
  }
  return _impl_.constraint_.circuit_;
}
inline ::operations_research::sat::CircuitConstraintProto* ConstraintProto::mutable_circuit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::CircuitConstraintProto* _msg = _internal_mutable_circuit();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.circuit)
  return _msg;
}

// .operations_research.sat.RoutesConstraintProto routes = 23;
inline bool ConstraintProto::has_routes() const {
  return constraint_case() == kRoutes;
}
inline bool ConstraintProto::_internal_has_routes() const {
  return constraint_case() == kRoutes;
}
inline void ConstraintProto::set_has_routes() {
  _impl_._oneof_case_[0] = kRoutes;
}
inline void ConstraintProto::clear_routes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kRoutes) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.routes_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::RoutesConstraintProto* ConstraintProto::release_routes() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.routes)
  if (constraint_case() == kRoutes) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.routes_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.routes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::RoutesConstraintProto& ConstraintProto::_internal_routes() const {
  return constraint_case() == kRoutes ? *_impl_.constraint_.routes_ : reinterpret_cast<::operations_research::sat::RoutesConstraintProto&>(::operations_research::sat::_RoutesConstraintProto_default_instance_);
}
inline const ::operations_research::sat::RoutesConstraintProto& ConstraintProto::routes() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.routes)
  return _internal_routes();
}
inline ::operations_research::sat::RoutesConstraintProto* ConstraintProto::unsafe_arena_release_routes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.routes)
  if (constraint_case() == kRoutes) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.routes_;
    _impl_.constraint_.routes_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_routes(::operations_research::sat::RoutesConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_routes();
    _impl_.constraint_.routes_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.routes)
}
inline ::operations_research::sat::RoutesConstraintProto* ConstraintProto::_internal_mutable_routes() {
  if (constraint_case() != kRoutes) {
    clear_constraint();
    set_has_routes();
    _impl_.constraint_.routes_ = CreateMaybeMessage<::operations_research::sat::RoutesConstraintProto>(GetArena());
  }
  return _impl_.constraint_.routes_;
}
inline ::operations_research::sat::RoutesConstraintProto* ConstraintProto::mutable_routes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::RoutesConstraintProto* _msg = _internal_mutable_routes();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.routes)
  return _msg;
}

// .operations_research.sat.TableConstraintProto table = 16;
inline bool ConstraintProto::has_table() const {
  return constraint_case() == kTable;
}
inline bool ConstraintProto::_internal_has_table() const {
  return constraint_case() == kTable;
}
inline void ConstraintProto::set_has_table() {
  _impl_._oneof_case_[0] = kTable;
}
inline void ConstraintProto::clear_table() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kTable) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.table_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::TableConstraintProto* ConstraintProto::release_table() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.table)
  if (constraint_case() == kTable) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.table_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::TableConstraintProto& ConstraintProto::_internal_table() const {
  return constraint_case() == kTable ? *_impl_.constraint_.table_ : reinterpret_cast<::operations_research::sat::TableConstraintProto&>(::operations_research::sat::_TableConstraintProto_default_instance_);
}
inline const ::operations_research::sat::TableConstraintProto& ConstraintProto::table() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.table)
  return _internal_table();
}
inline ::operations_research::sat::TableConstraintProto* ConstraintProto::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.table)
  if (constraint_case() == kTable) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.table_;
    _impl_.constraint_.table_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_table(::operations_research::sat::TableConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_table();
    _impl_.constraint_.table_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.table)
}
inline ::operations_research::sat::TableConstraintProto* ConstraintProto::_internal_mutable_table() {
  if (constraint_case() != kTable) {
    clear_constraint();
    set_has_table();
    _impl_.constraint_.table_ = CreateMaybeMessage<::operations_research::sat::TableConstraintProto>(GetArena());
  }
  return _impl_.constraint_.table_;
}
inline ::operations_research::sat::TableConstraintProto* ConstraintProto::mutable_table() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::TableConstraintProto* _msg = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.table)
  return _msg;
}

// .operations_research.sat.AutomatonConstraintProto automaton = 17;
inline bool ConstraintProto::has_automaton() const {
  return constraint_case() == kAutomaton;
}
inline bool ConstraintProto::_internal_has_automaton() const {
  return constraint_case() == kAutomaton;
}
inline void ConstraintProto::set_has_automaton() {
  _impl_._oneof_case_[0] = kAutomaton;
}
inline void ConstraintProto::clear_automaton() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kAutomaton) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.automaton_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::AutomatonConstraintProto* ConstraintProto::release_automaton() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.automaton)
  if (constraint_case() == kAutomaton) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.automaton_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.automaton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::AutomatonConstraintProto& ConstraintProto::_internal_automaton() const {
  return constraint_case() == kAutomaton ? *_impl_.constraint_.automaton_ : reinterpret_cast<::operations_research::sat::AutomatonConstraintProto&>(::operations_research::sat::_AutomatonConstraintProto_default_instance_);
}
inline const ::operations_research::sat::AutomatonConstraintProto& ConstraintProto::automaton() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.automaton)
  return _internal_automaton();
}
inline ::operations_research::sat::AutomatonConstraintProto* ConstraintProto::unsafe_arena_release_automaton() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.automaton)
  if (constraint_case() == kAutomaton) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.automaton_;
    _impl_.constraint_.automaton_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_automaton(::operations_research::sat::AutomatonConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_automaton();
    _impl_.constraint_.automaton_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.automaton)
}
inline ::operations_research::sat::AutomatonConstraintProto* ConstraintProto::_internal_mutable_automaton() {
  if (constraint_case() != kAutomaton) {
    clear_constraint();
    set_has_automaton();
    _impl_.constraint_.automaton_ = CreateMaybeMessage<::operations_research::sat::AutomatonConstraintProto>(GetArena());
  }
  return _impl_.constraint_.automaton_;
}
inline ::operations_research::sat::AutomatonConstraintProto* ConstraintProto::mutable_automaton() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::AutomatonConstraintProto* _msg = _internal_mutable_automaton();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.automaton)
  return _msg;
}

// .operations_research.sat.InverseConstraintProto inverse = 18;
inline bool ConstraintProto::has_inverse() const {
  return constraint_case() == kInverse;
}
inline bool ConstraintProto::_internal_has_inverse() const {
  return constraint_case() == kInverse;
}
inline void ConstraintProto::set_has_inverse() {
  _impl_._oneof_case_[0] = kInverse;
}
inline void ConstraintProto::clear_inverse() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kInverse) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.inverse_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::InverseConstraintProto* ConstraintProto::release_inverse() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.inverse)
  if (constraint_case() == kInverse) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.inverse_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.inverse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::InverseConstraintProto& ConstraintProto::_internal_inverse() const {
  return constraint_case() == kInverse ? *_impl_.constraint_.inverse_ : reinterpret_cast<::operations_research::sat::InverseConstraintProto&>(::operations_research::sat::_InverseConstraintProto_default_instance_);
}
inline const ::operations_research::sat::InverseConstraintProto& ConstraintProto::inverse() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.inverse)
  return _internal_inverse();
}
inline ::operations_research::sat::InverseConstraintProto* ConstraintProto::unsafe_arena_release_inverse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.inverse)
  if (constraint_case() == kInverse) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.inverse_;
    _impl_.constraint_.inverse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_inverse(::operations_research::sat::InverseConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_inverse();
    _impl_.constraint_.inverse_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.inverse)
}
inline ::operations_research::sat::InverseConstraintProto* ConstraintProto::_internal_mutable_inverse() {
  if (constraint_case() != kInverse) {
    clear_constraint();
    set_has_inverse();
    _impl_.constraint_.inverse_ = CreateMaybeMessage<::operations_research::sat::InverseConstraintProto>(GetArena());
  }
  return _impl_.constraint_.inverse_;
}
inline ::operations_research::sat::InverseConstraintProto* ConstraintProto::mutable_inverse() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::InverseConstraintProto* _msg = _internal_mutable_inverse();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.inverse)
  return _msg;
}

// .operations_research.sat.ReservoirConstraintProto reservoir = 24;
inline bool ConstraintProto::has_reservoir() const {
  return constraint_case() == kReservoir;
}
inline bool ConstraintProto::_internal_has_reservoir() const {
  return constraint_case() == kReservoir;
}
inline void ConstraintProto::set_has_reservoir() {
  _impl_._oneof_case_[0] = kReservoir;
}
inline void ConstraintProto::clear_reservoir() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kReservoir) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.reservoir_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::ReservoirConstraintProto* ConstraintProto::release_reservoir() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.reservoir)
  if (constraint_case() == kReservoir) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.reservoir_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.reservoir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::ReservoirConstraintProto& ConstraintProto::_internal_reservoir() const {
  return constraint_case() == kReservoir ? *_impl_.constraint_.reservoir_ : reinterpret_cast<::operations_research::sat::ReservoirConstraintProto&>(::operations_research::sat::_ReservoirConstraintProto_default_instance_);
}
inline const ::operations_research::sat::ReservoirConstraintProto& ConstraintProto::reservoir() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.reservoir)
  return _internal_reservoir();
}
inline ::operations_research::sat::ReservoirConstraintProto* ConstraintProto::unsafe_arena_release_reservoir() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.reservoir)
  if (constraint_case() == kReservoir) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.reservoir_;
    _impl_.constraint_.reservoir_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_reservoir(::operations_research::sat::ReservoirConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_reservoir();
    _impl_.constraint_.reservoir_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.reservoir)
}
inline ::operations_research::sat::ReservoirConstraintProto* ConstraintProto::_internal_mutable_reservoir() {
  if (constraint_case() != kReservoir) {
    clear_constraint();
    set_has_reservoir();
    _impl_.constraint_.reservoir_ = CreateMaybeMessage<::operations_research::sat::ReservoirConstraintProto>(GetArena());
  }
  return _impl_.constraint_.reservoir_;
}
inline ::operations_research::sat::ReservoirConstraintProto* ConstraintProto::mutable_reservoir() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::ReservoirConstraintProto* _msg = _internal_mutable_reservoir();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.reservoir)
  return _msg;
}

// .operations_research.sat.IntervalConstraintProto interval = 19;
inline bool ConstraintProto::has_interval() const {
  return constraint_case() == kInterval;
}
inline bool ConstraintProto::_internal_has_interval() const {
  return constraint_case() == kInterval;
}
inline void ConstraintProto::set_has_interval() {
  _impl_._oneof_case_[0] = kInterval;
}
inline void ConstraintProto::clear_interval() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kInterval) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.interval_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::IntervalConstraintProto* ConstraintProto::release_interval() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.interval)
  if (constraint_case() == kInterval) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.interval_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::IntervalConstraintProto& ConstraintProto::_internal_interval() const {
  return constraint_case() == kInterval ? *_impl_.constraint_.interval_ : reinterpret_cast<::operations_research::sat::IntervalConstraintProto&>(::operations_research::sat::_IntervalConstraintProto_default_instance_);
}
inline const ::operations_research::sat::IntervalConstraintProto& ConstraintProto::interval() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.interval)
  return _internal_interval();
}
inline ::operations_research::sat::IntervalConstraintProto* ConstraintProto::unsafe_arena_release_interval() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.interval)
  if (constraint_case() == kInterval) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.interval_;
    _impl_.constraint_.interval_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_interval(::operations_research::sat::IntervalConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_interval();
    _impl_.constraint_.interval_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.interval)
}
inline ::operations_research::sat::IntervalConstraintProto* ConstraintProto::_internal_mutable_interval() {
  if (constraint_case() != kInterval) {
    clear_constraint();
    set_has_interval();
    _impl_.constraint_.interval_ = CreateMaybeMessage<::operations_research::sat::IntervalConstraintProto>(GetArena());
  }
  return _impl_.constraint_.interval_;
}
inline ::operations_research::sat::IntervalConstraintProto* ConstraintProto::mutable_interval() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::IntervalConstraintProto* _msg = _internal_mutable_interval();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.interval)
  return _msg;
}

// .operations_research.sat.NoOverlapConstraintProto no_overlap = 20;
inline bool ConstraintProto::has_no_overlap() const {
  return constraint_case() == kNoOverlap;
}
inline bool ConstraintProto::_internal_has_no_overlap() const {
  return constraint_case() == kNoOverlap;
}
inline void ConstraintProto::set_has_no_overlap() {
  _impl_._oneof_case_[0] = kNoOverlap;
}
inline void ConstraintProto::clear_no_overlap() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kNoOverlap) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.no_overlap_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::NoOverlapConstraintProto* ConstraintProto::release_no_overlap() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.no_overlap)
  if (constraint_case() == kNoOverlap) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.no_overlap_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.no_overlap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::NoOverlapConstraintProto& ConstraintProto::_internal_no_overlap() const {
  return constraint_case() == kNoOverlap ? *_impl_.constraint_.no_overlap_ : reinterpret_cast<::operations_research::sat::NoOverlapConstraintProto&>(::operations_research::sat::_NoOverlapConstraintProto_default_instance_);
}
inline const ::operations_research::sat::NoOverlapConstraintProto& ConstraintProto::no_overlap() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.no_overlap)
  return _internal_no_overlap();
}
inline ::operations_research::sat::NoOverlapConstraintProto* ConstraintProto::unsafe_arena_release_no_overlap() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.no_overlap)
  if (constraint_case() == kNoOverlap) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.no_overlap_;
    _impl_.constraint_.no_overlap_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_no_overlap(::operations_research::sat::NoOverlapConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_no_overlap();
    _impl_.constraint_.no_overlap_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.no_overlap)
}
inline ::operations_research::sat::NoOverlapConstraintProto* ConstraintProto::_internal_mutable_no_overlap() {
  if (constraint_case() != kNoOverlap) {
    clear_constraint();
    set_has_no_overlap();
    _impl_.constraint_.no_overlap_ = CreateMaybeMessage<::operations_research::sat::NoOverlapConstraintProto>(GetArena());
  }
  return _impl_.constraint_.no_overlap_;
}
inline ::operations_research::sat::NoOverlapConstraintProto* ConstraintProto::mutable_no_overlap() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::NoOverlapConstraintProto* _msg = _internal_mutable_no_overlap();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.no_overlap)
  return _msg;
}

// .operations_research.sat.NoOverlap2DConstraintProto no_overlap_2d = 21;
inline bool ConstraintProto::has_no_overlap_2d() const {
  return constraint_case() == kNoOverlap2D;
}
inline bool ConstraintProto::_internal_has_no_overlap_2d() const {
  return constraint_case() == kNoOverlap2D;
}
inline void ConstraintProto::set_has_no_overlap_2d() {
  _impl_._oneof_case_[0] = kNoOverlap2D;
}
inline void ConstraintProto::clear_no_overlap_2d() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kNoOverlap2D) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.no_overlap_2d_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::NoOverlap2DConstraintProto* ConstraintProto::release_no_overlap_2d() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.no_overlap_2d)
  if (constraint_case() == kNoOverlap2D) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.no_overlap_2d_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.no_overlap_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::NoOverlap2DConstraintProto& ConstraintProto::_internal_no_overlap_2d() const {
  return constraint_case() == kNoOverlap2D ? *_impl_.constraint_.no_overlap_2d_ : reinterpret_cast<::operations_research::sat::NoOverlap2DConstraintProto&>(::operations_research::sat::_NoOverlap2DConstraintProto_default_instance_);
}
inline const ::operations_research::sat::NoOverlap2DConstraintProto& ConstraintProto::no_overlap_2d() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.no_overlap_2d)
  return _internal_no_overlap_2d();
}
inline ::operations_research::sat::NoOverlap2DConstraintProto* ConstraintProto::unsafe_arena_release_no_overlap_2d() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.no_overlap_2d)
  if (constraint_case() == kNoOverlap2D) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.no_overlap_2d_;
    _impl_.constraint_.no_overlap_2d_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_no_overlap_2d(::operations_research::sat::NoOverlap2DConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_no_overlap_2d();
    _impl_.constraint_.no_overlap_2d_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.no_overlap_2d)
}
inline ::operations_research::sat::NoOverlap2DConstraintProto* ConstraintProto::_internal_mutable_no_overlap_2d() {
  if (constraint_case() != kNoOverlap2D) {
    clear_constraint();
    set_has_no_overlap_2d();
    _impl_.constraint_.no_overlap_2d_ = CreateMaybeMessage<::operations_research::sat::NoOverlap2DConstraintProto>(GetArena());
  }
  return _impl_.constraint_.no_overlap_2d_;
}
inline ::operations_research::sat::NoOverlap2DConstraintProto* ConstraintProto::mutable_no_overlap_2d() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::NoOverlap2DConstraintProto* _msg = _internal_mutable_no_overlap_2d();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.no_overlap_2d)
  return _msg;
}

// .operations_research.sat.CumulativeConstraintProto cumulative = 22;
inline bool ConstraintProto::has_cumulative() const {
  return constraint_case() == kCumulative;
}
inline bool ConstraintProto::_internal_has_cumulative() const {
  return constraint_case() == kCumulative;
}
inline void ConstraintProto::set_has_cumulative() {
  _impl_._oneof_case_[0] = kCumulative;
}
inline void ConstraintProto::clear_cumulative() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kCumulative) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.cumulative_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::CumulativeConstraintProto* ConstraintProto::release_cumulative() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.cumulative)
  if (constraint_case() == kCumulative) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.cumulative_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.cumulative_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::CumulativeConstraintProto& ConstraintProto::_internal_cumulative() const {
  return constraint_case() == kCumulative ? *_impl_.constraint_.cumulative_ : reinterpret_cast<::operations_research::sat::CumulativeConstraintProto&>(::operations_research::sat::_CumulativeConstraintProto_default_instance_);
}
inline const ::operations_research::sat::CumulativeConstraintProto& ConstraintProto::cumulative() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.cumulative)
  return _internal_cumulative();
}
inline ::operations_research::sat::CumulativeConstraintProto* ConstraintProto::unsafe_arena_release_cumulative() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.cumulative)
  if (constraint_case() == kCumulative) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.cumulative_;
    _impl_.constraint_.cumulative_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_cumulative(::operations_research::sat::CumulativeConstraintProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_cumulative();
    _impl_.constraint_.cumulative_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.cumulative)
}
inline ::operations_research::sat::CumulativeConstraintProto* ConstraintProto::_internal_mutable_cumulative() {
  if (constraint_case() != kCumulative) {
    clear_constraint();
    set_has_cumulative();
    _impl_.constraint_.cumulative_ = CreateMaybeMessage<::operations_research::sat::CumulativeConstraintProto>(GetArena());
  }
  return _impl_.constraint_.cumulative_;
}
inline ::operations_research::sat::CumulativeConstraintProto* ConstraintProto::mutable_cumulative() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::CumulativeConstraintProto* _msg = _internal_mutable_cumulative();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.cumulative)
  return _msg;
}

// .operations_research.sat.ListOfVariablesProto dummy_constraint = 30;
inline bool ConstraintProto::has_dummy_constraint() const {
  return constraint_case() == kDummyConstraint;
}
inline bool ConstraintProto::_internal_has_dummy_constraint() const {
  return constraint_case() == kDummyConstraint;
}
inline void ConstraintProto::set_has_dummy_constraint() {
  _impl_._oneof_case_[0] = kDummyConstraint;
}
inline void ConstraintProto::clear_dummy_constraint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (constraint_case() == kDummyConstraint) {
    if (GetArena() == nullptr) {
      delete _impl_.constraint_.dummy_constraint_;
    }
    clear_has_constraint();
  }
}
inline ::operations_research::sat::ListOfVariablesProto* ConstraintProto::release_dummy_constraint() {
  // @@protoc_insertion_point(field_release:operations_research.sat.ConstraintProto.dummy_constraint)
  if (constraint_case() == kDummyConstraint) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.dummy_constraint_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.constraint_.dummy_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::operations_research::sat::ListOfVariablesProto& ConstraintProto::_internal_dummy_constraint() const {
  return constraint_case() == kDummyConstraint ? *_impl_.constraint_.dummy_constraint_ : reinterpret_cast<::operations_research::sat::ListOfVariablesProto&>(::operations_research::sat::_ListOfVariablesProto_default_instance_);
}
inline const ::operations_research::sat::ListOfVariablesProto& ConstraintProto::dummy_constraint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.ConstraintProto.dummy_constraint)
  return _internal_dummy_constraint();
}
inline ::operations_research::sat::ListOfVariablesProto* ConstraintProto::unsafe_arena_release_dummy_constraint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:operations_research.sat.ConstraintProto.dummy_constraint)
  if (constraint_case() == kDummyConstraint) {
    clear_has_constraint();
    auto* temp = _impl_.constraint_.dummy_constraint_;
    _impl_.constraint_.dummy_constraint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ConstraintProto::unsafe_arena_set_allocated_dummy_constraint(::operations_research::sat::ListOfVariablesProto* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_constraint();
  if (value) {
    set_has_dummy_constraint();
    _impl_.constraint_.dummy_constraint_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.ConstraintProto.dummy_constraint)
}
inline ::operations_research::sat::ListOfVariablesProto* ConstraintProto::_internal_mutable_dummy_constraint() {
  if (constraint_case() != kDummyConstraint) {
    clear_constraint();
    set_has_dummy_constraint();
    _impl_.constraint_.dummy_constraint_ = CreateMaybeMessage<::operations_research::sat::ListOfVariablesProto>(GetArena());
  }
  return _impl_.constraint_.dummy_constraint_;
}
inline ::operations_research::sat::ListOfVariablesProto* ConstraintProto::mutable_dummy_constraint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::ListOfVariablesProto* _msg = _internal_mutable_dummy_constraint();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.ConstraintProto.dummy_constraint)
  return _msg;
}

inline bool ConstraintProto::has_constraint() const {
  return constraint_case() != CONSTRAINT_NOT_SET;
}
inline void ConstraintProto::clear_has_constraint() {
  _impl_._oneof_case_[0] = CONSTRAINT_NOT_SET;
}
inline ConstraintProto::ConstraintCase ConstraintProto::constraint_case() const {
  return ConstraintProto::ConstraintCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CpObjectiveProto

// repeated int32 vars = 1;
inline int CpObjectiveProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int CpObjectiveProto::vars_size() const {
  return _internal_vars_size();
}
inline void CpObjectiveProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t CpObjectiveProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.vars)
  return _internal_vars().Get(index);
}
inline void CpObjectiveProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.vars)
}
inline void CpObjectiveProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpObjectiveProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpObjectiveProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpObjectiveProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpObjectiveProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpObjectiveProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpObjectiveProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpObjectiveProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated int64 coeffs = 4;
inline int CpObjectiveProto::_internal_coeffs_size() const {
  return _internal_coeffs().size();
}
inline int CpObjectiveProto::coeffs_size() const {
  return _internal_coeffs_size();
}
inline void CpObjectiveProto::clear_coeffs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeffs_.Clear();
}
inline ::int64_t CpObjectiveProto::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.coeffs)
  return _internal_coeffs().Get(index);
}
inline void CpObjectiveProto::set_coeffs(int index, ::int64_t value) {
  _internal_mutable_coeffs()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.coeffs)
}
inline void CpObjectiveProto::add_coeffs(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coeffs()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpObjectiveProto.coeffs)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpObjectiveProto::coeffs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpObjectiveProto.coeffs)
  return _internal_coeffs();
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpObjectiveProto::mutable_coeffs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpObjectiveProto.coeffs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coeffs();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpObjectiveProto::_internal_coeffs()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeffs_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpObjectiveProto::_internal_mutable_coeffs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coeffs_;
}

// double offset = 2;
inline void CpObjectiveProto::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0;
}
inline double CpObjectiveProto::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.offset)
  return _internal_offset();
}
inline void CpObjectiveProto::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.offset)
}
inline double CpObjectiveProto::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void CpObjectiveProto::_internal_set_offset(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// double scaling_factor = 3;
inline void CpObjectiveProto::clear_scaling_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scaling_factor_ = 0;
}
inline double CpObjectiveProto::scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.scaling_factor)
  return _internal_scaling_factor();
}
inline void CpObjectiveProto::set_scaling_factor(double value) {
  _internal_set_scaling_factor(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.scaling_factor)
}
inline double CpObjectiveProto::_internal_scaling_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scaling_factor_;
}
inline void CpObjectiveProto::_internal_set_scaling_factor(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scaling_factor_ = value;
}

// repeated int64 domain = 5;
inline int CpObjectiveProto::_internal_domain_size() const {
  return _internal_domain().size();
}
inline int CpObjectiveProto::domain_size() const {
  return _internal_domain_size();
}
inline void CpObjectiveProto::clear_domain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_.Clear();
}
inline ::int64_t CpObjectiveProto::domain(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.domain)
  return _internal_domain().Get(index);
}
inline void CpObjectiveProto::set_domain(int index, ::int64_t value) {
  _internal_mutable_domain()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.domain)
}
inline void CpObjectiveProto::add_domain(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_domain()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpObjectiveProto.domain)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpObjectiveProto::domain() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpObjectiveProto.domain)
  return _internal_domain();
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpObjectiveProto::mutable_domain()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpObjectiveProto.domain)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_domain();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpObjectiveProto::_internal_domain()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.domain_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpObjectiveProto::_internal_mutable_domain() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.domain_;
}

// bool scaling_was_exact = 6;
inline void CpObjectiveProto::clear_scaling_was_exact() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scaling_was_exact_ = false;
}
inline bool CpObjectiveProto::scaling_was_exact() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.scaling_was_exact)
  return _internal_scaling_was_exact();
}
inline void CpObjectiveProto::set_scaling_was_exact(bool value) {
  _internal_set_scaling_was_exact(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.scaling_was_exact)
}
inline bool CpObjectiveProto::_internal_scaling_was_exact() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scaling_was_exact_;
}
inline void CpObjectiveProto::_internal_set_scaling_was_exact(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scaling_was_exact_ = value;
}

// int64 integer_before_offset = 7;
inline void CpObjectiveProto::clear_integer_before_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.integer_before_offset_ = ::int64_t{0};
}
inline ::int64_t CpObjectiveProto::integer_before_offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.integer_before_offset)
  return _internal_integer_before_offset();
}
inline void CpObjectiveProto::set_integer_before_offset(::int64_t value) {
  _internal_set_integer_before_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.integer_before_offset)
}
inline ::int64_t CpObjectiveProto::_internal_integer_before_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.integer_before_offset_;
}
inline void CpObjectiveProto::_internal_set_integer_before_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.integer_before_offset_ = value;
}

// int64 integer_after_offset = 9;
inline void CpObjectiveProto::clear_integer_after_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.integer_after_offset_ = ::int64_t{0};
}
inline ::int64_t CpObjectiveProto::integer_after_offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.integer_after_offset)
  return _internal_integer_after_offset();
}
inline void CpObjectiveProto::set_integer_after_offset(::int64_t value) {
  _internal_set_integer_after_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.integer_after_offset)
}
inline ::int64_t CpObjectiveProto::_internal_integer_after_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.integer_after_offset_;
}
inline void CpObjectiveProto::_internal_set_integer_after_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.integer_after_offset_ = value;
}

// int64 integer_scaling_factor = 8;
inline void CpObjectiveProto::clear_integer_scaling_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.integer_scaling_factor_ = ::int64_t{0};
}
inline ::int64_t CpObjectiveProto::integer_scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpObjectiveProto.integer_scaling_factor)
  return _internal_integer_scaling_factor();
}
inline void CpObjectiveProto::set_integer_scaling_factor(::int64_t value) {
  _internal_set_integer_scaling_factor(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpObjectiveProto.integer_scaling_factor)
}
inline ::int64_t CpObjectiveProto::_internal_integer_scaling_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.integer_scaling_factor_;
}
inline void CpObjectiveProto::_internal_set_integer_scaling_factor(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.integer_scaling_factor_ = value;
}

// -------------------------------------------------------------------

// FloatObjectiveProto

// repeated int32 vars = 1;
inline int FloatObjectiveProto::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int FloatObjectiveProto::vars_size() const {
  return _internal_vars_size();
}
inline void FloatObjectiveProto::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t FloatObjectiveProto::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.FloatObjectiveProto.vars)
  return _internal_vars().Get(index);
}
inline void FloatObjectiveProto::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.FloatObjectiveProto.vars)
}
inline void FloatObjectiveProto::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.FloatObjectiveProto.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FloatObjectiveProto::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.FloatObjectiveProto.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* FloatObjectiveProto::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.FloatObjectiveProto.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& FloatObjectiveProto::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* FloatObjectiveProto::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated double coeffs = 2;
inline int FloatObjectiveProto::_internal_coeffs_size() const {
  return _internal_coeffs().size();
}
inline int FloatObjectiveProto::coeffs_size() const {
  return _internal_coeffs_size();
}
inline void FloatObjectiveProto::clear_coeffs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coeffs_.Clear();
}
inline double FloatObjectiveProto::coeffs(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.FloatObjectiveProto.coeffs)
  return _internal_coeffs().Get(index);
}
inline void FloatObjectiveProto::set_coeffs(int index, double value) {
  _internal_mutable_coeffs()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.FloatObjectiveProto.coeffs)
}
inline void FloatObjectiveProto::add_coeffs(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coeffs()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.FloatObjectiveProto.coeffs)
}
inline const ::google::protobuf::RepeatedField<double>& FloatObjectiveProto::coeffs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.FloatObjectiveProto.coeffs)
  return _internal_coeffs();
}
inline ::google::protobuf::RepeatedField<double>* FloatObjectiveProto::mutable_coeffs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.FloatObjectiveProto.coeffs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coeffs();
}
inline const ::google::protobuf::RepeatedField<double>& FloatObjectiveProto::_internal_coeffs()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coeffs_;
}
inline ::google::protobuf::RepeatedField<double>* FloatObjectiveProto::_internal_mutable_coeffs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coeffs_;
}

// double offset = 3;
inline void FloatObjectiveProto::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0;
}
inline double FloatObjectiveProto::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.FloatObjectiveProto.offset)
  return _internal_offset();
}
inline void FloatObjectiveProto::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.FloatObjectiveProto.offset)
}
inline double FloatObjectiveProto::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void FloatObjectiveProto::_internal_set_offset(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// bool maximize = 4;
inline void FloatObjectiveProto::clear_maximize() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.maximize_ = false;
}
inline bool FloatObjectiveProto::maximize() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.FloatObjectiveProto.maximize)
  return _internal_maximize();
}
inline void FloatObjectiveProto::set_maximize(bool value) {
  _internal_set_maximize(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.FloatObjectiveProto.maximize)
}
inline bool FloatObjectiveProto::_internal_maximize() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.maximize_;
}
inline void FloatObjectiveProto::_internal_set_maximize(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.maximize_ = value;
}

// -------------------------------------------------------------------

// DecisionStrategyProto_AffineTransformation

// int32 index = 1;
inline void DecisionStrategyProto_AffineTransformation::clear_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_ = 0;
}
inline ::int32_t DecisionStrategyProto_AffineTransformation::index() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.AffineTransformation.index)
  return _internal_index();
}
inline void DecisionStrategyProto_AffineTransformation::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.AffineTransformation.index)
}
inline ::int32_t DecisionStrategyProto_AffineTransformation::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void DecisionStrategyProto_AffineTransformation::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// int64 offset = 2;
inline void DecisionStrategyProto_AffineTransformation::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = ::int64_t{0};
}
inline ::int64_t DecisionStrategyProto_AffineTransformation::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.AffineTransformation.offset)
  return _internal_offset();
}
inline void DecisionStrategyProto_AffineTransformation::set_offset(::int64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.AffineTransformation.offset)
}
inline ::int64_t DecisionStrategyProto_AffineTransformation::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void DecisionStrategyProto_AffineTransformation::_internal_set_offset(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.offset_ = value;
}

// int64 positive_coeff = 3;
inline void DecisionStrategyProto_AffineTransformation::clear_positive_coeff() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.positive_coeff_ = ::int64_t{0};
}
inline ::int64_t DecisionStrategyProto_AffineTransformation::positive_coeff() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.AffineTransformation.positive_coeff)
  return _internal_positive_coeff();
}
inline void DecisionStrategyProto_AffineTransformation::set_positive_coeff(::int64_t value) {
  _internal_set_positive_coeff(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.AffineTransformation.positive_coeff)
}
inline ::int64_t DecisionStrategyProto_AffineTransformation::_internal_positive_coeff() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.positive_coeff_;
}
inline void DecisionStrategyProto_AffineTransformation::_internal_set_positive_coeff(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.positive_coeff_ = value;
}

// -------------------------------------------------------------------

// DecisionStrategyProto

// repeated int32 variables = 1;
inline int DecisionStrategyProto::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int DecisionStrategyProto::variables_size() const {
  return _internal_variables_size();
}
inline void DecisionStrategyProto::clear_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variables_.Clear();
}
inline ::int32_t DecisionStrategyProto::variables(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.variables)
  return _internal_variables().Get(index);
}
inline void DecisionStrategyProto::set_variables(int index, ::int32_t value) {
  _internal_mutable_variables()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.variables)
}
inline void DecisionStrategyProto::add_variables(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_variables()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.DecisionStrategyProto.variables)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& DecisionStrategyProto::variables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.DecisionStrategyProto.variables)
  return _internal_variables();
}
inline ::google::protobuf::RepeatedField<::int32_t>* DecisionStrategyProto::mutable_variables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.DecisionStrategyProto.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& DecisionStrategyProto::_internal_variables()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* DecisionStrategyProto::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// .operations_research.sat.DecisionStrategyProto.VariableSelectionStrategy variable_selection_strategy = 2;
inline void DecisionStrategyProto::clear_variable_selection_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variable_selection_strategy_ = 0;
}
inline ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::variable_selection_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.variable_selection_strategy)
  return _internal_variable_selection_strategy();
}
inline void DecisionStrategyProto::set_variable_selection_strategy(::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy value) {
  _internal_set_variable_selection_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.variable_selection_strategy)
}
inline ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy DecisionStrategyProto::_internal_variable_selection_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>(_impl_.variable_selection_strategy_);
}
inline void DecisionStrategyProto::_internal_set_variable_selection_strategy(::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.variable_selection_strategy_ = value;
}

// .operations_research.sat.DecisionStrategyProto.DomainReductionStrategy domain_reduction_strategy = 3;
inline void DecisionStrategyProto::clear_domain_reduction_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.domain_reduction_strategy_ = 0;
}
inline ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::domain_reduction_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.domain_reduction_strategy)
  return _internal_domain_reduction_strategy();
}
inline void DecisionStrategyProto::set_domain_reduction_strategy(::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy value) {
  _internal_set_domain_reduction_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DecisionStrategyProto.domain_reduction_strategy)
}
inline ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy DecisionStrategyProto::_internal_domain_reduction_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>(_impl_.domain_reduction_strategy_);
}
inline void DecisionStrategyProto::_internal_set_domain_reduction_strategy(::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.domain_reduction_strategy_ = value;
}

// repeated .operations_research.sat.DecisionStrategyProto.AffineTransformation transformations = 4;
inline int DecisionStrategyProto::_internal_transformations_size() const {
  return _internal_transformations().size();
}
inline int DecisionStrategyProto::transformations_size() const {
  return _internal_transformations_size();
}
inline void DecisionStrategyProto::clear_transformations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.transformations_.Clear();
}
inline ::operations_research::sat::DecisionStrategyProto_AffineTransformation* DecisionStrategyProto::mutable_transformations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.DecisionStrategyProto.transformations)
  return _internal_mutable_transformations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>* DecisionStrategyProto::mutable_transformations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.DecisionStrategyProto.transformations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_transformations();
}
inline const ::operations_research::sat::DecisionStrategyProto_AffineTransformation& DecisionStrategyProto::transformations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.DecisionStrategyProto.transformations)
  return _internal_transformations().Get(index);
}
inline ::operations_research::sat::DecisionStrategyProto_AffineTransformation* DecisionStrategyProto::add_transformations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::DecisionStrategyProto_AffineTransformation* _add = _internal_mutable_transformations()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.DecisionStrategyProto.transformations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>& DecisionStrategyProto::transformations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.DecisionStrategyProto.transformations)
  return _internal_transformations();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>&
DecisionStrategyProto::_internal_transformations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.transformations_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto_AffineTransformation>*
DecisionStrategyProto::_internal_mutable_transformations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.transformations_;
}

// -------------------------------------------------------------------

// PartialVariableAssignment

// repeated int32 vars = 1;
inline int PartialVariableAssignment::_internal_vars_size() const {
  return _internal_vars().size();
}
inline int PartialVariableAssignment::vars_size() const {
  return _internal_vars_size();
}
inline void PartialVariableAssignment::clear_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vars_.Clear();
}
inline ::int32_t PartialVariableAssignment::vars(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.PartialVariableAssignment.vars)
  return _internal_vars().Get(index);
}
inline void PartialVariableAssignment::set_vars(int index, ::int32_t value) {
  _internal_mutable_vars()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.PartialVariableAssignment.vars)
}
inline void PartialVariableAssignment::add_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_vars()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.PartialVariableAssignment.vars)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PartialVariableAssignment::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.PartialVariableAssignment.vars)
  return _internal_vars();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PartialVariableAssignment::mutable_vars()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.PartialVariableAssignment.vars)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_vars();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PartialVariableAssignment::_internal_vars()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vars_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PartialVariableAssignment::_internal_mutable_vars() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.vars_;
}

// repeated int64 values = 2;
inline int PartialVariableAssignment::_internal_values_size() const {
  return _internal_values().size();
}
inline int PartialVariableAssignment::values_size() const {
  return _internal_values_size();
}
inline void PartialVariableAssignment::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::int64_t PartialVariableAssignment::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.PartialVariableAssignment.values)
  return _internal_values().Get(index);
}
inline void PartialVariableAssignment::set_values(int index, ::int64_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.PartialVariableAssignment.values)
}
inline void PartialVariableAssignment::add_values(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.PartialVariableAssignment.values)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& PartialVariableAssignment::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.PartialVariableAssignment.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int64_t>* PartialVariableAssignment::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.PartialVariableAssignment.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& PartialVariableAssignment::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* PartialVariableAssignment::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SparsePermutationProto

// repeated int32 support = 1;
inline int SparsePermutationProto::_internal_support_size() const {
  return _internal_support().size();
}
inline int SparsePermutationProto::support_size() const {
  return _internal_support_size();
}
inline void SparsePermutationProto::clear_support() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.support_.Clear();
}
inline ::int32_t SparsePermutationProto::support(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SparsePermutationProto.support)
  return _internal_support().Get(index);
}
inline void SparsePermutationProto::set_support(int index, ::int32_t value) {
  _internal_mutable_support()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.SparsePermutationProto.support)
}
inline void SparsePermutationProto::add_support(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_support()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.SparsePermutationProto.support)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SparsePermutationProto::support() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.SparsePermutationProto.support)
  return _internal_support();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SparsePermutationProto::mutable_support()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.SparsePermutationProto.support)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_support();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SparsePermutationProto::_internal_support()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.support_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SparsePermutationProto::_internal_mutable_support() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.support_;
}

// repeated int32 cycle_sizes = 2;
inline int SparsePermutationProto::_internal_cycle_sizes_size() const {
  return _internal_cycle_sizes().size();
}
inline int SparsePermutationProto::cycle_sizes_size() const {
  return _internal_cycle_sizes_size();
}
inline void SparsePermutationProto::clear_cycle_sizes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cycle_sizes_.Clear();
}
inline ::int32_t SparsePermutationProto::cycle_sizes(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.SparsePermutationProto.cycle_sizes)
  return _internal_cycle_sizes().Get(index);
}
inline void SparsePermutationProto::set_cycle_sizes(int index, ::int32_t value) {
  _internal_mutable_cycle_sizes()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.SparsePermutationProto.cycle_sizes)
}
inline void SparsePermutationProto::add_cycle_sizes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_cycle_sizes()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.SparsePermutationProto.cycle_sizes)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SparsePermutationProto::cycle_sizes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.SparsePermutationProto.cycle_sizes)
  return _internal_cycle_sizes();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SparsePermutationProto::mutable_cycle_sizes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.SparsePermutationProto.cycle_sizes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_cycle_sizes();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SparsePermutationProto::_internal_cycle_sizes()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cycle_sizes_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SparsePermutationProto::_internal_mutable_cycle_sizes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.cycle_sizes_;
}

// -------------------------------------------------------------------

// DenseMatrixProto

// int32 num_rows = 1;
inline void DenseMatrixProto::clear_num_rows() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_rows_ = 0;
}
inline ::int32_t DenseMatrixProto::num_rows() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DenseMatrixProto.num_rows)
  return _internal_num_rows();
}
inline void DenseMatrixProto::set_num_rows(::int32_t value) {
  _internal_set_num_rows(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DenseMatrixProto.num_rows)
}
inline ::int32_t DenseMatrixProto::_internal_num_rows() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_rows_;
}
inline void DenseMatrixProto::_internal_set_num_rows(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_rows_ = value;
}

// int32 num_cols = 2;
inline void DenseMatrixProto::clear_num_cols() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_cols_ = 0;
}
inline ::int32_t DenseMatrixProto::num_cols() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DenseMatrixProto.num_cols)
  return _internal_num_cols();
}
inline void DenseMatrixProto::set_num_cols(::int32_t value) {
  _internal_set_num_cols(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DenseMatrixProto.num_cols)
}
inline ::int32_t DenseMatrixProto::_internal_num_cols() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_cols_;
}
inline void DenseMatrixProto::_internal_set_num_cols(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_cols_ = value;
}

// repeated int32 entries = 3;
inline int DenseMatrixProto::_internal_entries_size() const {
  return _internal_entries().size();
}
inline int DenseMatrixProto::entries_size() const {
  return _internal_entries_size();
}
inline void DenseMatrixProto::clear_entries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entries_.Clear();
}
inline ::int32_t DenseMatrixProto::entries(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.DenseMatrixProto.entries)
  return _internal_entries().Get(index);
}
inline void DenseMatrixProto::set_entries(int index, ::int32_t value) {
  _internal_mutable_entries()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.DenseMatrixProto.entries)
}
inline void DenseMatrixProto::add_entries(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_entries()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.DenseMatrixProto.entries)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& DenseMatrixProto::entries() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.DenseMatrixProto.entries)
  return _internal_entries();
}
inline ::google::protobuf::RepeatedField<::int32_t>* DenseMatrixProto::mutable_entries()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.DenseMatrixProto.entries)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_entries();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& DenseMatrixProto::_internal_entries()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entries_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* DenseMatrixProto::_internal_mutable_entries() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.entries_;
}

// -------------------------------------------------------------------

// SymmetryProto

// repeated .operations_research.sat.SparsePermutationProto permutations = 1;
inline int SymmetryProto::_internal_permutations_size() const {
  return _internal_permutations().size();
}
inline int SymmetryProto::permutations_size() const {
  return _internal_permutations_size();
}
inline void SymmetryProto::clear_permutations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.permutations_.Clear();
}
inline ::operations_research::sat::SparsePermutationProto* SymmetryProto::mutable_permutations(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.SymmetryProto.permutations)
  return _internal_mutable_permutations()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>* SymmetryProto::mutable_permutations()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.SymmetryProto.permutations)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_permutations();
}
inline const ::operations_research::sat::SparsePermutationProto& SymmetryProto::permutations(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.SymmetryProto.permutations)
  return _internal_permutations().Get(index);
}
inline ::operations_research::sat::SparsePermutationProto* SymmetryProto::add_permutations() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::SparsePermutationProto* _add = _internal_mutable_permutations()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.SymmetryProto.permutations)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>& SymmetryProto::permutations() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.SymmetryProto.permutations)
  return _internal_permutations();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>&
SymmetryProto::_internal_permutations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.permutations_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::SparsePermutationProto>*
SymmetryProto::_internal_mutable_permutations() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.permutations_;
}

// repeated .operations_research.sat.DenseMatrixProto orbitopes = 2;
inline int SymmetryProto::_internal_orbitopes_size() const {
  return _internal_orbitopes().size();
}
inline int SymmetryProto::orbitopes_size() const {
  return _internal_orbitopes_size();
}
inline void SymmetryProto::clear_orbitopes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.orbitopes_.Clear();
}
inline ::operations_research::sat::DenseMatrixProto* SymmetryProto::mutable_orbitopes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.SymmetryProto.orbitopes)
  return _internal_mutable_orbitopes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>* SymmetryProto::mutable_orbitopes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.SymmetryProto.orbitopes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_orbitopes();
}
inline const ::operations_research::sat::DenseMatrixProto& SymmetryProto::orbitopes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.SymmetryProto.orbitopes)
  return _internal_orbitopes().Get(index);
}
inline ::operations_research::sat::DenseMatrixProto* SymmetryProto::add_orbitopes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::DenseMatrixProto* _add = _internal_mutable_orbitopes()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.SymmetryProto.orbitopes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>& SymmetryProto::orbitopes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.SymmetryProto.orbitopes)
  return _internal_orbitopes();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>&
SymmetryProto::_internal_orbitopes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.orbitopes_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DenseMatrixProto>*
SymmetryProto::_internal_mutable_orbitopes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.orbitopes_;
}

// -------------------------------------------------------------------

// CpModelProto

// string name = 1;
inline void CpModelProto::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& CpModelProto::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CpModelProto::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.CpModelProto.name)
}
inline std::string* CpModelProto::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.name)
  return _s;
}
inline const std::string& CpModelProto::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void CpModelProto::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* CpModelProto::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* CpModelProto::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpModelProto.name)
  return _impl_.name_.Release();
}
inline void CpModelProto::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpModelProto.name)
}

// repeated .operations_research.sat.IntegerVariableProto variables = 2;
inline int CpModelProto::_internal_variables_size() const {
  return _internal_variables().size();
}
inline int CpModelProto::variables_size() const {
  return _internal_variables_size();
}
inline void CpModelProto::clear_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.variables_.Clear();
}
inline ::operations_research::sat::IntegerVariableProto* CpModelProto::mutable_variables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.variables)
  return _internal_mutable_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>* CpModelProto::mutable_variables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpModelProto.variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_variables();
}
inline const ::operations_research::sat::IntegerVariableProto& CpModelProto::variables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.variables)
  return _internal_variables().Get(index);
}
inline ::operations_research::sat::IntegerVariableProto* CpModelProto::add_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::IntegerVariableProto* _add = _internal_mutable_variables()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CpModelProto.variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>& CpModelProto::variables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpModelProto.variables)
  return _internal_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>&
CpModelProto::_internal_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.variables_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>*
CpModelProto::_internal_mutable_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.variables_;
}

// repeated .operations_research.sat.ConstraintProto constraints = 3;
inline int CpModelProto::_internal_constraints_size() const {
  return _internal_constraints().size();
}
inline int CpModelProto::constraints_size() const {
  return _internal_constraints_size();
}
inline void CpModelProto::clear_constraints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraints_.Clear();
}
inline ::operations_research::sat::ConstraintProto* CpModelProto::mutable_constraints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.constraints)
  return _internal_mutable_constraints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>* CpModelProto::mutable_constraints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpModelProto.constraints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_constraints();
}
inline const ::operations_research::sat::ConstraintProto& CpModelProto::constraints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.constraints)
  return _internal_constraints().Get(index);
}
inline ::operations_research::sat::ConstraintProto* CpModelProto::add_constraints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::ConstraintProto* _add = _internal_mutable_constraints()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CpModelProto.constraints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>& CpModelProto::constraints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpModelProto.constraints)
  return _internal_constraints();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>&
CpModelProto::_internal_constraints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraints_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::ConstraintProto>*
CpModelProto::_internal_mutable_constraints() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.constraints_;
}

// .operations_research.sat.CpObjectiveProto objective = 4;
inline bool CpModelProto::has_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.objective_ != nullptr);
  return value;
}
inline void CpModelProto::clear_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.objective_ != nullptr) _impl_.objective_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::sat::CpObjectiveProto& CpModelProto::_internal_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::CpObjectiveProto* p = _impl_.objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::CpObjectiveProto&>(::operations_research::sat::_CpObjectiveProto_default_instance_);
}
inline const ::operations_research::sat::CpObjectiveProto& CpModelProto::objective() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.objective)
  return _internal_objective();
}
inline void CpModelProto::unsafe_arena_set_allocated_objective(::operations_research::sat::CpObjectiveProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.objective_);
  }
  _impl_.objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CpModelProto.objective)
}
inline ::operations_research::sat::CpObjectiveProto* CpModelProto::release_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::CpObjectiveProto* released = _impl_.objective_;
  _impl_.objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::CpObjectiveProto* CpModelProto::unsafe_arena_release_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpModelProto.objective)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::CpObjectiveProto* temp = _impl_.objective_;
  _impl_.objective_ = nullptr;
  return temp;
}
inline ::operations_research::sat::CpObjectiveProto* CpModelProto::_internal_mutable_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::CpObjectiveProto>(GetArena());
    _impl_.objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(p);
  }
  return _impl_.objective_;
}
inline ::operations_research::sat::CpObjectiveProto* CpModelProto::mutable_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::CpObjectiveProto* _msg = _internal_mutable_objective();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.objective)
  return _msg;
}
inline void CpModelProto::set_allocated_objective(::operations_research::sat::CpObjectiveProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(_impl_.objective_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpModelProto.objective)
}

// .operations_research.sat.FloatObjectiveProto floating_point_objective = 9;
inline bool CpModelProto::has_floating_point_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.floating_point_objective_ != nullptr);
  return value;
}
inline void CpModelProto::clear_floating_point_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.floating_point_objective_ != nullptr) _impl_.floating_point_objective_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::operations_research::sat::FloatObjectiveProto& CpModelProto::_internal_floating_point_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::FloatObjectiveProto* p = _impl_.floating_point_objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::FloatObjectiveProto&>(::operations_research::sat::_FloatObjectiveProto_default_instance_);
}
inline const ::operations_research::sat::FloatObjectiveProto& CpModelProto::floating_point_objective() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.floating_point_objective)
  return _internal_floating_point_objective();
}
inline void CpModelProto::unsafe_arena_set_allocated_floating_point_objective(::operations_research::sat::FloatObjectiveProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.floating_point_objective_);
  }
  _impl_.floating_point_objective_ = reinterpret_cast<::operations_research::sat::FloatObjectiveProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CpModelProto.floating_point_objective)
}
inline ::operations_research::sat::FloatObjectiveProto* CpModelProto::release_floating_point_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::sat::FloatObjectiveProto* released = _impl_.floating_point_objective_;
  _impl_.floating_point_objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::FloatObjectiveProto* CpModelProto::unsafe_arena_release_floating_point_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpModelProto.floating_point_objective)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::sat::FloatObjectiveProto* temp = _impl_.floating_point_objective_;
  _impl_.floating_point_objective_ = nullptr;
  return temp;
}
inline ::operations_research::sat::FloatObjectiveProto* CpModelProto::_internal_mutable_floating_point_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.floating_point_objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::FloatObjectiveProto>(GetArena());
    _impl_.floating_point_objective_ = reinterpret_cast<::operations_research::sat::FloatObjectiveProto*>(p);
  }
  return _impl_.floating_point_objective_;
}
inline ::operations_research::sat::FloatObjectiveProto* CpModelProto::mutable_floating_point_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::FloatObjectiveProto* _msg = _internal_mutable_floating_point_objective();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.floating_point_objective)
  return _msg;
}
inline void CpModelProto::set_allocated_floating_point_objective(::operations_research::sat::FloatObjectiveProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::FloatObjectiveProto*>(_impl_.floating_point_objective_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::FloatObjectiveProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.floating_point_objective_ = reinterpret_cast<::operations_research::sat::FloatObjectiveProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpModelProto.floating_point_objective)
}

// repeated .operations_research.sat.DecisionStrategyProto search_strategy = 5;
inline int CpModelProto::_internal_search_strategy_size() const {
  return _internal_search_strategy().size();
}
inline int CpModelProto::search_strategy_size() const {
  return _internal_search_strategy_size();
}
inline void CpModelProto::clear_search_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.search_strategy_.Clear();
}
inline ::operations_research::sat::DecisionStrategyProto* CpModelProto::mutable_search_strategy(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.search_strategy)
  return _internal_mutable_search_strategy()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>* CpModelProto::mutable_search_strategy()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpModelProto.search_strategy)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_search_strategy();
}
inline const ::operations_research::sat::DecisionStrategyProto& CpModelProto::search_strategy(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.search_strategy)
  return _internal_search_strategy().Get(index);
}
inline ::operations_research::sat::DecisionStrategyProto* CpModelProto::add_search_strategy() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::DecisionStrategyProto* _add = _internal_mutable_search_strategy()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CpModelProto.search_strategy)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>& CpModelProto::search_strategy() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpModelProto.search_strategy)
  return _internal_search_strategy();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>&
CpModelProto::_internal_search_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.search_strategy_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::DecisionStrategyProto>*
CpModelProto::_internal_mutable_search_strategy() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.search_strategy_;
}

// .operations_research.sat.PartialVariableAssignment solution_hint = 6;
inline bool CpModelProto::has_solution_hint() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solution_hint_ != nullptr);
  return value;
}
inline void CpModelProto::clear_solution_hint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.solution_hint_ != nullptr) _impl_.solution_hint_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::sat::PartialVariableAssignment& CpModelProto::_internal_solution_hint() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::PartialVariableAssignment* p = _impl_.solution_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::PartialVariableAssignment&>(::operations_research::sat::_PartialVariableAssignment_default_instance_);
}
inline const ::operations_research::sat::PartialVariableAssignment& CpModelProto::solution_hint() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.solution_hint)
  return _internal_solution_hint();
}
inline void CpModelProto::unsafe_arena_set_allocated_solution_hint(::operations_research::sat::PartialVariableAssignment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solution_hint_);
  }
  _impl_.solution_hint_ = reinterpret_cast<::operations_research::sat::PartialVariableAssignment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CpModelProto.solution_hint)
}
inline ::operations_research::sat::PartialVariableAssignment* CpModelProto::release_solution_hint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::PartialVariableAssignment* released = _impl_.solution_hint_;
  _impl_.solution_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::PartialVariableAssignment* CpModelProto::unsafe_arena_release_solution_hint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpModelProto.solution_hint)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::PartialVariableAssignment* temp = _impl_.solution_hint_;
  _impl_.solution_hint_ = nullptr;
  return temp;
}
inline ::operations_research::sat::PartialVariableAssignment* CpModelProto::_internal_mutable_solution_hint() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.solution_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::PartialVariableAssignment>(GetArena());
    _impl_.solution_hint_ = reinterpret_cast<::operations_research::sat::PartialVariableAssignment*>(p);
  }
  return _impl_.solution_hint_;
}
inline ::operations_research::sat::PartialVariableAssignment* CpModelProto::mutable_solution_hint() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::PartialVariableAssignment* _msg = _internal_mutable_solution_hint();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.solution_hint)
  return _msg;
}
inline void CpModelProto::set_allocated_solution_hint(::operations_research::sat::PartialVariableAssignment* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::PartialVariableAssignment*>(_impl_.solution_hint_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::PartialVariableAssignment*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.solution_hint_ = reinterpret_cast<::operations_research::sat::PartialVariableAssignment*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpModelProto.solution_hint)
}

// repeated int32 assumptions = 7;
inline int CpModelProto::_internal_assumptions_size() const {
  return _internal_assumptions().size();
}
inline int CpModelProto::assumptions_size() const {
  return _internal_assumptions_size();
}
inline void CpModelProto::clear_assumptions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.assumptions_.Clear();
}
inline ::int32_t CpModelProto::assumptions(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.assumptions)
  return _internal_assumptions().Get(index);
}
inline void CpModelProto::set_assumptions(int index, ::int32_t value) {
  _internal_mutable_assumptions()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpModelProto.assumptions)
}
inline void CpModelProto::add_assumptions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_assumptions()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpModelProto.assumptions)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpModelProto::assumptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpModelProto.assumptions)
  return _internal_assumptions();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpModelProto::mutable_assumptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpModelProto.assumptions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_assumptions();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpModelProto::_internal_assumptions()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.assumptions_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpModelProto::_internal_mutable_assumptions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.assumptions_;
}

// .operations_research.sat.SymmetryProto symmetry = 8;
inline bool CpModelProto::has_symmetry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.symmetry_ != nullptr);
  return value;
}
inline void CpModelProto::clear_symmetry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.symmetry_ != nullptr) _impl_.symmetry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::sat::SymmetryProto& CpModelProto::_internal_symmetry() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::SymmetryProto* p = _impl_.symmetry_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::SymmetryProto&>(::operations_research::sat::_SymmetryProto_default_instance_);
}
inline const ::operations_research::sat::SymmetryProto& CpModelProto::symmetry() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpModelProto.symmetry)
  return _internal_symmetry();
}
inline void CpModelProto::unsafe_arena_set_allocated_symmetry(::operations_research::sat::SymmetryProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.symmetry_);
  }
  _impl_.symmetry_ = reinterpret_cast<::operations_research::sat::SymmetryProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CpModelProto.symmetry)
}
inline ::operations_research::sat::SymmetryProto* CpModelProto::release_symmetry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::SymmetryProto* released = _impl_.symmetry_;
  _impl_.symmetry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::SymmetryProto* CpModelProto::unsafe_arena_release_symmetry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpModelProto.symmetry)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::SymmetryProto* temp = _impl_.symmetry_;
  _impl_.symmetry_ = nullptr;
  return temp;
}
inline ::operations_research::sat::SymmetryProto* CpModelProto::_internal_mutable_symmetry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.symmetry_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::SymmetryProto>(GetArena());
    _impl_.symmetry_ = reinterpret_cast<::operations_research::sat::SymmetryProto*>(p);
  }
  return _impl_.symmetry_;
}
inline ::operations_research::sat::SymmetryProto* CpModelProto::mutable_symmetry() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::SymmetryProto* _msg = _internal_mutable_symmetry();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpModelProto.symmetry)
  return _msg;
}
inline void CpModelProto::set_allocated_symmetry(::operations_research::sat::SymmetryProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::SymmetryProto*>(_impl_.symmetry_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::SymmetryProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.symmetry_ = reinterpret_cast<::operations_research::sat::SymmetryProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpModelProto.symmetry)
}

// -------------------------------------------------------------------

// CpSolverSolution

// repeated int64 values = 1;
inline int CpSolverSolution::_internal_values_size() const {
  return _internal_values().size();
}
inline int CpSolverSolution::values_size() const {
  return _internal_values_size();
}
inline void CpSolverSolution::clear_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.values_.Clear();
}
inline ::int64_t CpSolverSolution::values(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverSolution.values)
  return _internal_values().Get(index);
}
inline void CpSolverSolution::set_values(int index, ::int64_t value) {
  _internal_mutable_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverSolution.values)
}
inline void CpSolverSolution::add_values(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_values()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpSolverSolution.values)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpSolverSolution::values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpSolverSolution.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpSolverSolution::mutable_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpSolverSolution.values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpSolverSolution::_internal_values()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpSolverSolution::_internal_mutable_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// CpSolverResponse

// .operations_research.sat.CpSolverStatus status = 1;
inline void CpSolverResponse::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::operations_research::sat::CpSolverStatus CpSolverResponse::status() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.status)
  return _internal_status();
}
inline void CpSolverResponse::set_status(::operations_research::sat::CpSolverStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.status)
}
inline ::operations_research::sat::CpSolverStatus CpSolverResponse::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::sat::CpSolverStatus>(_impl_.status_);
}
inline void CpSolverResponse::_internal_set_status(::operations_research::sat::CpSolverStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// repeated int64 solution = 2;
inline int CpSolverResponse::_internal_solution_size() const {
  return _internal_solution().size();
}
inline int CpSolverResponse::solution_size() const {
  return _internal_solution_size();
}
inline void CpSolverResponse::clear_solution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_.Clear();
}
inline ::int64_t CpSolverResponse::solution(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.solution)
  return _internal_solution().Get(index);
}
inline void CpSolverResponse::set_solution(int index, ::int64_t value) {
  _internal_mutable_solution()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.solution)
}
inline void CpSolverResponse::add_solution(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_solution()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpSolverResponse.solution)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpSolverResponse::solution() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpSolverResponse.solution)
  return _internal_solution();
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpSolverResponse::mutable_solution()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpSolverResponse.solution)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_solution();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& CpSolverResponse::_internal_solution()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* CpSolverResponse::_internal_mutable_solution() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.solution_;
}

// double objective_value = 3;
inline void CpSolverResponse::clear_objective_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_value_ = 0;
}
inline double CpSolverResponse::objective_value() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.objective_value)
  return _internal_objective_value();
}
inline void CpSolverResponse::set_objective_value(double value) {
  _internal_set_objective_value(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.objective_value)
}
inline double CpSolverResponse::_internal_objective_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_value_;
}
inline void CpSolverResponse::_internal_set_objective_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.objective_value_ = value;
}

// double best_objective_bound = 4;
inline void CpSolverResponse::clear_best_objective_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.best_objective_bound_ = 0;
}
inline double CpSolverResponse::best_objective_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.best_objective_bound)
  return _internal_best_objective_bound();
}
inline void CpSolverResponse::set_best_objective_bound(double value) {
  _internal_set_best_objective_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.best_objective_bound)
}
inline double CpSolverResponse::_internal_best_objective_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.best_objective_bound_;
}
inline void CpSolverResponse::_internal_set_best_objective_bound(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.best_objective_bound_ = value;
}

// repeated .operations_research.sat.CpSolverSolution additional_solutions = 27;
inline int CpSolverResponse::_internal_additional_solutions_size() const {
  return _internal_additional_solutions().size();
}
inline int CpSolverResponse::additional_solutions_size() const {
  return _internal_additional_solutions_size();
}
inline void CpSolverResponse::clear_additional_solutions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.additional_solutions_.Clear();
}
inline ::operations_research::sat::CpSolverSolution* CpSolverResponse::mutable_additional_solutions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpSolverResponse.additional_solutions)
  return _internal_mutable_additional_solutions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>* CpSolverResponse::mutable_additional_solutions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpSolverResponse.additional_solutions)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_additional_solutions();
}
inline const ::operations_research::sat::CpSolverSolution& CpSolverResponse::additional_solutions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.additional_solutions)
  return _internal_additional_solutions().Get(index);
}
inline ::operations_research::sat::CpSolverSolution* CpSolverResponse::add_additional_solutions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::CpSolverSolution* _add = _internal_mutable_additional_solutions()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CpSolverResponse.additional_solutions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>& CpSolverResponse::additional_solutions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpSolverResponse.additional_solutions)
  return _internal_additional_solutions();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>&
CpSolverResponse::_internal_additional_solutions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.additional_solutions_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::CpSolverSolution>*
CpSolverResponse::_internal_mutable_additional_solutions() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.additional_solutions_;
}

// repeated .operations_research.sat.IntegerVariableProto tightened_variables = 21;
inline int CpSolverResponse::_internal_tightened_variables_size() const {
  return _internal_tightened_variables().size();
}
inline int CpSolverResponse::tightened_variables_size() const {
  return _internal_tightened_variables_size();
}
inline void CpSolverResponse::clear_tightened_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tightened_variables_.Clear();
}
inline ::operations_research::sat::IntegerVariableProto* CpSolverResponse::mutable_tightened_variables(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpSolverResponse.tightened_variables)
  return _internal_mutable_tightened_variables()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>* CpSolverResponse::mutable_tightened_variables()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpSolverResponse.tightened_variables)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tightened_variables();
}
inline const ::operations_research::sat::IntegerVariableProto& CpSolverResponse::tightened_variables(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.tightened_variables)
  return _internal_tightened_variables().Get(index);
}
inline ::operations_research::sat::IntegerVariableProto* CpSolverResponse::add_tightened_variables() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::IntegerVariableProto* _add = _internal_mutable_tightened_variables()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.CpSolverResponse.tightened_variables)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>& CpSolverResponse::tightened_variables() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpSolverResponse.tightened_variables)
  return _internal_tightened_variables();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>&
CpSolverResponse::_internal_tightened_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tightened_variables_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::IntegerVariableProto>*
CpSolverResponse::_internal_mutable_tightened_variables() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tightened_variables_;
}

// repeated int32 sufficient_assumptions_for_infeasibility = 23;
inline int CpSolverResponse::_internal_sufficient_assumptions_for_infeasibility_size() const {
  return _internal_sufficient_assumptions_for_infeasibility().size();
}
inline int CpSolverResponse::sufficient_assumptions_for_infeasibility_size() const {
  return _internal_sufficient_assumptions_for_infeasibility_size();
}
inline void CpSolverResponse::clear_sufficient_assumptions_for_infeasibility() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sufficient_assumptions_for_infeasibility_.Clear();
}
inline ::int32_t CpSolverResponse::sufficient_assumptions_for_infeasibility(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.sufficient_assumptions_for_infeasibility)
  return _internal_sufficient_assumptions_for_infeasibility().Get(index);
}
inline void CpSolverResponse::set_sufficient_assumptions_for_infeasibility(int index, ::int32_t value) {
  _internal_mutable_sufficient_assumptions_for_infeasibility()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.sufficient_assumptions_for_infeasibility)
}
inline void CpSolverResponse::add_sufficient_assumptions_for_infeasibility(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_sufficient_assumptions_for_infeasibility()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.CpSolverResponse.sufficient_assumptions_for_infeasibility)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpSolverResponse::sufficient_assumptions_for_infeasibility() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.CpSolverResponse.sufficient_assumptions_for_infeasibility)
  return _internal_sufficient_assumptions_for_infeasibility();
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpSolverResponse::mutable_sufficient_assumptions_for_infeasibility()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.CpSolverResponse.sufficient_assumptions_for_infeasibility)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sufficient_assumptions_for_infeasibility();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& CpSolverResponse::_internal_sufficient_assumptions_for_infeasibility()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sufficient_assumptions_for_infeasibility_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* CpSolverResponse::_internal_mutable_sufficient_assumptions_for_infeasibility() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sufficient_assumptions_for_infeasibility_;
}

// .operations_research.sat.CpObjectiveProto integer_objective = 28;
inline bool CpSolverResponse::has_integer_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.integer_objective_ != nullptr);
  return value;
}
inline void CpSolverResponse::clear_integer_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.integer_objective_ != nullptr) _impl_.integer_objective_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::sat::CpObjectiveProto& CpSolverResponse::_internal_integer_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::CpObjectiveProto* p = _impl_.integer_objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::CpObjectiveProto&>(::operations_research::sat::_CpObjectiveProto_default_instance_);
}
inline const ::operations_research::sat::CpObjectiveProto& CpSolverResponse::integer_objective() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.integer_objective)
  return _internal_integer_objective();
}
inline void CpSolverResponse::unsafe_arena_set_allocated_integer_objective(::operations_research::sat::CpObjectiveProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.integer_objective_);
  }
  _impl_.integer_objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.CpSolverResponse.integer_objective)
}
inline ::operations_research::sat::CpObjectiveProto* CpSolverResponse::release_integer_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::CpObjectiveProto* released = _impl_.integer_objective_;
  _impl_.integer_objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::CpObjectiveProto* CpSolverResponse::unsafe_arena_release_integer_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpSolverResponse.integer_objective)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::sat::CpObjectiveProto* temp = _impl_.integer_objective_;
  _impl_.integer_objective_ = nullptr;
  return temp;
}
inline ::operations_research::sat::CpObjectiveProto* CpSolverResponse::_internal_mutable_integer_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.integer_objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::CpObjectiveProto>(GetArena());
    _impl_.integer_objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(p);
  }
  return _impl_.integer_objective_;
}
inline ::operations_research::sat::CpObjectiveProto* CpSolverResponse::mutable_integer_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::CpObjectiveProto* _msg = _internal_mutable_integer_objective();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpSolverResponse.integer_objective)
  return _msg;
}
inline void CpSolverResponse::set_allocated_integer_objective(::operations_research::sat::CpObjectiveProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(_impl_.integer_objective_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.integer_objective_ = reinterpret_cast<::operations_research::sat::CpObjectiveProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpSolverResponse.integer_objective)
}

// int64 inner_objective_lower_bound = 29;
inline void CpSolverResponse::clear_inner_objective_lower_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.inner_objective_lower_bound_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::inner_objective_lower_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.inner_objective_lower_bound)
  return _internal_inner_objective_lower_bound();
}
inline void CpSolverResponse::set_inner_objective_lower_bound(::int64_t value) {
  _internal_set_inner_objective_lower_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.inner_objective_lower_bound)
}
inline ::int64_t CpSolverResponse::_internal_inner_objective_lower_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.inner_objective_lower_bound_;
}
inline void CpSolverResponse::_internal_set_inner_objective_lower_bound(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.inner_objective_lower_bound_ = value;
}

// int64 num_integers = 30;
inline void CpSolverResponse::clear_num_integers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_integers_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_integers() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_integers)
  return _internal_num_integers();
}
inline void CpSolverResponse::set_num_integers(::int64_t value) {
  _internal_set_num_integers(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_integers)
}
inline ::int64_t CpSolverResponse::_internal_num_integers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_integers_;
}
inline void CpSolverResponse::_internal_set_num_integers(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_integers_ = value;
}

// int64 num_booleans = 10;
inline void CpSolverResponse::clear_num_booleans() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_booleans_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_booleans() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_booleans)
  return _internal_num_booleans();
}
inline void CpSolverResponse::set_num_booleans(::int64_t value) {
  _internal_set_num_booleans(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_booleans)
}
inline ::int64_t CpSolverResponse::_internal_num_booleans() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_booleans_;
}
inline void CpSolverResponse::_internal_set_num_booleans(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_booleans_ = value;
}

// int64 num_conflicts = 11;
inline void CpSolverResponse::clear_num_conflicts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_conflicts_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_conflicts() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_conflicts)
  return _internal_num_conflicts();
}
inline void CpSolverResponse::set_num_conflicts(::int64_t value) {
  _internal_set_num_conflicts(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_conflicts)
}
inline ::int64_t CpSolverResponse::_internal_num_conflicts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_conflicts_;
}
inline void CpSolverResponse::_internal_set_num_conflicts(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_conflicts_ = value;
}

// int64 num_branches = 12;
inline void CpSolverResponse::clear_num_branches() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_branches_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_branches() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_branches)
  return _internal_num_branches();
}
inline void CpSolverResponse::set_num_branches(::int64_t value) {
  _internal_set_num_branches(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_branches)
}
inline ::int64_t CpSolverResponse::_internal_num_branches() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_branches_;
}
inline void CpSolverResponse::_internal_set_num_branches(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_branches_ = value;
}

// int64 num_binary_propagations = 13;
inline void CpSolverResponse::clear_num_binary_propagations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_binary_propagations_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_binary_propagations() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_binary_propagations)
  return _internal_num_binary_propagations();
}
inline void CpSolverResponse::set_num_binary_propagations(::int64_t value) {
  _internal_set_num_binary_propagations(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_binary_propagations)
}
inline ::int64_t CpSolverResponse::_internal_num_binary_propagations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_binary_propagations_;
}
inline void CpSolverResponse::_internal_set_num_binary_propagations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_binary_propagations_ = value;
}

// int64 num_integer_propagations = 14;
inline void CpSolverResponse::clear_num_integer_propagations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_integer_propagations_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_integer_propagations() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_integer_propagations)
  return _internal_num_integer_propagations();
}
inline void CpSolverResponse::set_num_integer_propagations(::int64_t value) {
  _internal_set_num_integer_propagations(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_integer_propagations)
}
inline ::int64_t CpSolverResponse::_internal_num_integer_propagations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_integer_propagations_;
}
inline void CpSolverResponse::_internal_set_num_integer_propagations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_integer_propagations_ = value;
}

// int64 num_restarts = 24;
inline void CpSolverResponse::clear_num_restarts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_restarts_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_restarts() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_restarts)
  return _internal_num_restarts();
}
inline void CpSolverResponse::set_num_restarts(::int64_t value) {
  _internal_set_num_restarts(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_restarts)
}
inline ::int64_t CpSolverResponse::_internal_num_restarts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_restarts_;
}
inline void CpSolverResponse::_internal_set_num_restarts(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_restarts_ = value;
}

// int64 num_lp_iterations = 25;
inline void CpSolverResponse::clear_num_lp_iterations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_lp_iterations_ = ::int64_t{0};
}
inline ::int64_t CpSolverResponse::num_lp_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.num_lp_iterations)
  return _internal_num_lp_iterations();
}
inline void CpSolverResponse::set_num_lp_iterations(::int64_t value) {
  _internal_set_num_lp_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.num_lp_iterations)
}
inline ::int64_t CpSolverResponse::_internal_num_lp_iterations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_lp_iterations_;
}
inline void CpSolverResponse::_internal_set_num_lp_iterations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_lp_iterations_ = value;
}

// double wall_time = 15;
inline void CpSolverResponse::clear_wall_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.wall_time_ = 0;
}
inline double CpSolverResponse::wall_time() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.wall_time)
  return _internal_wall_time();
}
inline void CpSolverResponse::set_wall_time(double value) {
  _internal_set_wall_time(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.wall_time)
}
inline double CpSolverResponse::_internal_wall_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.wall_time_;
}
inline void CpSolverResponse::_internal_set_wall_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.wall_time_ = value;
}

// double user_time = 16;
inline void CpSolverResponse::clear_user_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.user_time_ = 0;
}
inline double CpSolverResponse::user_time() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.user_time)
  return _internal_user_time();
}
inline void CpSolverResponse::set_user_time(double value) {
  _internal_set_user_time(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.user_time)
}
inline double CpSolverResponse::_internal_user_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.user_time_;
}
inline void CpSolverResponse::_internal_set_user_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.user_time_ = value;
}

// double deterministic_time = 17;
inline void CpSolverResponse::clear_deterministic_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deterministic_time_ = 0;
}
inline double CpSolverResponse::deterministic_time() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.deterministic_time)
  return _internal_deterministic_time();
}
inline void CpSolverResponse::set_deterministic_time(double value) {
  _internal_set_deterministic_time(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.deterministic_time)
}
inline double CpSolverResponse::_internal_deterministic_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deterministic_time_;
}
inline void CpSolverResponse::_internal_set_deterministic_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deterministic_time_ = value;
}

// double gap_integral = 22;
inline void CpSolverResponse::clear_gap_integral() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gap_integral_ = 0;
}
inline double CpSolverResponse::gap_integral() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.gap_integral)
  return _internal_gap_integral();
}
inline void CpSolverResponse::set_gap_integral(double value) {
  _internal_set_gap_integral(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.gap_integral)
}
inline double CpSolverResponse::_internal_gap_integral() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gap_integral_;
}
inline void CpSolverResponse::_internal_set_gap_integral(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gap_integral_ = value;
}

// string solution_info = 20;
inline void CpSolverResponse::clear_solution_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_info_.ClearToEmpty();
}
inline const std::string& CpSolverResponse::solution_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.solution_info)
  return _internal_solution_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CpSolverResponse::set_solution_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solution_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.solution_info)
}
inline std::string* CpSolverResponse::mutable_solution_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_solution_info();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpSolverResponse.solution_info)
  return _s;
}
inline const std::string& CpSolverResponse::_internal_solution_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_info_.Get();
}
inline void CpSolverResponse::_internal_set_solution_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solution_info_.Set(value, GetArena());
}
inline std::string* CpSolverResponse::_internal_mutable_solution_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.solution_info_.Mutable( GetArena());
}
inline std::string* CpSolverResponse::release_solution_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpSolverResponse.solution_info)
  return _impl_.solution_info_.Release();
}
inline void CpSolverResponse::set_allocated_solution_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.solution_info_.IsDefault()) {
          _impl_.solution_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpSolverResponse.solution_info)
}

// string solve_log = 26;
inline void CpSolverResponse::clear_solve_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solve_log_.ClearToEmpty();
}
inline const std::string& CpSolverResponse::solve_log() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.CpSolverResponse.solve_log)
  return _internal_solve_log();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CpSolverResponse::set_solve_log(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solve_log_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.CpSolverResponse.solve_log)
}
inline std::string* CpSolverResponse::mutable_solve_log() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_solve_log();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.CpSolverResponse.solve_log)
  return _s;
}
inline const std::string& CpSolverResponse::_internal_solve_log() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solve_log_.Get();
}
inline void CpSolverResponse::_internal_set_solve_log(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solve_log_.Set(value, GetArena());
}
inline std::string* CpSolverResponse::_internal_mutable_solve_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.solve_log_.Mutable( GetArena());
}
inline std::string* CpSolverResponse::release_solve_log() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.CpSolverResponse.solve_log)
  return _impl_.solve_log_.Release();
}
inline void CpSolverResponse::set_allocated_solve_log(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solve_log_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.solve_log_.IsDefault()) {
          _impl_.solve_log_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.CpSolverResponse.solve_log)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy>() {
  return ::operations_research::sat::DecisionStrategyProto_VariableSelectionStrategy_descriptor();
}
template <>
struct is_proto_enum<::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy>() {
  return ::operations_research::sat::DecisionStrategyProto_DomainReductionStrategy_descriptor();
}
template <>
struct is_proto_enum<::operations_research::sat::CpSolverStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::sat::CpSolverStatus>() {
  return ::operations_research::sat::CpSolverStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fcp_5fmodel_2eproto_2epb_2eh
