// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/packing/vector_bin_packing.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
namespace operations_research {
namespace packing {
namespace vbp {
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class VectorBinPackingOneBinInSolution;
struct VectorBinPackingOneBinInSolutionDefaultTypeInternal;
extern VectorBinPackingOneBinInSolutionDefaultTypeInternal _VectorBinPackingOneBinInSolution_default_instance_;
class VectorBinPackingProblem;
struct VectorBinPackingProblemDefaultTypeInternal;
extern VectorBinPackingProblemDefaultTypeInternal _VectorBinPackingProblem_default_instance_;
class VectorBinPackingSolution;
struct VectorBinPackingSolutionDefaultTypeInternal;
extern VectorBinPackingSolutionDefaultTypeInternal _VectorBinPackingSolution_default_instance_;
}  // namespace vbp
}  // namespace packing
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace packing {
namespace vbp {
enum VectorBinPackingSolveStatus : int {
  VECTOR_BIN_PACKING_SOLVE_STATUS_UNSPECIFIED = 0,
  OPTIMAL = 1,
  FEASIBLE = 2,
  INFEASIBLE = 3,
  VectorBinPackingSolveStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VectorBinPackingSolveStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VectorBinPackingSolveStatus_IsValid(int value);
extern const uint32_t VectorBinPackingSolveStatus_internal_data_[];
constexpr VectorBinPackingSolveStatus VectorBinPackingSolveStatus_MIN = static_cast<VectorBinPackingSolveStatus>(0);
constexpr VectorBinPackingSolveStatus VectorBinPackingSolveStatus_MAX = static_cast<VectorBinPackingSolveStatus>(3);
constexpr int VectorBinPackingSolveStatus_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
VectorBinPackingSolveStatus_descriptor();
template <typename T>
const std::string& VectorBinPackingSolveStatus_Name(T value) {
  static_assert(std::is_same<T, VectorBinPackingSolveStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VectorBinPackingSolveStatus_Name().");
  return VectorBinPackingSolveStatus_Name(static_cast<VectorBinPackingSolveStatus>(value));
}
template <>
inline const std::string& VectorBinPackingSolveStatus_Name(VectorBinPackingSolveStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VectorBinPackingSolveStatus_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool VectorBinPackingSolveStatus_Parse(absl::string_view name, VectorBinPackingSolveStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VectorBinPackingSolveStatus>(
      VectorBinPackingSolveStatus_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VectorBinPackingOneBinInSolution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingOneBinInSolution) */ {
 public:
  inline VectorBinPackingOneBinInSolution() : VectorBinPackingOneBinInSolution(nullptr) {}
  ~VectorBinPackingOneBinInSolution() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBinPackingOneBinInSolution(::google::protobuf::internal::ConstantInitialized);

  inline VectorBinPackingOneBinInSolution(const VectorBinPackingOneBinInSolution& from)
      : VectorBinPackingOneBinInSolution(nullptr, from) {}
  VectorBinPackingOneBinInSolution(VectorBinPackingOneBinInSolution&& from) noexcept
    : VectorBinPackingOneBinInSolution() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingOneBinInSolution& operator=(const VectorBinPackingOneBinInSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingOneBinInSolution& operator=(VectorBinPackingOneBinInSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingOneBinInSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingOneBinInSolution* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingOneBinInSolution*>(
               &_VectorBinPackingOneBinInSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VectorBinPackingOneBinInSolution& a, VectorBinPackingOneBinInSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingOneBinInSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingOneBinInSolution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingOneBinInSolution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingOneBinInSolution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingOneBinInSolution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingOneBinInSolution& from) {
    VectorBinPackingOneBinInSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VectorBinPackingOneBinInSolution* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingOneBinInSolution";
  }
  protected:
  explicit VectorBinPackingOneBinInSolution(::google::protobuf::Arena* arena);
  VectorBinPackingOneBinInSolution(::google::protobuf::Arena* arena, const VectorBinPackingOneBinInSolution& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIndicesFieldNumber = 1,
    kItemCopiesFieldNumber = 2,
  };
  // repeated int32 item_indices = 1;
  int item_indices_size() const;
  private:
  int _internal_item_indices_size() const;

  public:
  void clear_item_indices() ;
  ::int32_t item_indices(int index) const;
  void set_item_indices(int index, ::int32_t value);
  void add_item_indices(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& item_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_item_indices();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_item_indices() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_item_indices();

  public:
  // repeated int32 item_copies = 2;
  int item_copies_size() const;
  private:
  int _internal_item_copies_size() const;

  public:
  void clear_item_copies() ;
  ::int32_t item_copies(int index) const;
  void set_item_copies(int index, ::int32_t value);
  void add_item_copies(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& item_copies() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_item_copies();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_item_copies() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_item_copies();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingOneBinInSolution)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> item_indices_;
    mutable ::google::protobuf::internal::CachedSize _item_indices_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> item_copies_;
    mutable ::google::protobuf::internal::CachedSize _item_copies_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};// -------------------------------------------------------------------

class Item final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Item(::google::protobuf::internal::ConstantInitialized);

  inline Item(const Item& from)
      : Item(nullptr, from) {}
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Item* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.packing.vbp.Item";
  }
  protected:
  explicit Item(::google::protobuf::Arena* arena);
  Item(::google::protobuf::Arena* arena, const Item& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceUsageFieldNumber = 2,
    kNameFieldNumber = 1,
    kNumCopiesFieldNumber = 3,
    kMaxNumberOfCopiesPerBinFieldNumber = 4,
    kPenaltyPerMissingCopyFieldNumber = 6,
    kNumOptionalCopiesFieldNumber = 5,
  };
  // repeated int64 resource_usage = 2;
  int resource_usage_size() const;
  private:
  int _internal_resource_usage_size() const;

  public:
  void clear_resource_usage() ;
  ::int64_t resource_usage(int index) const;
  void set_resource_usage(int index, ::int64_t value);
  void add_resource_usage(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& resource_usage() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_resource_usage();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_resource_usage() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_resource_usage();

  public:
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // int32 num_copies = 3;
  void clear_num_copies() ;
  ::int32_t num_copies() const;
  void set_num_copies(::int32_t value);

  private:
  ::int32_t _internal_num_copies() const;
  void _internal_set_num_copies(::int32_t value);

  public:
  // int32 max_number_of_copies_per_bin = 4;
  void clear_max_number_of_copies_per_bin() ;
  ::int32_t max_number_of_copies_per_bin() const;
  void set_max_number_of_copies_per_bin(::int32_t value);

  private:
  ::int32_t _internal_max_number_of_copies_per_bin() const;
  void _internal_set_max_number_of_copies_per_bin(::int32_t value);

  public:
  // double penalty_per_missing_copy = 6;
  void clear_penalty_per_missing_copy() ;
  double penalty_per_missing_copy() const;
  void set_penalty_per_missing_copy(double value);

  private:
  double _internal_penalty_per_missing_copy() const;
  void _internal_set_penalty_per_missing_copy(double value);

  public:
  // int32 num_optional_copies = 5;
  void clear_num_optional_copies() ;
  ::int32_t num_optional_copies() const;
  void set_num_optional_copies(::int32_t value);

  private:
  ::int32_t _internal_num_optional_copies() const;
  void _internal_set_num_optional_copies(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.Item)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> resource_usage_;
    mutable ::google::protobuf::internal::CachedSize _resource_usage_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int32_t num_copies_;
    ::int32_t max_number_of_copies_per_bin_;
    double penalty_per_missing_copy_;
    ::int32_t num_optional_copies_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};// -------------------------------------------------------------------

class VectorBinPackingSolution final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingSolution) */ {
 public:
  inline VectorBinPackingSolution() : VectorBinPackingSolution(nullptr) {}
  ~VectorBinPackingSolution() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBinPackingSolution(::google::protobuf::internal::ConstantInitialized);

  inline VectorBinPackingSolution(const VectorBinPackingSolution& from)
      : VectorBinPackingSolution(nullptr, from) {}
  VectorBinPackingSolution(VectorBinPackingSolution&& from) noexcept
    : VectorBinPackingSolution() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingSolution& operator=(const VectorBinPackingSolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingSolution& operator=(VectorBinPackingSolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingSolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingSolution* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingSolution*>(
               &_VectorBinPackingSolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VectorBinPackingSolution& a, VectorBinPackingSolution& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingSolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingSolution* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingSolution* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingSolution>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingSolution& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingSolution& from) {
    VectorBinPackingSolution::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VectorBinPackingSolution* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingSolution";
  }
  protected:
  explicit VectorBinPackingSolution(::google::protobuf::Arena* arena);
  VectorBinPackingSolution(::google::protobuf::Arena* arena, const VectorBinPackingSolution& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBinsFieldNumber = 2,
    kSolverInfoFieldNumber = 1,
    kObjectiveValueFieldNumber = 4,
    kSolveTimeInSecondsFieldNumber = 5,
    kArcFlowTimeInSecondsFieldNumber = 6,
    kStatusFieldNumber = 3,
  };
  // repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
  int bins_size() const;
  private:
  int _internal_bins_size() const;

  public:
  void clear_bins() ;
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* mutable_bins(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >*
      mutable_bins();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>& _internal_bins() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>* _internal_mutable_bins();
  public:
  const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& bins(int index) const;
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* add_bins();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution >&
      bins() const;
  // string solver_info = 1;
  void clear_solver_info() ;
  const std::string& solver_info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_solver_info(Arg_&& arg, Args_... args);
  std::string* mutable_solver_info();
  PROTOBUF_NODISCARD std::string* release_solver_info();
  void set_allocated_solver_info(std::string* value);

  private:
  const std::string& _internal_solver_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_solver_info(
      const std::string& value);
  std::string* _internal_mutable_solver_info();

  public:
  // double objective_value = 4;
  void clear_objective_value() ;
  double objective_value() const;
  void set_objective_value(double value);

  private:
  double _internal_objective_value() const;
  void _internal_set_objective_value(double value);

  public:
  // double solve_time_in_seconds = 5;
  void clear_solve_time_in_seconds() ;
  double solve_time_in_seconds() const;
  void set_solve_time_in_seconds(double value);

  private:
  double _internal_solve_time_in_seconds() const;
  void _internal_set_solve_time_in_seconds(double value);

  public:
  // double arc_flow_time_in_seconds = 6;
  void clear_arc_flow_time_in_seconds() ;
  double arc_flow_time_in_seconds() const;
  void set_arc_flow_time_in_seconds(double value);

  private:
  double _internal_arc_flow_time_in_seconds() const;
  void _internal_set_arc_flow_time_in_seconds(double value);

  public:
  // .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
  void clear_status() ;
  ::operations_research::packing::vbp::VectorBinPackingSolveStatus status() const;
  void set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value);

  private:
  ::operations_research::packing::vbp::VectorBinPackingSolveStatus _internal_status() const;
  void _internal_set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingSolution)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      76, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution > bins_;
    ::google::protobuf::internal::ArenaStringPtr solver_info_;
    double objective_value_;
    double solve_time_in_seconds_;
    double arc_flow_time_in_seconds_;
    int status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};// -------------------------------------------------------------------

class VectorBinPackingProblem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.packing.vbp.VectorBinPackingProblem) */ {
 public:
  inline VectorBinPackingProblem() : VectorBinPackingProblem(nullptr) {}
  ~VectorBinPackingProblem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VectorBinPackingProblem(::google::protobuf::internal::ConstantInitialized);

  inline VectorBinPackingProblem(const VectorBinPackingProblem& from)
      : VectorBinPackingProblem(nullptr, from) {}
  VectorBinPackingProblem(VectorBinPackingProblem&& from) noexcept
    : VectorBinPackingProblem() {
    *this = ::std::move(from);
  }

  inline VectorBinPackingProblem& operator=(const VectorBinPackingProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorBinPackingProblem& operator=(VectorBinPackingProblem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorBinPackingProblem& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorBinPackingProblem* internal_default_instance() {
    return reinterpret_cast<const VectorBinPackingProblem*>(
               &_VectorBinPackingProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VectorBinPackingProblem& a, VectorBinPackingProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorBinPackingProblem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorBinPackingProblem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VectorBinPackingProblem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VectorBinPackingProblem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VectorBinPackingProblem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VectorBinPackingProblem& from) {
    VectorBinPackingProblem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VectorBinPackingProblem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.packing.vbp.VectorBinPackingProblem";
  }
  protected:
  explicit VectorBinPackingProblem(::google::protobuf::Arena* arena);
  VectorBinPackingProblem(::google::protobuf::Arena* arena, const VectorBinPackingProblem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceCapacityFieldNumber = 2,
    kResourceNameFieldNumber = 3,
    kItemFieldNumber = 4,
    kNameFieldNumber = 1,
    kCostPerBinFieldNumber = 6,
    kMaxBinsFieldNumber = 5,
  };
  // repeated int64 resource_capacity = 2;
  int resource_capacity_size() const;
  private:
  int _internal_resource_capacity_size() const;

  public:
  void clear_resource_capacity() ;
  ::int64_t resource_capacity(int index) const;
  void set_resource_capacity(int index, ::int64_t value);
  void add_resource_capacity(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& resource_capacity() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_resource_capacity();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_resource_capacity() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_resource_capacity();

  public:
  // repeated string resource_name = 3;
  int resource_name_size() const;
  private:
  int _internal_resource_name_size() const;

  public:
  void clear_resource_name() ;
  const std::string& resource_name(int index) const;
  std::string* mutable_resource_name(int index);
  void set_resource_name(int index, const std::string& value);
  void set_resource_name(int index, std::string&& value);
  void set_resource_name(int index, const char* value);
  void set_resource_name(int index, const char* value, std::size_t size);
  void set_resource_name(int index, absl::string_view value);
  std::string* add_resource_name();
  void add_resource_name(const std::string& value);
  void add_resource_name(std::string&& value);
  void add_resource_name(const char* value);
  void add_resource_name(const char* value, std::size_t size);
  void add_resource_name(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& resource_name() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_resource_name();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_resource_name() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_resource_name();

  public:
  // repeated .operations_research.packing.vbp.Item item = 4;
  int item_size() const;
  private:
  int _internal_item_size() const;

  public:
  void clear_item() ;
  ::operations_research::packing::vbp::Item* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::Item >*
      mutable_item();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>& _internal_item() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>* _internal_mutable_item();
  public:
  const ::operations_research::packing::vbp::Item& item(int index) const;
  ::operations_research::packing::vbp::Item* add_item();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::Item >&
      item() const;
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional double cost_per_bin = 6;
  bool has_cost_per_bin() const;
  void clear_cost_per_bin() ;
  double cost_per_bin() const;
  void set_cost_per_bin(double value);

  private:
  double _internal_cost_per_bin() const;
  void _internal_set_cost_per_bin(double value);

  public:
  // int32 max_bins = 5;
  void clear_max_bins() ;
  ::int32_t max_bins() const;
  void set_max_bins(::int32_t value);

  private:
  ::int32_t _internal_max_bins() const;
  void _internal_set_max_bins(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.packing.vbp.VectorBinPackingProblem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      81, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int64_t> resource_capacity_;
    mutable ::google::protobuf::internal::CachedSize _resource_capacity_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField<std::string> resource_name_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::packing::vbp::Item > item_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    double cost_per_bin_;
    ::int32_t max_bins_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Item

// string name = 1;
inline void Item::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Item::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Item::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.name)
}
inline std::string* Item::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.Item.name)
  return _s;
}
inline const std::string& Item::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void Item::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Item::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Item::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.Item.name)
  return _impl_.name_.Release();
}
inline void Item::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.Item.name)
}

// repeated int64 resource_usage = 2;
inline int Item::_internal_resource_usage_size() const {
  return _internal_resource_usage().size();
}
inline int Item::resource_usage_size() const {
  return _internal_resource_usage_size();
}
inline void Item::clear_resource_usage() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_usage_.Clear();
}
inline ::int64_t Item::resource_usage(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.resource_usage)
  return _internal_resource_usage().Get(index);
}
inline void Item::set_resource_usage(int index, ::int64_t value) {
  _internal_mutable_resource_usage()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.resource_usage)
}
inline void Item::add_resource_usage(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_usage()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.Item.resource_usage)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Item::resource_usage() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.Item.resource_usage)
  return _internal_resource_usage();
}
inline ::google::protobuf::RepeatedField<::int64_t>* Item::mutable_resource_usage()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.Item.resource_usage)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_usage();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& Item::_internal_resource_usage()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_usage_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* Item::_internal_mutable_resource_usage() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_usage_;
}

// int32 num_copies = 3;
inline void Item::clear_num_copies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_copies_ = 0;
}
inline ::int32_t Item::num_copies() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.num_copies)
  return _internal_num_copies();
}
inline void Item::set_num_copies(::int32_t value) {
  _internal_set_num_copies(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.num_copies)
}
inline ::int32_t Item::_internal_num_copies() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_copies_;
}
inline void Item::_internal_set_num_copies(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_copies_ = value;
}

// int32 num_optional_copies = 5;
inline void Item::clear_num_optional_copies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_optional_copies_ = 0;
}
inline ::int32_t Item::num_optional_copies() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.num_optional_copies)
  return _internal_num_optional_copies();
}
inline void Item::set_num_optional_copies(::int32_t value) {
  _internal_set_num_optional_copies(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.num_optional_copies)
}
inline ::int32_t Item::_internal_num_optional_copies() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_optional_copies_;
}
inline void Item::_internal_set_num_optional_copies(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.num_optional_copies_ = value;
}

// int32 max_number_of_copies_per_bin = 4;
inline void Item::clear_max_number_of_copies_per_bin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_copies_per_bin_ = 0;
}
inline ::int32_t Item::max_number_of_copies_per_bin() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.max_number_of_copies_per_bin)
  return _internal_max_number_of_copies_per_bin();
}
inline void Item::set_max_number_of_copies_per_bin(::int32_t value) {
  _internal_set_max_number_of_copies_per_bin(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.max_number_of_copies_per_bin)
}
inline ::int32_t Item::_internal_max_number_of_copies_per_bin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_copies_per_bin_;
}
inline void Item::_internal_set_max_number_of_copies_per_bin(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_number_of_copies_per_bin_ = value;
}

// double penalty_per_missing_copy = 6;
inline void Item::clear_penalty_per_missing_copy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.penalty_per_missing_copy_ = 0;
}
inline double Item::penalty_per_missing_copy() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.Item.penalty_per_missing_copy)
  return _internal_penalty_per_missing_copy();
}
inline void Item::set_penalty_per_missing_copy(double value) {
  _internal_set_penalty_per_missing_copy(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.Item.penalty_per_missing_copy)
}
inline double Item::_internal_penalty_per_missing_copy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.penalty_per_missing_copy_;
}
inline void Item::_internal_set_penalty_per_missing_copy(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.penalty_per_missing_copy_ = value;
}

// -------------------------------------------------------------------

// VectorBinPackingProblem

// string name = 1;
inline void VectorBinPackingProblem::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& VectorBinPackingProblem::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VectorBinPackingProblem::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.name)
}
inline std::string* VectorBinPackingProblem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _s;
}
inline const std::string& VectorBinPackingProblem::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void VectorBinPackingProblem::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* VectorBinPackingProblem::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* VectorBinPackingProblem::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.VectorBinPackingProblem.name)
  return _impl_.name_.Release();
}
inline void VectorBinPackingProblem::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.VectorBinPackingProblem.name)
}

// repeated int64 resource_capacity = 2;
inline int VectorBinPackingProblem::_internal_resource_capacity_size() const {
  return _internal_resource_capacity().size();
}
inline int VectorBinPackingProblem::resource_capacity_size() const {
  return _internal_resource_capacity_size();
}
inline void VectorBinPackingProblem::clear_resource_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_capacity_.Clear();
}
inline ::int64_t VectorBinPackingProblem::resource_capacity(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  return _internal_resource_capacity().Get(index);
}
inline void VectorBinPackingProblem::set_resource_capacity(int index, ::int64_t value) {
  _internal_mutable_resource_capacity()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
}
inline void VectorBinPackingProblem::add_resource_capacity(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_capacity()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& VectorBinPackingProblem::resource_capacity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  return _internal_resource_capacity();
}
inline ::google::protobuf::RepeatedField<::int64_t>* VectorBinPackingProblem::mutable_resource_capacity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_capacity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_capacity();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& VectorBinPackingProblem::_internal_resource_capacity()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_capacity_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* VectorBinPackingProblem::_internal_mutable_resource_capacity() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_capacity_;
}

// repeated string resource_name = 3;
inline int VectorBinPackingProblem::_internal_resource_name_size() const {
  return _internal_resource_name().size();
}
inline int VectorBinPackingProblem::resource_name_size() const {
  return _internal_resource_name_size();
}
inline void VectorBinPackingProblem::clear_resource_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resource_name_.Clear();
}
inline std::string* VectorBinPackingProblem::add_resource_name()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_resource_name()->Add();
  // @@protoc_insertion_point(field_add_mutable:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _s;
}
inline const std::string& VectorBinPackingProblem::resource_name(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _internal_resource_name().Get(index);
}
inline std::string* VectorBinPackingProblem::mutable_resource_name(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _internal_mutable_resource_name()->Mutable(index);
}
inline void VectorBinPackingProblem::set_resource_name(int index, const std::string& value) {
  _internal_mutable_resource_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, std::string&& value) {
  _internal_mutable_resource_name()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_resource_name()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_resource_name()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::set_resource_name(int index, absl::string_view value) {
  _internal_mutable_resource_name()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_name()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_name()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_name()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline void VectorBinPackingProblem::add_resource_name(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resource_name()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VectorBinPackingProblem::resource_name() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  return _internal_resource_name();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VectorBinPackingProblem::mutable_resource_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.resource_name)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resource_name();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
VectorBinPackingProblem::_internal_resource_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resource_name_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
VectorBinPackingProblem::_internal_mutable_resource_name() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resource_name_;
}

// repeated .operations_research.packing.vbp.Item item = 4;
inline int VectorBinPackingProblem::_internal_item_size() const {
  return _internal_item().size();
}
inline int VectorBinPackingProblem::item_size() const {
  return _internal_item_size();
}
inline void VectorBinPackingProblem::clear_item() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_.Clear();
}
inline ::operations_research::packing::vbp::Item* VectorBinPackingProblem::mutable_item(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _internal_mutable_item()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>* VectorBinPackingProblem::mutable_item()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingProblem.item)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_item();
}
inline const ::operations_research::packing::vbp::Item& VectorBinPackingProblem::item(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _internal_item().Get(index);
}
inline ::operations_research::packing::vbp::Item* VectorBinPackingProblem::add_item() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::packing::vbp::Item* _add = _internal_mutable_item()->Add();
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>& VectorBinPackingProblem::item() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingProblem.item)
  return _internal_item();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>&
VectorBinPackingProblem::_internal_item() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.item_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::Item>*
VectorBinPackingProblem::_internal_mutable_item() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.item_;
}

// int32 max_bins = 5;
inline void VectorBinPackingProblem::clear_max_bins() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_bins_ = 0;
}
inline ::int32_t VectorBinPackingProblem::max_bins() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.max_bins)
  return _internal_max_bins();
}
inline void VectorBinPackingProblem::set_max_bins(::int32_t value) {
  _internal_set_max_bins(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.max_bins)
}
inline ::int32_t VectorBinPackingProblem::_internal_max_bins() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_bins_;
}
inline void VectorBinPackingProblem::_internal_set_max_bins(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_bins_ = value;
}

// optional double cost_per_bin = 6;
inline bool VectorBinPackingProblem::has_cost_per_bin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VectorBinPackingProblem::clear_cost_per_bin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cost_per_bin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double VectorBinPackingProblem::cost_per_bin() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingProblem.cost_per_bin)
  return _internal_cost_per_bin();
}
inline void VectorBinPackingProblem::set_cost_per_bin(double value) {
  _internal_set_cost_per_bin(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingProblem.cost_per_bin)
}
inline double VectorBinPackingProblem::_internal_cost_per_bin() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cost_per_bin_;
}
inline void VectorBinPackingProblem::_internal_set_cost_per_bin(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cost_per_bin_ = value;
}

// -------------------------------------------------------------------

// VectorBinPackingOneBinInSolution

// repeated int32 item_indices = 1;
inline int VectorBinPackingOneBinInSolution::_internal_item_indices_size() const {
  return _internal_item_indices().size();
}
inline int VectorBinPackingOneBinInSolution::item_indices_size() const {
  return _internal_item_indices_size();
}
inline void VectorBinPackingOneBinInSolution::clear_item_indices() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_indices_.Clear();
}
inline ::int32_t VectorBinPackingOneBinInSolution::item_indices(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  return _internal_item_indices().Get(index);
}
inline void VectorBinPackingOneBinInSolution::set_item_indices(int index, ::int32_t value) {
  _internal_mutable_item_indices()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
}
inline void VectorBinPackingOneBinInSolution::add_item_indices(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_item_indices()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& VectorBinPackingOneBinInSolution::item_indices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  return _internal_item_indices();
}
inline ::google::protobuf::RepeatedField<::int32_t>* VectorBinPackingOneBinInSolution::mutable_item_indices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_indices)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_item_indices();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& VectorBinPackingOneBinInSolution::_internal_item_indices()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.item_indices_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* VectorBinPackingOneBinInSolution::_internal_mutable_item_indices() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.item_indices_;
}

// repeated int32 item_copies = 2;
inline int VectorBinPackingOneBinInSolution::_internal_item_copies_size() const {
  return _internal_item_copies().size();
}
inline int VectorBinPackingOneBinInSolution::item_copies_size() const {
  return _internal_item_copies_size();
}
inline void VectorBinPackingOneBinInSolution::clear_item_copies() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.item_copies_.Clear();
}
inline ::int32_t VectorBinPackingOneBinInSolution::item_copies(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  return _internal_item_copies().Get(index);
}
inline void VectorBinPackingOneBinInSolution::set_item_copies(int index, ::int32_t value) {
  _internal_mutable_item_copies()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
}
inline void VectorBinPackingOneBinInSolution::add_item_copies(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_item_copies()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& VectorBinPackingOneBinInSolution::item_copies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  return _internal_item_copies();
}
inline ::google::protobuf::RepeatedField<::int32_t>* VectorBinPackingOneBinInSolution::mutable_item_copies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingOneBinInSolution.item_copies)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_item_copies();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& VectorBinPackingOneBinInSolution::_internal_item_copies()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.item_copies_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* VectorBinPackingOneBinInSolution::_internal_mutable_item_copies() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.item_copies_;
}

// -------------------------------------------------------------------

// VectorBinPackingSolution

// string solver_info = 1;
inline void VectorBinPackingSolution::clear_solver_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solver_info_.ClearToEmpty();
}
inline const std::string& VectorBinPackingSolution::solver_info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _internal_solver_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VectorBinPackingSolution::set_solver_info(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solver_info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
}
inline std::string* VectorBinPackingSolution::mutable_solver_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_solver_info();
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _s;
}
inline const std::string& VectorBinPackingSolution::_internal_solver_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solver_info_.Get();
}
inline void VectorBinPackingSolution::_internal_set_solver_info(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solver_info_.Set(value, GetArena());
}
inline std::string* VectorBinPackingSolution::_internal_mutable_solver_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.solver_info_.Mutable( GetArena());
}
inline std::string* VectorBinPackingSolution::release_solver_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
  return _impl_.solver_info_.Release();
}
inline void VectorBinPackingSolution::set_allocated_solver_info(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solver_info_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.solver_info_.IsDefault()) {
          _impl_.solver_info_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.packing.vbp.VectorBinPackingSolution.solver_info)
}

// repeated .operations_research.packing.vbp.VectorBinPackingOneBinInSolution bins = 2;
inline int VectorBinPackingSolution::_internal_bins_size() const {
  return _internal_bins().size();
}
inline int VectorBinPackingSolution::bins_size() const {
  return _internal_bins_size();
}
inline void VectorBinPackingSolution::clear_bins() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bins_.Clear();
}
inline ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* VectorBinPackingSolution::mutable_bins(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _internal_mutable_bins()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>* VectorBinPackingSolution::mutable_bins()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_bins();
}
inline const ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution& VectorBinPackingSolution::bins(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _internal_bins().Get(index);
}
inline ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* VectorBinPackingSolution::add_bins() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::packing::vbp::VectorBinPackingOneBinInSolution* _add = _internal_mutable_bins()->Add();
  // @@protoc_insertion_point(field_add:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>& VectorBinPackingSolution::bins() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.packing.vbp.VectorBinPackingSolution.bins)
  return _internal_bins();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>&
VectorBinPackingSolution::_internal_bins() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bins_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::packing::vbp::VectorBinPackingOneBinInSolution>*
VectorBinPackingSolution::_internal_mutable_bins() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.bins_;
}

// .operations_research.packing.vbp.VectorBinPackingSolveStatus status = 3;
inline void VectorBinPackingSolution::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::operations_research::packing::vbp::VectorBinPackingSolveStatus VectorBinPackingSolution::status() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.status)
  return _internal_status();
}
inline void VectorBinPackingSolution::set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.status)
}
inline ::operations_research::packing::vbp::VectorBinPackingSolveStatus VectorBinPackingSolution::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::packing::vbp::VectorBinPackingSolveStatus>(_impl_.status_);
}
inline void VectorBinPackingSolution::_internal_set_status(::operations_research::packing::vbp::VectorBinPackingSolveStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// double objective_value = 4;
inline void VectorBinPackingSolution::clear_objective_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_value_ = 0;
}
inline double VectorBinPackingSolution::objective_value() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.objective_value)
  return _internal_objective_value();
}
inline void VectorBinPackingSolution::set_objective_value(double value) {
  _internal_set_objective_value(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.objective_value)
}
inline double VectorBinPackingSolution::_internal_objective_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_value_;
}
inline void VectorBinPackingSolution::_internal_set_objective_value(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.objective_value_ = value;
}

// double solve_time_in_seconds = 5;
inline void VectorBinPackingSolution::clear_solve_time_in_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solve_time_in_seconds_ = 0;
}
inline double VectorBinPackingSolution::solve_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.solve_time_in_seconds)
  return _internal_solve_time_in_seconds();
}
inline void VectorBinPackingSolution::set_solve_time_in_seconds(double value) {
  _internal_set_solve_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.solve_time_in_seconds)
}
inline double VectorBinPackingSolution::_internal_solve_time_in_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solve_time_in_seconds_;
}
inline void VectorBinPackingSolution::_internal_set_solve_time_in_seconds(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solve_time_in_seconds_ = value;
}

// double arc_flow_time_in_seconds = 6;
inline void VectorBinPackingSolution::clear_arc_flow_time_in_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arc_flow_time_in_seconds_ = 0;
}
inline double VectorBinPackingSolution::arc_flow_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.packing.vbp.VectorBinPackingSolution.arc_flow_time_in_seconds)
  return _internal_arc_flow_time_in_seconds();
}
inline void VectorBinPackingSolution::set_arc_flow_time_in_seconds(double value) {
  _internal_set_arc_flow_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.packing.vbp.VectorBinPackingSolution.arc_flow_time_in_seconds)
}
inline double VectorBinPackingSolution::_internal_arc_flow_time_in_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arc_flow_time_in_seconds_;
}
inline void VectorBinPackingSolution::_internal_set_arc_flow_time_in_seconds(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.arc_flow_time_in_seconds_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vbp
}  // namespace packing
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::packing::vbp::VectorBinPackingSolveStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::packing::vbp::VectorBinPackingSolveStatus>() {
  return ::operations_research::packing::vbp::VectorBinPackingSolveStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fpacking_2fvector_5fbin_5fpacking_2eproto_2epb_2eh
