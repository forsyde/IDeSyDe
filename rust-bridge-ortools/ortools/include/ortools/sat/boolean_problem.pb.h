// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/sat/boolean_problem.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fsat_2fboolean_5fproblem_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fsat_2fboolean_5fproblem_2eproto;
namespace operations_research {
namespace sat {
class BooleanAssignment;
struct BooleanAssignmentDefaultTypeInternal;
extern BooleanAssignmentDefaultTypeInternal _BooleanAssignment_default_instance_;
class LinearBooleanConstraint;
struct LinearBooleanConstraintDefaultTypeInternal;
extern LinearBooleanConstraintDefaultTypeInternal _LinearBooleanConstraint_default_instance_;
class LinearBooleanProblem;
struct LinearBooleanProblemDefaultTypeInternal;
extern LinearBooleanProblemDefaultTypeInternal _LinearBooleanProblem_default_instance_;
class LinearObjective;
struct LinearObjectiveDefaultTypeInternal;
extern LinearObjectiveDefaultTypeInternal _LinearObjective_default_instance_;
}  // namespace sat
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace sat {

// ===================================================================


// -------------------------------------------------------------------

class LinearObjective final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearObjective) */ {
 public:
  inline LinearObjective() : LinearObjective(nullptr) {}
  ~LinearObjective() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearObjective(::google::protobuf::internal::ConstantInitialized);

  inline LinearObjective(const LinearObjective& from)
      : LinearObjective(nullptr, from) {}
  LinearObjective(LinearObjective&& from) noexcept
    : LinearObjective() {
    *this = ::std::move(from);
  }

  inline LinearObjective& operator=(const LinearObjective& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearObjective& operator=(LinearObjective&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearObjective& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearObjective* internal_default_instance() {
    return reinterpret_cast<const LinearObjective*>(
               &_LinearObjective_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LinearObjective& a, LinearObjective& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearObjective* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearObjective* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearObjective* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearObjective>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearObjective& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearObjective& from) {
    LinearObjective::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearObjective* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearObjective";
  }
  protected:
  explicit LinearObjective(::google::protobuf::Arena* arena);
  LinearObjective(::google::protobuf::Arena* arena, const LinearObjective& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
    kCoefficientsFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kScalingFactorFieldNumber = 4,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // repeated int64 coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;

  public:
  void clear_coefficients() ;
  ::int64_t coefficients(int index) const;
  void set_coefficients(int index, ::int64_t value);
  void add_coefficients(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& coefficients() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_coefficients();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_coefficients() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_coefficients();

  public:
  // optional double offset = 3 [default = 0];
  bool has_offset() const;
  void clear_offset() ;
  double offset() const;
  void set_offset(double value);

  private:
  double _internal_offset() const;
  void _internal_set_offset(double value);

  public:
  // optional double scaling_factor = 4 [default = 1];
  bool has_scaling_factor() const;
  void clear_scaling_factor() ;
  double scaling_factor() const;
  void set_scaling_factor(double value);

  private:
  double _internal_scaling_factor() const;
  void _internal_set_scaling_factor(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearObjective)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    ::google::protobuf::RepeatedField<::int64_t> coefficients_;
    double offset_;
    double scaling_factor_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};// -------------------------------------------------------------------

class LinearBooleanConstraint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearBooleanConstraint) */ {
 public:
  inline LinearBooleanConstraint() : LinearBooleanConstraint(nullptr) {}
  ~LinearBooleanConstraint() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearBooleanConstraint(::google::protobuf::internal::ConstantInitialized);

  inline LinearBooleanConstraint(const LinearBooleanConstraint& from)
      : LinearBooleanConstraint(nullptr, from) {}
  LinearBooleanConstraint(LinearBooleanConstraint&& from) noexcept
    : LinearBooleanConstraint() {
    *this = ::std::move(from);
  }

  inline LinearBooleanConstraint& operator=(const LinearBooleanConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearBooleanConstraint& operator=(LinearBooleanConstraint&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearBooleanConstraint& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearBooleanConstraint* internal_default_instance() {
    return reinterpret_cast<const LinearBooleanConstraint*>(
               &_LinearBooleanConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LinearBooleanConstraint& a, LinearBooleanConstraint& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearBooleanConstraint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearBooleanConstraint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearBooleanConstraint* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearBooleanConstraint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearBooleanConstraint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearBooleanConstraint& from) {
    LinearBooleanConstraint::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearBooleanConstraint* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearBooleanConstraint";
  }
  protected:
  explicit LinearBooleanConstraint(::google::protobuf::Arena* arena);
  LinearBooleanConstraint(::google::protobuf::Arena* arena, const LinearBooleanConstraint& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
    kCoefficientsFieldNumber = 2,
    kNameFieldNumber = 5,
    kLowerBoundFieldNumber = 3,
    kUpperBoundFieldNumber = 4,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // repeated int64 coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;

  public:
  void clear_coefficients() ;
  ::int64_t coefficients(int index) const;
  void set_coefficients(int index, ::int64_t value);
  void add_coefficients(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& coefficients() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_coefficients();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_coefficients() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_coefficients();

  public:
  // optional string name = 5 [default = ""];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional int64 lower_bound = 3;
  bool has_lower_bound() const;
  void clear_lower_bound() ;
  ::int64_t lower_bound() const;
  void set_lower_bound(::int64_t value);

  private:
  ::int64_t _internal_lower_bound() const;
  void _internal_set_lower_bound(::int64_t value);

  public:
  // optional int64 upper_bound = 4;
  bool has_upper_bound() const;
  void clear_upper_bound() ;
  ::int64_t upper_bound() const;
  void set_upper_bound(::int64_t value);

  private:
  ::int64_t _internal_upper_bound() const;
  void _internal_set_upper_bound(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearBooleanConstraint)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      60, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    ::google::protobuf::RepeatedField<::int64_t> coefficients_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::int64_t lower_bound_;
    ::int64_t upper_bound_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};// -------------------------------------------------------------------

class BooleanAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.BooleanAssignment) */ {
 public:
  inline BooleanAssignment() : BooleanAssignment(nullptr) {}
  ~BooleanAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BooleanAssignment(::google::protobuf::internal::ConstantInitialized);

  inline BooleanAssignment(const BooleanAssignment& from)
      : BooleanAssignment(nullptr, from) {}
  BooleanAssignment(BooleanAssignment&& from) noexcept
    : BooleanAssignment() {
    *this = ::std::move(from);
  }

  inline BooleanAssignment& operator=(const BooleanAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline BooleanAssignment& operator=(BooleanAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BooleanAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const BooleanAssignment* internal_default_instance() {
    return reinterpret_cast<const BooleanAssignment*>(
               &_BooleanAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BooleanAssignment& a, BooleanAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(BooleanAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BooleanAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BooleanAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BooleanAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BooleanAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BooleanAssignment& from) {
    BooleanAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BooleanAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.BooleanAssignment";
  }
  protected:
  explicit BooleanAssignment(::google::protobuf::Arena* arena);
  BooleanAssignment(::google::protobuf::Arena* arena, const BooleanAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLiteralsFieldNumber = 1,
  };
  // repeated int32 literals = 1;
  int literals_size() const;
  private:
  int _internal_literals_size() const;

  public:
  void clear_literals() ;
  ::int32_t literals(int index) const;
  void set_literals(int index, ::int32_t value);
  void add_literals(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_literals();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_literals() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_literals();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.BooleanAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> literals_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};// -------------------------------------------------------------------

class LinearBooleanProblem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.sat.LinearBooleanProblem) */ {
 public:
  inline LinearBooleanProblem() : LinearBooleanProblem(nullptr) {}
  ~LinearBooleanProblem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LinearBooleanProblem(::google::protobuf::internal::ConstantInitialized);

  inline LinearBooleanProblem(const LinearBooleanProblem& from)
      : LinearBooleanProblem(nullptr, from) {}
  LinearBooleanProblem(LinearBooleanProblem&& from) noexcept
    : LinearBooleanProblem() {
    *this = ::std::move(from);
  }

  inline LinearBooleanProblem& operator=(const LinearBooleanProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinearBooleanProblem& operator=(LinearBooleanProblem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LinearBooleanProblem& default_instance() {
    return *internal_default_instance();
  }
  static inline const LinearBooleanProblem* internal_default_instance() {
    return reinterpret_cast<const LinearBooleanProblem*>(
               &_LinearBooleanProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LinearBooleanProblem& a, LinearBooleanProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(LinearBooleanProblem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LinearBooleanProblem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LinearBooleanProblem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LinearBooleanProblem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LinearBooleanProblem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const LinearBooleanProblem& from) {
    LinearBooleanProblem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(LinearBooleanProblem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.sat.LinearBooleanProblem";
  }
  protected:
  explicit LinearBooleanProblem(::google::protobuf::Arena* arena);
  LinearBooleanProblem(::google::protobuf::Arena* arena, const LinearBooleanProblem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstraintsFieldNumber = 4,
    kVarNamesFieldNumber = 6,
    kNameFieldNumber = 1,
    kObjectiveFieldNumber = 5,
    kAssignmentFieldNumber = 7,
    kNumVariablesFieldNumber = 3,
    kOriginalNumVariablesFieldNumber = 8,
  };
  // repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
  int constraints_size() const;
  private:
  int _internal_constraints_size() const;

  public:
  void clear_constraints() ;
  ::operations_research::sat::LinearBooleanConstraint* mutable_constraints(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >*
      mutable_constraints();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>& _internal_constraints() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>* _internal_mutable_constraints();
  public:
  const ::operations_research::sat::LinearBooleanConstraint& constraints(int index) const;
  ::operations_research::sat::LinearBooleanConstraint* add_constraints();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint >&
      constraints() const;
  // repeated string var_names = 6;
  int var_names_size() const;
  private:
  int _internal_var_names_size() const;

  public:
  void clear_var_names() ;
  const std::string& var_names(int index) const;
  std::string* mutable_var_names(int index);
  void set_var_names(int index, const std::string& value);
  void set_var_names(int index, std::string&& value);
  void set_var_names(int index, const char* value);
  void set_var_names(int index, const char* value, std::size_t size);
  void set_var_names(int index, absl::string_view value);
  std::string* add_var_names();
  void add_var_names(const std::string& value);
  void add_var_names(std::string&& value);
  void add_var_names(const char* value);
  void add_var_names(const char* value, std::size_t size);
  void add_var_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& var_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_var_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_var_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_var_names();

  public:
  // optional string name = 1 [default = ""];
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional .operations_research.sat.LinearObjective objective = 5;
  bool has_objective() const;
  void clear_objective() ;
  const ::operations_research::sat::LinearObjective& objective() const;
  PROTOBUF_NODISCARD ::operations_research::sat::LinearObjective* release_objective();
  ::operations_research::sat::LinearObjective* mutable_objective();
  void set_allocated_objective(::operations_research::sat::LinearObjective* value);
  void unsafe_arena_set_allocated_objective(::operations_research::sat::LinearObjective* value);
  ::operations_research::sat::LinearObjective* unsafe_arena_release_objective();

  private:
  const ::operations_research::sat::LinearObjective& _internal_objective() const;
  ::operations_research::sat::LinearObjective* _internal_mutable_objective();

  public:
  // optional .operations_research.sat.BooleanAssignment assignment = 7;
  bool has_assignment() const;
  void clear_assignment() ;
  const ::operations_research::sat::BooleanAssignment& assignment() const;
  PROTOBUF_NODISCARD ::operations_research::sat::BooleanAssignment* release_assignment();
  ::operations_research::sat::BooleanAssignment* mutable_assignment();
  void set_allocated_assignment(::operations_research::sat::BooleanAssignment* value);
  void unsafe_arena_set_allocated_assignment(::operations_research::sat::BooleanAssignment* value);
  ::operations_research::sat::BooleanAssignment* unsafe_arena_release_assignment();

  private:
  const ::operations_research::sat::BooleanAssignment& _internal_assignment() const;
  ::operations_research::sat::BooleanAssignment* _internal_mutable_assignment();

  public:
  // optional int32 num_variables = 3;
  bool has_num_variables() const;
  void clear_num_variables() ;
  ::int32_t num_variables() const;
  void set_num_variables(::int32_t value);

  private:
  ::int32_t _internal_num_variables() const;
  void _internal_set_num_variables(::int32_t value);

  public:
  // optional int32 original_num_variables = 8;
  bool has_original_num_variables() const;
  void clear_original_num_variables() ;
  ::int32_t original_num_variables() const;
  void set_original_num_variables(::int32_t value);

  private:
  ::int32_t _internal_original_num_variables() const;
  void _internal_set_original_num_variables(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.sat.LinearBooleanProblem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 3,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::sat::LinearBooleanConstraint > constraints_;
    ::google::protobuf::RepeatedPtrField<std::string> var_names_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::operations_research::sat::LinearObjective* objective_;
    ::operations_research::sat::BooleanAssignment* assignment_;
    ::int32_t num_variables_;
    ::int32_t original_num_variables_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fsat_2fboolean_5fproblem_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LinearBooleanConstraint

// repeated int32 literals = 1;
inline int LinearBooleanConstraint::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int LinearBooleanConstraint::literals_size() const {
  return _internal_literals_size();
}
inline void LinearBooleanConstraint::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t LinearBooleanConstraint::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.literals)
  return _internal_literals().Get(index);
}
inline void LinearBooleanConstraint::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.literals)
}
inline void LinearBooleanConstraint::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanConstraint.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearBooleanConstraint::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanConstraint.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearBooleanConstraint::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanConstraint.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearBooleanConstraint::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearBooleanConstraint::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// repeated int64 coefficients = 2;
inline int LinearBooleanConstraint::_internal_coefficients_size() const {
  return _internal_coefficients().size();
}
inline int LinearBooleanConstraint::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void LinearBooleanConstraint::clear_coefficients() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coefficients_.Clear();
}
inline ::int64_t LinearBooleanConstraint::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.coefficients)
  return _internal_coefficients().Get(index);
}
inline void LinearBooleanConstraint::set_coefficients(int index, ::int64_t value) {
  _internal_mutable_coefficients()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.coefficients)
}
inline void LinearBooleanConstraint::add_coefficients(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coefficients()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanConstraint.coefficients)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearBooleanConstraint::coefficients() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanConstraint.coefficients)
  return _internal_coefficients();
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearBooleanConstraint::mutable_coefficients()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanConstraint.coefficients)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coefficients();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearBooleanConstraint::_internal_coefficients()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coefficients_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearBooleanConstraint::_internal_mutable_coefficients() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coefficients_;
}

// optional int64 lower_bound = 3;
inline bool LinearBooleanConstraint::has_lower_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LinearBooleanConstraint::clear_lower_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lower_bound_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t LinearBooleanConstraint::lower_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.lower_bound)
  return _internal_lower_bound();
}
inline void LinearBooleanConstraint::set_lower_bound(::int64_t value) {
  _internal_set_lower_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.lower_bound)
}
inline ::int64_t LinearBooleanConstraint::_internal_lower_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lower_bound_;
}
inline void LinearBooleanConstraint::_internal_set_lower_bound(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lower_bound_ = value;
}

// optional int64 upper_bound = 4;
inline bool LinearBooleanConstraint::has_upper_bound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LinearBooleanConstraint::clear_upper_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.upper_bound_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t LinearBooleanConstraint::upper_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.upper_bound)
  return _internal_upper_bound();
}
inline void LinearBooleanConstraint::set_upper_bound(::int64_t value) {
  _internal_set_upper_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.upper_bound)
}
inline ::int64_t LinearBooleanConstraint::_internal_upper_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.upper_bound_;
}
inline void LinearBooleanConstraint::_internal_set_upper_bound(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.upper_bound_ = value;
}

// optional string name = 5 [default = ""];
inline bool LinearBooleanConstraint::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LinearBooleanConstraint::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinearBooleanConstraint::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanConstraint.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinearBooleanConstraint::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanConstraint.name)
}
inline std::string* LinearBooleanConstraint::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanConstraint.name)
  return _s;
}
inline const std::string& LinearBooleanConstraint::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void LinearBooleanConstraint::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LinearBooleanConstraint::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LinearBooleanConstraint::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanConstraint.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LinearBooleanConstraint::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanConstraint.name)
}

// -------------------------------------------------------------------

// LinearObjective

// repeated int32 literals = 1;
inline int LinearObjective::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int LinearObjective::literals_size() const {
  return _internal_literals_size();
}
inline void LinearObjective::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t LinearObjective::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.literals)
  return _internal_literals().Get(index);
}
inline void LinearObjective::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.literals)
}
inline void LinearObjective::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearObjective.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearObjective::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearObjective.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearObjective::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearObjective.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& LinearObjective::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* LinearObjective::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// repeated int64 coefficients = 2;
inline int LinearObjective::_internal_coefficients_size() const {
  return _internal_coefficients().size();
}
inline int LinearObjective::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void LinearObjective::clear_coefficients() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.coefficients_.Clear();
}
inline ::int64_t LinearObjective::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.coefficients)
  return _internal_coefficients().Get(index);
}
inline void LinearObjective::set_coefficients(int index, ::int64_t value) {
  _internal_mutable_coefficients()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.coefficients)
}
inline void LinearObjective::add_coefficients(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_coefficients()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearObjective.coefficients)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearObjective::coefficients() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearObjective.coefficients)
  return _internal_coefficients();
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearObjective::mutable_coefficients()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearObjective.coefficients)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_coefficients();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& LinearObjective::_internal_coefficients()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.coefficients_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* LinearObjective::_internal_mutable_coefficients() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.coefficients_;
}

// optional double offset = 3 [default = 0];
inline bool LinearObjective::has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LinearObjective::clear_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.offset_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double LinearObjective::offset() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.offset)
  return _internal_offset();
}
inline void LinearObjective::set_offset(double value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.offset)
}
inline double LinearObjective::_internal_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.offset_;
}
inline void LinearObjective::_internal_set_offset(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.offset_ = value;
}

// optional double scaling_factor = 4 [default = 1];
inline bool LinearObjective::has_scaling_factor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LinearObjective::clear_scaling_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scaling_factor_ = 1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double LinearObjective::scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearObjective.scaling_factor)
  return _internal_scaling_factor();
}
inline void LinearObjective::set_scaling_factor(double value) {
  _internal_set_scaling_factor(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearObjective.scaling_factor)
}
inline double LinearObjective::_internal_scaling_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scaling_factor_;
}
inline void LinearObjective::_internal_set_scaling_factor(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.scaling_factor_ = value;
}

// -------------------------------------------------------------------

// BooleanAssignment

// repeated int32 literals = 1;
inline int BooleanAssignment::_internal_literals_size() const {
  return _internal_literals().size();
}
inline int BooleanAssignment::literals_size() const {
  return _internal_literals_size();
}
inline void BooleanAssignment::clear_literals() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.literals_.Clear();
}
inline ::int32_t BooleanAssignment::literals(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.sat.BooleanAssignment.literals)
  return _internal_literals().Get(index);
}
inline void BooleanAssignment::set_literals(int index, ::int32_t value) {
  _internal_mutable_literals()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.sat.BooleanAssignment.literals)
}
inline void BooleanAssignment::add_literals(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_literals()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.BooleanAssignment.literals)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BooleanAssignment::literals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.BooleanAssignment.literals)
  return _internal_literals();
}
inline ::google::protobuf::RepeatedField<::int32_t>* BooleanAssignment::mutable_literals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.BooleanAssignment.literals)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_literals();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& BooleanAssignment::_internal_literals()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.literals_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* BooleanAssignment::_internal_mutable_literals() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.literals_;
}

// -------------------------------------------------------------------

// LinearBooleanProblem

// optional string name = 1 [default = ""];
inline bool LinearBooleanProblem::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LinearBooleanProblem::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LinearBooleanProblem::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LinearBooleanProblem::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.name)
}
inline std::string* LinearBooleanProblem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.name)
  return _s;
}
inline const std::string& LinearBooleanProblem::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void LinearBooleanProblem::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* LinearBooleanProblem::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* LinearBooleanProblem::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LinearBooleanProblem::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.name)
}

// optional int32 num_variables = 3;
inline bool LinearBooleanProblem::has_num_variables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LinearBooleanProblem::clear_num_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_variables_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t LinearBooleanProblem::num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.num_variables)
  return _internal_num_variables();
}
inline void LinearBooleanProblem::set_num_variables(::int32_t value) {
  _internal_set_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.num_variables)
}
inline ::int32_t LinearBooleanProblem::_internal_num_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_variables_;
}
inline void LinearBooleanProblem::_internal_set_num_variables(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.num_variables_ = value;
}

// repeated .operations_research.sat.LinearBooleanConstraint constraints = 4;
inline int LinearBooleanProblem::_internal_constraints_size() const {
  return _internal_constraints().size();
}
inline int LinearBooleanProblem::constraints_size() const {
  return _internal_constraints_size();
}
inline void LinearBooleanProblem::clear_constraints() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.constraints_.Clear();
}
inline ::operations_research::sat::LinearBooleanConstraint* LinearBooleanProblem::mutable_constraints(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.constraints)
  return _internal_mutable_constraints()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>* LinearBooleanProblem::mutable_constraints()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanProblem.constraints)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_constraints();
}
inline const ::operations_research::sat::LinearBooleanConstraint& LinearBooleanProblem::constraints(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.constraints)
  return _internal_constraints().Get(index);
}
inline ::operations_research::sat::LinearBooleanConstraint* LinearBooleanProblem::add_constraints() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::sat::LinearBooleanConstraint* _add = _internal_mutable_constraints()->Add();
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.constraints)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>& LinearBooleanProblem::constraints() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanProblem.constraints)
  return _internal_constraints();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>&
LinearBooleanProblem::_internal_constraints() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.constraints_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::sat::LinearBooleanConstraint>*
LinearBooleanProblem::_internal_mutable_constraints() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.constraints_;
}

// optional .operations_research.sat.LinearObjective objective = 5;
inline bool LinearBooleanProblem::has_objective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.objective_ != nullptr);
  return value;
}
inline void LinearBooleanProblem::clear_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.objective_ != nullptr) _impl_.objective_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::operations_research::sat::LinearObjective& LinearBooleanProblem::_internal_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::LinearObjective* p = _impl_.objective_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::LinearObjective&>(::operations_research::sat::_LinearObjective_default_instance_);
}
inline const ::operations_research::sat::LinearObjective& LinearBooleanProblem::objective() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.objective)
  return _internal_objective();
}
inline void LinearBooleanProblem::unsafe_arena_set_allocated_objective(::operations_research::sat::LinearObjective* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.objective_);
  }
  _impl_.objective_ = reinterpret_cast<::operations_research::sat::LinearObjective*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanProblem.objective)
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::release_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::LinearObjective* released = _impl_.objective_;
  _impl_.objective_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::unsafe_arena_release_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.objective)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::sat::LinearObjective* temp = _impl_.objective_;
  _impl_.objective_ = nullptr;
  return temp;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::_internal_mutable_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.objective_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::LinearObjective>(GetArena());
    _impl_.objective_ = reinterpret_cast<::operations_research::sat::LinearObjective*>(p);
  }
  return _impl_.objective_;
}
inline ::operations_research::sat::LinearObjective* LinearBooleanProblem::mutable_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::LinearObjective* _msg = _internal_mutable_objective();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.objective)
  return _msg;
}
inline void LinearBooleanProblem::set_allocated_objective(::operations_research::sat::LinearObjective* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::LinearObjective*>(_impl_.objective_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::LinearObjective*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.objective_ = reinterpret_cast<::operations_research::sat::LinearObjective*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.objective)
}

// repeated string var_names = 6;
inline int LinearBooleanProblem::_internal_var_names_size() const {
  return _internal_var_names().size();
}
inline int LinearBooleanProblem::var_names_size() const {
  return _internal_var_names_size();
}
inline void LinearBooleanProblem::clear_var_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_names_.Clear();
}
inline std::string* LinearBooleanProblem::add_var_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_var_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:operations_research.sat.LinearBooleanProblem.var_names)
  return _s;
}
inline const std::string& LinearBooleanProblem::var_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.var_names)
  return _internal_var_names().Get(index);
}
inline std::string* LinearBooleanProblem::mutable_var_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.var_names)
  return _internal_mutable_var_names()->Mutable(index);
}
inline void LinearBooleanProblem::set_var_names(int index, const std::string& value) {
  _internal_mutable_var_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, std::string&& value) {
  _internal_mutable_var_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_var_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_var_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::set_var_names(int index, absl::string_view value) {
  _internal_mutable_var_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_var_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_var_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_var_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_var_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:operations_research.sat.LinearBooleanProblem.var_names)
}
inline void LinearBooleanProblem::add_var_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_var_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:operations_research.sat.LinearBooleanProblem.var_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LinearBooleanProblem::var_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.sat.LinearBooleanProblem.var_names)
  return _internal_var_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LinearBooleanProblem::mutable_var_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.sat.LinearBooleanProblem.var_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_var_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
LinearBooleanProblem::_internal_var_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.var_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
LinearBooleanProblem::_internal_mutable_var_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.var_names_;
}

// optional .operations_research.sat.BooleanAssignment assignment = 7;
inline bool LinearBooleanProblem::has_assignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.assignment_ != nullptr);
  return value;
}
inline void LinearBooleanProblem::clear_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.assignment_ != nullptr) _impl_.assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::operations_research::sat::BooleanAssignment& LinearBooleanProblem::_internal_assignment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::BooleanAssignment* p = _impl_.assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::BooleanAssignment&>(::operations_research::sat::_BooleanAssignment_default_instance_);
}
inline const ::operations_research::sat::BooleanAssignment& LinearBooleanProblem::assignment() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.assignment)
  return _internal_assignment();
}
inline void LinearBooleanProblem::unsafe_arena_set_allocated_assignment(::operations_research::sat::BooleanAssignment* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.assignment_);
  }
  _impl_.assignment_ = reinterpret_cast<::operations_research::sat::BooleanAssignment*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.sat.LinearBooleanProblem.assignment)
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::release_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::BooleanAssignment* released = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::unsafe_arena_release_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.sat.LinearBooleanProblem.assignment)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::sat::BooleanAssignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
  return temp;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::_internal_mutable_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::BooleanAssignment>(GetArena());
    _impl_.assignment_ = reinterpret_cast<::operations_research::sat::BooleanAssignment*>(p);
  }
  return _impl_.assignment_;
}
inline ::operations_research::sat::BooleanAssignment* LinearBooleanProblem::mutable_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::BooleanAssignment* _msg = _internal_mutable_assignment();
  // @@protoc_insertion_point(field_mutable:operations_research.sat.LinearBooleanProblem.assignment)
  return _msg;
}
inline void LinearBooleanProblem::set_allocated_assignment(::operations_research::sat::BooleanAssignment* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::sat::BooleanAssignment*>(_impl_.assignment_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::sat::BooleanAssignment*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.assignment_ = reinterpret_cast<::operations_research::sat::BooleanAssignment*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.sat.LinearBooleanProblem.assignment)
}

// optional int32 original_num_variables = 8;
inline bool LinearBooleanProblem::has_original_num_variables() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LinearBooleanProblem::clear_original_num_variables() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.original_num_variables_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t LinearBooleanProblem::original_num_variables() const {
  // @@protoc_insertion_point(field_get:operations_research.sat.LinearBooleanProblem.original_num_variables)
  return _internal_original_num_variables();
}
inline void LinearBooleanProblem::set_original_num_variables(::int32_t value) {
  _internal_set_original_num_variables(value);
  // @@protoc_insertion_point(field_set:operations_research.sat.LinearBooleanProblem.original_num_variables)
}
inline ::int32_t LinearBooleanProblem::_internal_original_num_variables() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.original_num_variables_;
}
inline void LinearBooleanProblem::_internal_set_original_num_variables(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.original_num_variables_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace sat
}  // namespace operations_research


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fsat_2fboolean_5fproblem_2eproto_2epb_2eh
