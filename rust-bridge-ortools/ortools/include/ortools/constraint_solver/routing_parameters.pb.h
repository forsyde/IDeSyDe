// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/routing_parameters.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
#include "ortools/constraint_solver/routing_enums.pb.h"
#include "ortools/constraint_solver/solver_parameters.pb.h"
#include "ortools/sat/sat_parameters.pb.h"
#include "ortools/util/optional_boolean.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
namespace operations_research {
class RoutingModelParameters;
struct RoutingModelParametersDefaultTypeInternal;
extern RoutingModelParametersDefaultTypeInternal _RoutingModelParameters_default_instance_;
class RoutingSearchParameters;
struct RoutingSearchParametersDefaultTypeInternal;
extern RoutingSearchParametersDefaultTypeInternal _RoutingSearchParameters_default_instance_;
class RoutingSearchParameters_ImprovementSearchLimitParameters;
struct RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal;
extern RoutingSearchParameters_ImprovementSearchLimitParametersDefaultTypeInternal _RoutingSearchParameters_ImprovementSearchLimitParameters_default_instance_;
class RoutingSearchParameters_LocalSearchNeighborhoodOperators;
struct RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal;
extern RoutingSearchParameters_LocalSearchNeighborhoodOperatorsDefaultTypeInternal _RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum RoutingSearchParameters_PairInsertionStrategy : int {
  RoutingSearchParameters_PairInsertionStrategy_AUTOMATIC = 0,
  RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_THEN_BEST_DELIVERY = 1,
  RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_DELIVERY_PAIR = 2,
  RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_DELIVERY_PAIR_MULTITOUR = 3,
  RoutingSearchParameters_PairInsertionStrategy_RoutingSearchParameters_PairInsertionStrategy_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoutingSearchParameters_PairInsertionStrategy_RoutingSearchParameters_PairInsertionStrategy_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoutingSearchParameters_PairInsertionStrategy_IsValid(int value);
extern const uint32_t RoutingSearchParameters_PairInsertionStrategy_internal_data_[];
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_MIN = static_cast<RoutingSearchParameters_PairInsertionStrategy>(0);
constexpr RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_MAX = static_cast<RoutingSearchParameters_PairInsertionStrategy>(3);
constexpr int RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
RoutingSearchParameters_PairInsertionStrategy_descriptor();
template <typename T>
const std::string& RoutingSearchParameters_PairInsertionStrategy_Name(T value) {
  static_assert(std::is_same<T, RoutingSearchParameters_PairInsertionStrategy>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PairInsertionStrategy_Name().");
  return RoutingSearchParameters_PairInsertionStrategy_Name(static_cast<RoutingSearchParameters_PairInsertionStrategy>(value));
}
template <>
inline const std::string& RoutingSearchParameters_PairInsertionStrategy_Name(RoutingSearchParameters_PairInsertionStrategy value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoutingSearchParameters_PairInsertionStrategy_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool RoutingSearchParameters_PairInsertionStrategy_Parse(absl::string_view name, RoutingSearchParameters_PairInsertionStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingSearchParameters_PairInsertionStrategy>(
      RoutingSearchParameters_PairInsertionStrategy_descriptor(), name, value);
}
enum RoutingSearchParameters_SchedulingSolver : int {
  RoutingSearchParameters_SchedulingSolver_SCHEDULING_UNSET = 0,
  RoutingSearchParameters_SchedulingSolver_SCHEDULING_GLOP = 1,
  RoutingSearchParameters_SchedulingSolver_SCHEDULING_CP_SAT = 2,
  RoutingSearchParameters_SchedulingSolver_RoutingSearchParameters_SchedulingSolver_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  RoutingSearchParameters_SchedulingSolver_RoutingSearchParameters_SchedulingSolver_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool RoutingSearchParameters_SchedulingSolver_IsValid(int value);
extern const uint32_t RoutingSearchParameters_SchedulingSolver_internal_data_[];
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters_SchedulingSolver_SchedulingSolver_MIN = static_cast<RoutingSearchParameters_SchedulingSolver>(0);
constexpr RoutingSearchParameters_SchedulingSolver RoutingSearchParameters_SchedulingSolver_SchedulingSolver_MAX = static_cast<RoutingSearchParameters_SchedulingSolver>(2);
constexpr int RoutingSearchParameters_SchedulingSolver_SchedulingSolver_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
RoutingSearchParameters_SchedulingSolver_descriptor();
template <typename T>
const std::string& RoutingSearchParameters_SchedulingSolver_Name(T value) {
  static_assert(std::is_same<T, RoutingSearchParameters_SchedulingSolver>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SchedulingSolver_Name().");
  return RoutingSearchParameters_SchedulingSolver_Name(static_cast<RoutingSearchParameters_SchedulingSolver>(value));
}
template <>
inline const std::string& RoutingSearchParameters_SchedulingSolver_Name(RoutingSearchParameters_SchedulingSolver value) {
  return ::google::protobuf::internal::NameOfDenseEnum<RoutingSearchParameters_SchedulingSolver_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool RoutingSearchParameters_SchedulingSolver_Parse(absl::string_view name, RoutingSearchParameters_SchedulingSolver* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RoutingSearchParameters_SchedulingSolver>(
      RoutingSearchParameters_SchedulingSolver_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class RoutingSearchParameters_LocalSearchNeighborhoodOperators final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators) */ {
 public:
  inline RoutingSearchParameters_LocalSearchNeighborhoodOperators() : RoutingSearchParameters_LocalSearchNeighborhoodOperators(nullptr) {}
  ~RoutingSearchParameters_LocalSearchNeighborhoodOperators() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoutingSearchParameters_LocalSearchNeighborhoodOperators(::google::protobuf::internal::ConstantInitialized);

  inline RoutingSearchParameters_LocalSearchNeighborhoodOperators(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from)
      : RoutingSearchParameters_LocalSearchNeighborhoodOperators(nullptr, from) {}
  RoutingSearchParameters_LocalSearchNeighborhoodOperators(RoutingSearchParameters_LocalSearchNeighborhoodOperators&& from) noexcept
    : RoutingSearchParameters_LocalSearchNeighborhoodOperators() {
    *this = ::std::move(from);
  }

  inline RoutingSearchParameters_LocalSearchNeighborhoodOperators& operator=(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSearchParameters_LocalSearchNeighborhoodOperators& operator=(RoutingSearchParameters_LocalSearchNeighborhoodOperators&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSearchParameters_LocalSearchNeighborhoodOperators& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSearchParameters_LocalSearchNeighborhoodOperators* internal_default_instance() {
    return reinterpret_cast<const RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(
               &_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSearchParameters_LocalSearchNeighborhoodOperators& a, RoutingSearchParameters_LocalSearchNeighborhoodOperators& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSearchParameters_LocalSearchNeighborhoodOperators* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSearchParameters_LocalSearchNeighborhoodOperators* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSearchParameters_LocalSearchNeighborhoodOperators* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSearchParameters_LocalSearchNeighborhoodOperators>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from) {
    RoutingSearchParameters_LocalSearchNeighborhoodOperators::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoutingSearchParameters_LocalSearchNeighborhoodOperators* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators";
  }
  protected:
  explicit RoutingSearchParameters_LocalSearchNeighborhoodOperators(::google::protobuf::Arena* arena);
  RoutingSearchParameters_LocalSearchNeighborhoodOperators(::google::protobuf::Arena* arena, const RoutingSearchParameters_LocalSearchNeighborhoodOperators& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseRelocateFieldNumber = 1,
    kUseRelocatePairFieldNumber = 2,
    kUseRelocateNeighborsFieldNumber = 3,
    kUseExchangeFieldNumber = 4,
    kUseCrossFieldNumber = 5,
    kUseCrossExchangeFieldNumber = 6,
    kUseTwoOptFieldNumber = 7,
    kUseOrOptFieldNumber = 8,
    kUseLinKernighanFieldNumber = 9,
    kUseTspOptFieldNumber = 10,
    kUseMakeActiveFieldNumber = 11,
    kUseMakeInactiveFieldNumber = 12,
    kUseMakeChainInactiveFieldNumber = 13,
    kUseSwapActiveFieldNumber = 14,
    kUseExtendedSwapActiveFieldNumber = 15,
    kUsePathLnsFieldNumber = 16,
    kUseFullPathLnsFieldNumber = 17,
    kUseTspLnsFieldNumber = 18,
    kUseInactiveLnsFieldNumber = 19,
    kUseNodePairSwapActiveFieldNumber = 20,
    kUseRelocateAndMakeActiveFieldNumber = 21,
    kUseExchangePairFieldNumber = 22,
    kUseRelocateExpensiveChainFieldNumber = 23,
    kUseLightRelocatePairFieldNumber = 24,
    kUseRelocateSubtripFieldNumber = 25,
    kUseExchangeSubtripFieldNumber = 26,
    kUseGlobalCheapestInsertionPathLnsFieldNumber = 27,
    kUseLocalCheapestInsertionPathLnsFieldNumber = 28,
    kUseGlobalCheapestInsertionExpensiveChainLnsFieldNumber = 29,
    kUseLocalCheapestInsertionExpensiveChainLnsFieldNumber = 30,
    kUseGlobalCheapestInsertionCloseNodesLnsFieldNumber = 31,
    kUseLocalCheapestInsertionCloseNodesLnsFieldNumber = 32,
    kUseRelocatePathGlobalCheapestInsertionInsertUnperformedFieldNumber = 33,
    kUseShortestPathSwapActiveFieldNumber = 34,
  };
  // .operations_research.OptionalBoolean use_relocate = 1;
  void clear_use_relocate() ;
  ::operations_research::OptionalBoolean use_relocate() const;
  void set_use_relocate(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate() const;
  void _internal_set_use_relocate(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_pair = 2;
  void clear_use_relocate_pair() ;
  ::operations_research::OptionalBoolean use_relocate_pair() const;
  void set_use_relocate_pair(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_pair() const;
  void _internal_set_use_relocate_pair(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_neighbors = 3;
  void clear_use_relocate_neighbors() ;
  ::operations_research::OptionalBoolean use_relocate_neighbors() const;
  void set_use_relocate_neighbors(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_neighbors() const;
  void _internal_set_use_relocate_neighbors(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_exchange = 4;
  void clear_use_exchange() ;
  ::operations_research::OptionalBoolean use_exchange() const;
  void set_use_exchange(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_exchange() const;
  void _internal_set_use_exchange(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_cross = 5;
  void clear_use_cross() ;
  ::operations_research::OptionalBoolean use_cross() const;
  void set_use_cross(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_cross() const;
  void _internal_set_use_cross(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_cross_exchange = 6;
  void clear_use_cross_exchange() ;
  ::operations_research::OptionalBoolean use_cross_exchange() const;
  void set_use_cross_exchange(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_cross_exchange() const;
  void _internal_set_use_cross_exchange(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_two_opt = 7;
  void clear_use_two_opt() ;
  ::operations_research::OptionalBoolean use_two_opt() const;
  void set_use_two_opt(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_two_opt() const;
  void _internal_set_use_two_opt(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_or_opt = 8;
  void clear_use_or_opt() ;
  ::operations_research::OptionalBoolean use_or_opt() const;
  void set_use_or_opt(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_or_opt() const;
  void _internal_set_use_or_opt(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_lin_kernighan = 9;
  void clear_use_lin_kernighan() ;
  ::operations_research::OptionalBoolean use_lin_kernighan() const;
  void set_use_lin_kernighan(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_lin_kernighan() const;
  void _internal_set_use_lin_kernighan(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_tsp_opt = 10;
  void clear_use_tsp_opt() ;
  ::operations_research::OptionalBoolean use_tsp_opt() const;
  void set_use_tsp_opt(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_tsp_opt() const;
  void _internal_set_use_tsp_opt(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_make_active = 11;
  void clear_use_make_active() ;
  ::operations_research::OptionalBoolean use_make_active() const;
  void set_use_make_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_make_active() const;
  void _internal_set_use_make_active(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_make_inactive = 12;
  void clear_use_make_inactive() ;
  ::operations_research::OptionalBoolean use_make_inactive() const;
  void set_use_make_inactive(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_make_inactive() const;
  void _internal_set_use_make_inactive(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_make_chain_inactive = 13;
  void clear_use_make_chain_inactive() ;
  ::operations_research::OptionalBoolean use_make_chain_inactive() const;
  void set_use_make_chain_inactive(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_make_chain_inactive() const;
  void _internal_set_use_make_chain_inactive(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_swap_active = 14;
  void clear_use_swap_active() ;
  ::operations_research::OptionalBoolean use_swap_active() const;
  void set_use_swap_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_swap_active() const;
  void _internal_set_use_swap_active(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_extended_swap_active = 15;
  void clear_use_extended_swap_active() ;
  ::operations_research::OptionalBoolean use_extended_swap_active() const;
  void set_use_extended_swap_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_extended_swap_active() const;
  void _internal_set_use_extended_swap_active(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_path_lns = 16;
  void clear_use_path_lns() ;
  ::operations_research::OptionalBoolean use_path_lns() const;
  void set_use_path_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_path_lns() const;
  void _internal_set_use_path_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_full_path_lns = 17;
  void clear_use_full_path_lns() ;
  ::operations_research::OptionalBoolean use_full_path_lns() const;
  void set_use_full_path_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_full_path_lns() const;
  void _internal_set_use_full_path_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_tsp_lns = 18;
  void clear_use_tsp_lns() ;
  ::operations_research::OptionalBoolean use_tsp_lns() const;
  void set_use_tsp_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_tsp_lns() const;
  void _internal_set_use_tsp_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_inactive_lns = 19;
  void clear_use_inactive_lns() ;
  ::operations_research::OptionalBoolean use_inactive_lns() const;
  void set_use_inactive_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_inactive_lns() const;
  void _internal_set_use_inactive_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
  void clear_use_node_pair_swap_active() ;
  ::operations_research::OptionalBoolean use_node_pair_swap_active() const;
  void set_use_node_pair_swap_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_node_pair_swap_active() const;
  void _internal_set_use_node_pair_swap_active(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
  void clear_use_relocate_and_make_active() ;
  ::operations_research::OptionalBoolean use_relocate_and_make_active() const;
  void set_use_relocate_and_make_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_and_make_active() const;
  void _internal_set_use_relocate_and_make_active(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_exchange_pair = 22;
  void clear_use_exchange_pair() ;
  ::operations_research::OptionalBoolean use_exchange_pair() const;
  void set_use_exchange_pair(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_exchange_pair() const;
  void _internal_set_use_exchange_pair(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
  void clear_use_relocate_expensive_chain() ;
  ::operations_research::OptionalBoolean use_relocate_expensive_chain() const;
  void set_use_relocate_expensive_chain(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_expensive_chain() const;
  void _internal_set_use_relocate_expensive_chain(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_light_relocate_pair = 24;
  void clear_use_light_relocate_pair() ;
  ::operations_research::OptionalBoolean use_light_relocate_pair() const;
  void set_use_light_relocate_pair(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_light_relocate_pair() const;
  void _internal_set_use_light_relocate_pair(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_subtrip = 25;
  void clear_use_relocate_subtrip() ;
  ::operations_research::OptionalBoolean use_relocate_subtrip() const;
  void set_use_relocate_subtrip(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_subtrip() const;
  void _internal_set_use_relocate_subtrip(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_exchange_subtrip = 26;
  void clear_use_exchange_subtrip() ;
  ::operations_research::OptionalBoolean use_exchange_subtrip() const;
  void set_use_exchange_subtrip(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_exchange_subtrip() const;
  void _internal_set_use_exchange_subtrip(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
  void clear_use_global_cheapest_insertion_path_lns() ;
  ::operations_research::OptionalBoolean use_global_cheapest_insertion_path_lns() const;
  void set_use_global_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_global_cheapest_insertion_path_lns() const;
  void _internal_set_use_global_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
  void clear_use_local_cheapest_insertion_path_lns() ;
  ::operations_research::OptionalBoolean use_local_cheapest_insertion_path_lns() const;
  void set_use_local_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_local_cheapest_insertion_path_lns() const;
  void _internal_set_use_local_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
  void clear_use_global_cheapest_insertion_expensive_chain_lns() ;
  ::operations_research::OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns() const;
  void set_use_global_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_global_cheapest_insertion_expensive_chain_lns() const;
  void _internal_set_use_global_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
  void clear_use_local_cheapest_insertion_expensive_chain_lns() ;
  ::operations_research::OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns() const;
  void set_use_local_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_local_cheapest_insertion_expensive_chain_lns() const;
  void _internal_set_use_local_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_global_cheapest_insertion_close_nodes_lns = 31;
  void clear_use_global_cheapest_insertion_close_nodes_lns() ;
  ::operations_research::OptionalBoolean use_global_cheapest_insertion_close_nodes_lns() const;
  void set_use_global_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_global_cheapest_insertion_close_nodes_lns() const;
  void _internal_set_use_global_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_local_cheapest_insertion_close_nodes_lns = 32;
  void clear_use_local_cheapest_insertion_close_nodes_lns() ;
  ::operations_research::OptionalBoolean use_local_cheapest_insertion_close_nodes_lns() const;
  void set_use_local_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_local_cheapest_insertion_close_nodes_lns() const;
  void _internal_set_use_local_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed = 33;
  void clear_use_relocate_path_global_cheapest_insertion_insert_unperformed() ;
  ::operations_research::OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed() const;
  void set_use_relocate_path_global_cheapest_insertion_insert_unperformed(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_relocate_path_global_cheapest_insertion_insert_unperformed() const;
  void _internal_set_use_relocate_path_global_cheapest_insertion_insert_unperformed(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_shortest_path_swap_active = 34;
  void clear_use_shortest_path_swap_active() ;
  ::operations_research::OptionalBoolean use_shortest_path_swap_active() const;
  void set_use_shortest_path_swap_active(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_shortest_path_swap_active() const;
  void _internal_set_use_shortest_path_swap_active(::operations_research::OptionalBoolean value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 34, 0,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int use_relocate_;
    int use_relocate_pair_;
    int use_relocate_neighbors_;
    int use_exchange_;
    int use_cross_;
    int use_cross_exchange_;
    int use_two_opt_;
    int use_or_opt_;
    int use_lin_kernighan_;
    int use_tsp_opt_;
    int use_make_active_;
    int use_make_inactive_;
    int use_make_chain_inactive_;
    int use_swap_active_;
    int use_extended_swap_active_;
    int use_path_lns_;
    int use_full_path_lns_;
    int use_tsp_lns_;
    int use_inactive_lns_;
    int use_node_pair_swap_active_;
    int use_relocate_and_make_active_;
    int use_exchange_pair_;
    int use_relocate_expensive_chain_;
    int use_light_relocate_pair_;
    int use_relocate_subtrip_;
    int use_exchange_subtrip_;
    int use_global_cheapest_insertion_path_lns_;
    int use_local_cheapest_insertion_path_lns_;
    int use_global_cheapest_insertion_expensive_chain_lns_;
    int use_local_cheapest_insertion_expensive_chain_lns_;
    int use_global_cheapest_insertion_close_nodes_lns_;
    int use_local_cheapest_insertion_close_nodes_lns_;
    int use_relocate_path_global_cheapest_insertion_insert_unperformed_;
    int use_shortest_path_swap_active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
};// -------------------------------------------------------------------

class RoutingSearchParameters_ImprovementSearchLimitParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters) */ {
 public:
  inline RoutingSearchParameters_ImprovementSearchLimitParameters() : RoutingSearchParameters_ImprovementSearchLimitParameters(nullptr) {}
  ~RoutingSearchParameters_ImprovementSearchLimitParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoutingSearchParameters_ImprovementSearchLimitParameters(::google::protobuf::internal::ConstantInitialized);

  inline RoutingSearchParameters_ImprovementSearchLimitParameters(const RoutingSearchParameters_ImprovementSearchLimitParameters& from)
      : RoutingSearchParameters_ImprovementSearchLimitParameters(nullptr, from) {}
  RoutingSearchParameters_ImprovementSearchLimitParameters(RoutingSearchParameters_ImprovementSearchLimitParameters&& from) noexcept
    : RoutingSearchParameters_ImprovementSearchLimitParameters() {
    *this = ::std::move(from);
  }

  inline RoutingSearchParameters_ImprovementSearchLimitParameters& operator=(const RoutingSearchParameters_ImprovementSearchLimitParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSearchParameters_ImprovementSearchLimitParameters& operator=(RoutingSearchParameters_ImprovementSearchLimitParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSearchParameters_ImprovementSearchLimitParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSearchParameters_ImprovementSearchLimitParameters* internal_default_instance() {
    return reinterpret_cast<const RoutingSearchParameters_ImprovementSearchLimitParameters*>(
               &_RoutingSearchParameters_ImprovementSearchLimitParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RoutingSearchParameters_ImprovementSearchLimitParameters& a, RoutingSearchParameters_ImprovementSearchLimitParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSearchParameters_ImprovementSearchLimitParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSearchParameters_ImprovementSearchLimitParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSearchParameters_ImprovementSearchLimitParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSearchParameters_ImprovementSearchLimitParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutingSearchParameters_ImprovementSearchLimitParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoutingSearchParameters_ImprovementSearchLimitParameters& from) {
    RoutingSearchParameters_ImprovementSearchLimitParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoutingSearchParameters_ImprovementSearchLimitParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters";
  }
  protected:
  explicit RoutingSearchParameters_ImprovementSearchLimitParameters(::google::protobuf::Arena* arena);
  RoutingSearchParameters_ImprovementSearchLimitParameters(::google::protobuf::Arena* arena, const RoutingSearchParameters_ImprovementSearchLimitParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImprovementRateCoefficientFieldNumber = 38,
    kImprovementRateSolutionsDistanceFieldNumber = 39,
  };
  // double improvement_rate_coefficient = 38;
  void clear_improvement_rate_coefficient() ;
  double improvement_rate_coefficient() const;
  void set_improvement_rate_coefficient(double value);

  private:
  double _internal_improvement_rate_coefficient() const;
  void _internal_set_improvement_rate_coefficient(double value);

  public:
  // int32 improvement_rate_solutions_distance = 39;
  void clear_improvement_rate_solutions_distance() ;
  ::int32_t improvement_rate_solutions_distance() const;
  void set_improvement_rate_solutions_distance(::int32_t value);

  private:
  ::int32_t _internal_improvement_rate_solutions_distance() const;
  void _internal_set_improvement_rate_solutions_distance(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double improvement_rate_coefficient_;
    ::int32_t improvement_rate_solutions_distance_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
};// -------------------------------------------------------------------

class RoutingSearchParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.RoutingSearchParameters) */ {
 public:
  inline RoutingSearchParameters() : RoutingSearchParameters(nullptr) {}
  ~RoutingSearchParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoutingSearchParameters(::google::protobuf::internal::ConstantInitialized);

  inline RoutingSearchParameters(const RoutingSearchParameters& from)
      : RoutingSearchParameters(nullptr, from) {}
  RoutingSearchParameters(RoutingSearchParameters&& from) noexcept
    : RoutingSearchParameters() {
    *this = ::std::move(from);
  }

  inline RoutingSearchParameters& operator=(const RoutingSearchParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSearchParameters& operator=(RoutingSearchParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSearchParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSearchParameters* internal_default_instance() {
    return reinterpret_cast<const RoutingSearchParameters*>(
               &_RoutingSearchParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoutingSearchParameters& a, RoutingSearchParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSearchParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSearchParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSearchParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSearchParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutingSearchParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoutingSearchParameters& from) {
    RoutingSearchParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoutingSearchParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.RoutingSearchParameters";
  }
  protected:
  explicit RoutingSearchParameters(::google::protobuf::Arena* arena);
  RoutingSearchParameters(::google::protobuf::Arena* arena, const RoutingSearchParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using LocalSearchNeighborhoodOperators = RoutingSearchParameters_LocalSearchNeighborhoodOperators;
  using ImprovementSearchLimitParameters = RoutingSearchParameters_ImprovementSearchLimitParameters;

  using PairInsertionStrategy = RoutingSearchParameters_PairInsertionStrategy;
  static constexpr PairInsertionStrategy AUTOMATIC = RoutingSearchParameters_PairInsertionStrategy_AUTOMATIC;
  static constexpr PairInsertionStrategy BEST_PICKUP_THEN_BEST_DELIVERY = RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_THEN_BEST_DELIVERY;
  static constexpr PairInsertionStrategy BEST_PICKUP_DELIVERY_PAIR = RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_DELIVERY_PAIR;
  static constexpr PairInsertionStrategy BEST_PICKUP_DELIVERY_PAIR_MULTITOUR = RoutingSearchParameters_PairInsertionStrategy_BEST_PICKUP_DELIVERY_PAIR_MULTITOUR;
  static inline bool PairInsertionStrategy_IsValid(int value) {
    return RoutingSearchParameters_PairInsertionStrategy_IsValid(value);
  }
  static constexpr PairInsertionStrategy PairInsertionStrategy_MIN = RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_MIN;
  static constexpr PairInsertionStrategy PairInsertionStrategy_MAX = RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_MAX;
  static constexpr int PairInsertionStrategy_ARRAYSIZE = RoutingSearchParameters_PairInsertionStrategy_PairInsertionStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PairInsertionStrategy_descriptor() {
    return RoutingSearchParameters_PairInsertionStrategy_descriptor();
  }
  template <typename T>
  static inline const std::string& PairInsertionStrategy_Name(T value) {
    return RoutingSearchParameters_PairInsertionStrategy_Name(value);
  }
  static inline bool PairInsertionStrategy_Parse(absl::string_view name, PairInsertionStrategy* value) {
    return RoutingSearchParameters_PairInsertionStrategy_Parse(name, value);
  }

  using SchedulingSolver = RoutingSearchParameters_SchedulingSolver;
  static constexpr SchedulingSolver SCHEDULING_UNSET = RoutingSearchParameters_SchedulingSolver_SCHEDULING_UNSET;
  static constexpr SchedulingSolver SCHEDULING_GLOP = RoutingSearchParameters_SchedulingSolver_SCHEDULING_GLOP;
  static constexpr SchedulingSolver SCHEDULING_CP_SAT = RoutingSearchParameters_SchedulingSolver_SCHEDULING_CP_SAT;
  static inline bool SchedulingSolver_IsValid(int value) {
    return RoutingSearchParameters_SchedulingSolver_IsValid(value);
  }
  static constexpr SchedulingSolver SchedulingSolver_MIN = RoutingSearchParameters_SchedulingSolver_SchedulingSolver_MIN;
  static constexpr SchedulingSolver SchedulingSolver_MAX = RoutingSearchParameters_SchedulingSolver_SchedulingSolver_MAX;
  static constexpr int SchedulingSolver_ARRAYSIZE = RoutingSearchParameters_SchedulingSolver_SchedulingSolver_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* SchedulingSolver_descriptor() {
    return RoutingSearchParameters_SchedulingSolver_descriptor();
  }
  template <typename T>
  static inline const std::string& SchedulingSolver_Name(T value) {
    return RoutingSearchParameters_SchedulingSolver_Name(value);
  }
  static inline bool SchedulingSolver_Parse(absl::string_view name, SchedulingSolver* value) {
    return RoutingSearchParameters_SchedulingSolver_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLogTagFieldNumber = 36,
    kLocalSearchOperatorsFieldNumber = 3,
    kTimeLimitFieldNumber = 9,
    kLnsTimeLimitFieldNumber = 10,
    kImprovementLimitParametersFieldNumber = 37,
    kSatParametersFieldNumber = 48,
    kFirstSolutionStrategyFieldNumber = 1,
    kLocalSearchMetaheuristicFieldNumber = 4,
    kGuidedLocalSearchLambdaCoefficientFieldNumber = 5,
    kOptimizationStepFieldNumber = 7,
    kSolutionLimitFieldNumber = 8,
    kSavingsNeighborsRatioFieldNumber = 14,
    kLogSearchFieldNumber = 13,
    kNumberOfSolutionsToCollectFieldNumber = 17,
    kCheapestInsertionFarthestSeedsRatioFieldNumber = 16,
    kSavingsArcCoefficientFieldNumber = 18,
    kRelocateExpensiveChainNumArcsToConsiderFieldNumber = 20,
    kUseUnfilteredFirstSolutionStrategyFieldNumber = 2,
    kSavingsAddReverseArcsFieldNumber = 15,
    kSavingsParallelRoutesFieldNumber = 19,
    kCheapestInsertionFirstSolutionUseNeighborsRatioForInitializationFieldNumber = 46,
    kCheapestInsertionFirstSolutionNeighborsRatioFieldNumber = 21,
    kLogCostScalingFactorFieldNumber = 22,
    kSavingsMaxMemoryUsageBytesFieldNumber = 23,
    kUseCpSatFieldNumber = 27,
    kUseCpFieldNumber = 28,
    kLogCostOffsetFieldNumber = 29,
    kCheapestInsertionLsOperatorNeighborsRatioFieldNumber = 31,
    kUseDepthFirstSearchFieldNumber = 6,
    kReportIntermediateCpSatSolutionsFieldNumber = 56,
    kDisableSchedulingBewareThisMayDegradePerformanceFieldNumber = 50,
    kUseFullPropagationFieldNumber = 11,
    kHeuristicExpensiveChainLnsNumArcsToConsiderFieldNumber = 32,
    kContinuousSchedulingSolverFieldNumber = 33,
    kMixedIntegerSchedulingSolverFieldNumber = 34,
    kHeuristicCloseNodesLnsNumNodesFieldNumber = 35,
    kCheapestInsertionAddUnperformedEntriesFieldNumber = 40,
    kChristofidesUseMinimumMatchingFieldNumber = 30,
    kUseMultiArmedBanditConcatenateOperatorsFieldNumber = 41,
    kGuidedLocalSearchResetPenaltiesOnNewBestSolutionFieldNumber = 51,
    kMultiArmedBanditCompoundOperatorMemoryCoefficientFieldNumber = 42,
    kMultiArmedBanditCompoundOperatorExplorationCoefficientFieldNumber = 43,
    kCheapestInsertionFirstSolutionMinNeighborsFieldNumber = 44,
    kCheapestInsertionLsOperatorMinNeighborsFieldNumber = 45,
    kUseGeneralizedCpSatFieldNumber = 47,
    kLocalCheapestInsertionPickupDeliveryStrategyFieldNumber = 49,
    kLsOperatorNeighborsRatioFieldNumber = 53,
    kFallbackToCpSatSizeThresholdFieldNumber = 52,
    kLsOperatorMinNeighborsFieldNumber = 54,
    kSecondaryLsTimeLimitRatioFieldNumber = 57,
    kLocalCheapestCostInsertionPickupDeliveryStrategyFieldNumber = 55,
  };
  // string log_tag = 36;
  void clear_log_tag() ;
  const std::string& log_tag() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_log_tag(Arg_&& arg, Args_... args);
  std::string* mutable_log_tag();
  PROTOBUF_NODISCARD std::string* release_log_tag();
  void set_allocated_log_tag(std::string* value);

  private:
  const std::string& _internal_log_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_log_tag(
      const std::string& value);
  std::string* _internal_mutable_log_tag();

  public:
  // .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
  bool has_local_search_operators() const;
  void clear_local_search_operators() ;
  const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& local_search_operators() const;
  PROTOBUF_NODISCARD ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* release_local_search_operators();
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* mutable_local_search_operators();
  void set_allocated_local_search_operators(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* value);
  void unsafe_arena_set_allocated_local_search_operators(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* value);
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* unsafe_arena_release_local_search_operators();

  private:
  const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& _internal_local_search_operators() const;
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* _internal_mutable_local_search_operators();

  public:
  // .google.protobuf.Duration time_limit = 9;
  bool has_time_limit() const;
  void clear_time_limit() ;
  const ::google::protobuf::Duration& time_limit() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_time_limit();
  ::google::protobuf::Duration* mutable_time_limit();
  void set_allocated_time_limit(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_time_limit(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_time_limit();

  private:
  const ::google::protobuf::Duration& _internal_time_limit() const;
  ::google::protobuf::Duration* _internal_mutable_time_limit();

  public:
  // .google.protobuf.Duration lns_time_limit = 10;
  bool has_lns_time_limit() const;
  void clear_lns_time_limit() ;
  const ::google::protobuf::Duration& lns_time_limit() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_lns_time_limit();
  ::google::protobuf::Duration* mutable_lns_time_limit();
  void set_allocated_lns_time_limit(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_lns_time_limit(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_lns_time_limit();

  private:
  const ::google::protobuf::Duration& _internal_lns_time_limit() const;
  ::google::protobuf::Duration* _internal_mutable_lns_time_limit();

  public:
  // .operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters improvement_limit_parameters = 37;
  bool has_improvement_limit_parameters() const;
  void clear_improvement_limit_parameters() ;
  const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters& improvement_limit_parameters() const;
  PROTOBUF_NODISCARD ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* release_improvement_limit_parameters();
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* mutable_improvement_limit_parameters();
  void set_allocated_improvement_limit_parameters(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* value);
  void unsafe_arena_set_allocated_improvement_limit_parameters(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* value);
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* unsafe_arena_release_improvement_limit_parameters();

  private:
  const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters& _internal_improvement_limit_parameters() const;
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* _internal_mutable_improvement_limit_parameters();

  public:
  // .operations_research.sat.SatParameters sat_parameters = 48;
  bool has_sat_parameters() const;
  void clear_sat_parameters() ;
  const ::operations_research::sat::SatParameters& sat_parameters() const;
  PROTOBUF_NODISCARD ::operations_research::sat::SatParameters* release_sat_parameters();
  ::operations_research::sat::SatParameters* mutable_sat_parameters();
  void set_allocated_sat_parameters(::operations_research::sat::SatParameters* value);
  void unsafe_arena_set_allocated_sat_parameters(::operations_research::sat::SatParameters* value);
  ::operations_research::sat::SatParameters* unsafe_arena_release_sat_parameters();

  private:
  const ::operations_research::sat::SatParameters& _internal_sat_parameters() const;
  ::operations_research::sat::SatParameters* _internal_mutable_sat_parameters();

  public:
  // .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
  void clear_first_solution_strategy() ;
  ::operations_research::FirstSolutionStrategy_Value first_solution_strategy() const;
  void set_first_solution_strategy(::operations_research::FirstSolutionStrategy_Value value);

  private:
  ::operations_research::FirstSolutionStrategy_Value _internal_first_solution_strategy() const;
  void _internal_set_first_solution_strategy(::operations_research::FirstSolutionStrategy_Value value);

  public:
  // .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
  void clear_local_search_metaheuristic() ;
  ::operations_research::LocalSearchMetaheuristic_Value local_search_metaheuristic() const;
  void set_local_search_metaheuristic(::operations_research::LocalSearchMetaheuristic_Value value);

  private:
  ::operations_research::LocalSearchMetaheuristic_Value _internal_local_search_metaheuristic() const;
  void _internal_set_local_search_metaheuristic(::operations_research::LocalSearchMetaheuristic_Value value);

  public:
  // double guided_local_search_lambda_coefficient = 5;
  void clear_guided_local_search_lambda_coefficient() ;
  double guided_local_search_lambda_coefficient() const;
  void set_guided_local_search_lambda_coefficient(double value);

  private:
  double _internal_guided_local_search_lambda_coefficient() const;
  void _internal_set_guided_local_search_lambda_coefficient(double value);

  public:
  // double optimization_step = 7;
  void clear_optimization_step() ;
  double optimization_step() const;
  void set_optimization_step(double value);

  private:
  double _internal_optimization_step() const;
  void _internal_set_optimization_step(double value);

  public:
  // int64 solution_limit = 8;
  void clear_solution_limit() ;
  ::int64_t solution_limit() const;
  void set_solution_limit(::int64_t value);

  private:
  ::int64_t _internal_solution_limit() const;
  void _internal_set_solution_limit(::int64_t value);

  public:
  // double savings_neighbors_ratio = 14;
  void clear_savings_neighbors_ratio() ;
  double savings_neighbors_ratio() const;
  void set_savings_neighbors_ratio(double value);

  private:
  double _internal_savings_neighbors_ratio() const;
  void _internal_set_savings_neighbors_ratio(double value);

  public:
  // bool log_search = 13;
  void clear_log_search() ;
  bool log_search() const;
  void set_log_search(bool value);

  private:
  bool _internal_log_search() const;
  void _internal_set_log_search(bool value);

  public:
  // int32 number_of_solutions_to_collect = 17;
  void clear_number_of_solutions_to_collect() ;
  ::int32_t number_of_solutions_to_collect() const;
  void set_number_of_solutions_to_collect(::int32_t value);

  private:
  ::int32_t _internal_number_of_solutions_to_collect() const;
  void _internal_set_number_of_solutions_to_collect(::int32_t value);

  public:
  // double cheapest_insertion_farthest_seeds_ratio = 16;
  void clear_cheapest_insertion_farthest_seeds_ratio() ;
  double cheapest_insertion_farthest_seeds_ratio() const;
  void set_cheapest_insertion_farthest_seeds_ratio(double value);

  private:
  double _internal_cheapest_insertion_farthest_seeds_ratio() const;
  void _internal_set_cheapest_insertion_farthest_seeds_ratio(double value);

  public:
  // double savings_arc_coefficient = 18;
  void clear_savings_arc_coefficient() ;
  double savings_arc_coefficient() const;
  void set_savings_arc_coefficient(double value);

  private:
  double _internal_savings_arc_coefficient() const;
  void _internal_set_savings_arc_coefficient(double value);

  public:
  // int32 relocate_expensive_chain_num_arcs_to_consider = 20;
  void clear_relocate_expensive_chain_num_arcs_to_consider() ;
  ::int32_t relocate_expensive_chain_num_arcs_to_consider() const;
  void set_relocate_expensive_chain_num_arcs_to_consider(::int32_t value);

  private:
  ::int32_t _internal_relocate_expensive_chain_num_arcs_to_consider() const;
  void _internal_set_relocate_expensive_chain_num_arcs_to_consider(::int32_t value);

  public:
  // bool use_unfiltered_first_solution_strategy = 2;
  void clear_use_unfiltered_first_solution_strategy() ;
  bool use_unfiltered_first_solution_strategy() const;
  void set_use_unfiltered_first_solution_strategy(bool value);

  private:
  bool _internal_use_unfiltered_first_solution_strategy() const;
  void _internal_set_use_unfiltered_first_solution_strategy(bool value);

  public:
  // bool savings_add_reverse_arcs = 15;
  void clear_savings_add_reverse_arcs() ;
  bool savings_add_reverse_arcs() const;
  void set_savings_add_reverse_arcs(bool value);

  private:
  bool _internal_savings_add_reverse_arcs() const;
  void _internal_set_savings_add_reverse_arcs(bool value);

  public:
  // bool savings_parallel_routes = 19;
  void clear_savings_parallel_routes() ;
  bool savings_parallel_routes() const;
  void set_savings_parallel_routes(bool value);

  private:
  bool _internal_savings_parallel_routes() const;
  void _internal_set_savings_parallel_routes(bool value);

  public:
  // bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46;
  void clear_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() ;
  bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() const;
  void set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(bool value);

  private:
  bool _internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() const;
  void _internal_set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(bool value);

  public:
  // double cheapest_insertion_first_solution_neighbors_ratio = 21;
  void clear_cheapest_insertion_first_solution_neighbors_ratio() ;
  double cheapest_insertion_first_solution_neighbors_ratio() const;
  void set_cheapest_insertion_first_solution_neighbors_ratio(double value);

  private:
  double _internal_cheapest_insertion_first_solution_neighbors_ratio() const;
  void _internal_set_cheapest_insertion_first_solution_neighbors_ratio(double value);

  public:
  // double log_cost_scaling_factor = 22;
  void clear_log_cost_scaling_factor() ;
  double log_cost_scaling_factor() const;
  void set_log_cost_scaling_factor(double value);

  private:
  double _internal_log_cost_scaling_factor() const;
  void _internal_set_log_cost_scaling_factor(double value);

  public:
  // double savings_max_memory_usage_bytes = 23;
  void clear_savings_max_memory_usage_bytes() ;
  double savings_max_memory_usage_bytes() const;
  void set_savings_max_memory_usage_bytes(double value);

  private:
  double _internal_savings_max_memory_usage_bytes() const;
  void _internal_set_savings_max_memory_usage_bytes(double value);

  public:
  // .operations_research.OptionalBoolean use_cp_sat = 27;
  void clear_use_cp_sat() ;
  ::operations_research::OptionalBoolean use_cp_sat() const;
  void set_use_cp_sat(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_cp_sat() const;
  void _internal_set_use_cp_sat(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.OptionalBoolean use_cp = 28;
  void clear_use_cp() ;
  ::operations_research::OptionalBoolean use_cp() const;
  void set_use_cp(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_cp() const;
  void _internal_set_use_cp(::operations_research::OptionalBoolean value);

  public:
  // double log_cost_offset = 29;
  void clear_log_cost_offset() ;
  double log_cost_offset() const;
  void set_log_cost_offset(double value);

  private:
  double _internal_log_cost_offset() const;
  void _internal_set_log_cost_offset(double value);

  public:
  // double cheapest_insertion_ls_operator_neighbors_ratio = 31;
  void clear_cheapest_insertion_ls_operator_neighbors_ratio() ;
  double cheapest_insertion_ls_operator_neighbors_ratio() const;
  void set_cheapest_insertion_ls_operator_neighbors_ratio(double value);

  private:
  double _internal_cheapest_insertion_ls_operator_neighbors_ratio() const;
  void _internal_set_cheapest_insertion_ls_operator_neighbors_ratio(double value);

  public:
  // bool use_depth_first_search = 6;
  void clear_use_depth_first_search() ;
  bool use_depth_first_search() const;
  void set_use_depth_first_search(bool value);

  private:
  bool _internal_use_depth_first_search() const;
  void _internal_set_use_depth_first_search(bool value);

  public:
  // bool report_intermediate_cp_sat_solutions = 56;
  void clear_report_intermediate_cp_sat_solutions() ;
  bool report_intermediate_cp_sat_solutions() const;
  void set_report_intermediate_cp_sat_solutions(bool value);

  private:
  bool _internal_report_intermediate_cp_sat_solutions() const;
  void _internal_set_report_intermediate_cp_sat_solutions(bool value);

  public:
  // optional bool disable_scheduling_beware_this_may_degrade_performance = 50;
  bool has_disable_scheduling_beware_this_may_degrade_performance() const;
  void clear_disable_scheduling_beware_this_may_degrade_performance() ;
  bool disable_scheduling_beware_this_may_degrade_performance() const;
  void set_disable_scheduling_beware_this_may_degrade_performance(bool value);

  private:
  bool _internal_disable_scheduling_beware_this_may_degrade_performance() const;
  void _internal_set_disable_scheduling_beware_this_may_degrade_performance(bool value);

  public:
  // bool use_full_propagation = 11;
  void clear_use_full_propagation() ;
  bool use_full_propagation() const;
  void set_use_full_propagation(bool value);

  private:
  bool _internal_use_full_propagation() const;
  void _internal_set_use_full_propagation(bool value);

  public:
  // int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
  void clear_heuristic_expensive_chain_lns_num_arcs_to_consider() ;
  ::int32_t heuristic_expensive_chain_lns_num_arcs_to_consider() const;
  void set_heuristic_expensive_chain_lns_num_arcs_to_consider(::int32_t value);

  private:
  ::int32_t _internal_heuristic_expensive_chain_lns_num_arcs_to_consider() const;
  void _internal_set_heuristic_expensive_chain_lns_num_arcs_to_consider(::int32_t value);

  public:
  // .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
  void clear_continuous_scheduling_solver() ;
  ::operations_research::RoutingSearchParameters_SchedulingSolver continuous_scheduling_solver() const;
  void set_continuous_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value);

  private:
  ::operations_research::RoutingSearchParameters_SchedulingSolver _internal_continuous_scheduling_solver() const;
  void _internal_set_continuous_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value);

  public:
  // .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
  void clear_mixed_integer_scheduling_solver() ;
  ::operations_research::RoutingSearchParameters_SchedulingSolver mixed_integer_scheduling_solver() const;
  void set_mixed_integer_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value);

  private:
  ::operations_research::RoutingSearchParameters_SchedulingSolver _internal_mixed_integer_scheduling_solver() const;
  void _internal_set_mixed_integer_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value);

  public:
  // int32 heuristic_close_nodes_lns_num_nodes = 35;
  void clear_heuristic_close_nodes_lns_num_nodes() ;
  ::int32_t heuristic_close_nodes_lns_num_nodes() const;
  void set_heuristic_close_nodes_lns_num_nodes(::int32_t value);

  private:
  ::int32_t _internal_heuristic_close_nodes_lns_num_nodes() const;
  void _internal_set_heuristic_close_nodes_lns_num_nodes(::int32_t value);

  public:
  // bool cheapest_insertion_add_unperformed_entries = 40;
  void clear_cheapest_insertion_add_unperformed_entries() ;
  bool cheapest_insertion_add_unperformed_entries() const;
  void set_cheapest_insertion_add_unperformed_entries(bool value);

  private:
  bool _internal_cheapest_insertion_add_unperformed_entries() const;
  void _internal_set_cheapest_insertion_add_unperformed_entries(bool value);

  public:
  // bool christofides_use_minimum_matching = 30;
  void clear_christofides_use_minimum_matching() ;
  bool christofides_use_minimum_matching() const;
  void set_christofides_use_minimum_matching(bool value);

  private:
  bool _internal_christofides_use_minimum_matching() const;
  void _internal_set_christofides_use_minimum_matching(bool value);

  public:
  // bool use_multi_armed_bandit_concatenate_operators = 41;
  void clear_use_multi_armed_bandit_concatenate_operators() ;
  bool use_multi_armed_bandit_concatenate_operators() const;
  void set_use_multi_armed_bandit_concatenate_operators(bool value);

  private:
  bool _internal_use_multi_armed_bandit_concatenate_operators() const;
  void _internal_set_use_multi_armed_bandit_concatenate_operators(bool value);

  public:
  // bool guided_local_search_reset_penalties_on_new_best_solution = 51;
  void clear_guided_local_search_reset_penalties_on_new_best_solution() ;
  bool guided_local_search_reset_penalties_on_new_best_solution() const;
  void set_guided_local_search_reset_penalties_on_new_best_solution(bool value);

  private:
  bool _internal_guided_local_search_reset_penalties_on_new_best_solution() const;
  void _internal_set_guided_local_search_reset_penalties_on_new_best_solution(bool value);

  public:
  // double multi_armed_bandit_compound_operator_memory_coefficient = 42;
  void clear_multi_armed_bandit_compound_operator_memory_coefficient() ;
  double multi_armed_bandit_compound_operator_memory_coefficient() const;
  void set_multi_armed_bandit_compound_operator_memory_coefficient(double value);

  private:
  double _internal_multi_armed_bandit_compound_operator_memory_coefficient() const;
  void _internal_set_multi_armed_bandit_compound_operator_memory_coefficient(double value);

  public:
  // double multi_armed_bandit_compound_operator_exploration_coefficient = 43;
  void clear_multi_armed_bandit_compound_operator_exploration_coefficient() ;
  double multi_armed_bandit_compound_operator_exploration_coefficient() const;
  void set_multi_armed_bandit_compound_operator_exploration_coefficient(double value);

  private:
  double _internal_multi_armed_bandit_compound_operator_exploration_coefficient() const;
  void _internal_set_multi_armed_bandit_compound_operator_exploration_coefficient(double value);

  public:
  // int32 cheapest_insertion_first_solution_min_neighbors = 44;
  void clear_cheapest_insertion_first_solution_min_neighbors() ;
  ::int32_t cheapest_insertion_first_solution_min_neighbors() const;
  void set_cheapest_insertion_first_solution_min_neighbors(::int32_t value);

  private:
  ::int32_t _internal_cheapest_insertion_first_solution_min_neighbors() const;
  void _internal_set_cheapest_insertion_first_solution_min_neighbors(::int32_t value);

  public:
  // int32 cheapest_insertion_ls_operator_min_neighbors = 45;
  void clear_cheapest_insertion_ls_operator_min_neighbors() ;
  ::int32_t cheapest_insertion_ls_operator_min_neighbors() const;
  void set_cheapest_insertion_ls_operator_min_neighbors(::int32_t value);

  private:
  ::int32_t _internal_cheapest_insertion_ls_operator_min_neighbors() const;
  void _internal_set_cheapest_insertion_ls_operator_min_neighbors(::int32_t value);

  public:
  // .operations_research.OptionalBoolean use_generalized_cp_sat = 47;
  void clear_use_generalized_cp_sat() ;
  ::operations_research::OptionalBoolean use_generalized_cp_sat() const;
  void set_use_generalized_cp_sat(::operations_research::OptionalBoolean value);

  private:
  ::operations_research::OptionalBoolean _internal_use_generalized_cp_sat() const;
  void _internal_set_use_generalized_cp_sat(::operations_research::OptionalBoolean value);

  public:
  // .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy = 49;
  void clear_local_cheapest_insertion_pickup_delivery_strategy() ;
  ::operations_research::RoutingSearchParameters_PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy() const;
  void set_local_cheapest_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value);

  private:
  ::operations_research::RoutingSearchParameters_PairInsertionStrategy _internal_local_cheapest_insertion_pickup_delivery_strategy() const;
  void _internal_set_local_cheapest_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value);

  public:
  // double ls_operator_neighbors_ratio = 53;
  void clear_ls_operator_neighbors_ratio() ;
  double ls_operator_neighbors_ratio() const;
  void set_ls_operator_neighbors_ratio(double value);

  private:
  double _internal_ls_operator_neighbors_ratio() const;
  void _internal_set_ls_operator_neighbors_ratio(double value);

  public:
  // int32 fallback_to_cp_sat_size_threshold = 52;
  void clear_fallback_to_cp_sat_size_threshold() ;
  ::int32_t fallback_to_cp_sat_size_threshold() const;
  void set_fallback_to_cp_sat_size_threshold(::int32_t value);

  private:
  ::int32_t _internal_fallback_to_cp_sat_size_threshold() const;
  void _internal_set_fallback_to_cp_sat_size_threshold(::int32_t value);

  public:
  // int32 ls_operator_min_neighbors = 54;
  void clear_ls_operator_min_neighbors() ;
  ::int32_t ls_operator_min_neighbors() const;
  void set_ls_operator_min_neighbors(::int32_t value);

  private:
  ::int32_t _internal_ls_operator_min_neighbors() const;
  void _internal_set_ls_operator_min_neighbors(::int32_t value);

  public:
  // double secondary_ls_time_limit_ratio = 57;
  void clear_secondary_ls_time_limit_ratio() ;
  double secondary_ls_time_limit_ratio() const;
  void set_secondary_ls_time_limit_ratio(double value);

  private:
  double _internal_secondary_ls_time_limit_ratio() const;
  void _internal_set_secondary_ls_time_limit_ratio(double value);

  public:
  // .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_cost_insertion_pickup_delivery_strategy = 55;
  void clear_local_cheapest_cost_insertion_pickup_delivery_strategy() ;
  ::operations_research::RoutingSearchParameters_PairInsertionStrategy local_cheapest_cost_insertion_pickup_delivery_strategy() const;
  void set_local_cheapest_cost_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value);

  private:
  ::operations_research::RoutingSearchParameters_PairInsertionStrategy _internal_local_cheapest_cost_insertion_pickup_delivery_strategy() const;
  void _internal_set_local_cheapest_cost_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.RoutingSearchParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 51, 5,
      107, 9>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr log_tag_;
    ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* local_search_operators_;
    ::google::protobuf::Duration* time_limit_;
    ::google::protobuf::Duration* lns_time_limit_;
    ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* improvement_limit_parameters_;
    ::operations_research::sat::SatParameters* sat_parameters_;
    int first_solution_strategy_;
    int local_search_metaheuristic_;
    double guided_local_search_lambda_coefficient_;
    double optimization_step_;
    ::int64_t solution_limit_;
    double savings_neighbors_ratio_;
    bool log_search_;
    ::int32_t number_of_solutions_to_collect_;
    double cheapest_insertion_farthest_seeds_ratio_;
    double savings_arc_coefficient_;
    ::int32_t relocate_expensive_chain_num_arcs_to_consider_;
    bool use_unfiltered_first_solution_strategy_;
    bool savings_add_reverse_arcs_;
    bool savings_parallel_routes_;
    bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_;
    double cheapest_insertion_first_solution_neighbors_ratio_;
    double log_cost_scaling_factor_;
    double savings_max_memory_usage_bytes_;
    int use_cp_sat_;
    int use_cp_;
    double log_cost_offset_;
    double cheapest_insertion_ls_operator_neighbors_ratio_;
    bool use_depth_first_search_;
    bool report_intermediate_cp_sat_solutions_;
    bool disable_scheduling_beware_this_may_degrade_performance_;
    bool use_full_propagation_;
    ::int32_t heuristic_expensive_chain_lns_num_arcs_to_consider_;
    int continuous_scheduling_solver_;
    int mixed_integer_scheduling_solver_;
    ::int32_t heuristic_close_nodes_lns_num_nodes_;
    bool cheapest_insertion_add_unperformed_entries_;
    bool christofides_use_minimum_matching_;
    bool use_multi_armed_bandit_concatenate_operators_;
    bool guided_local_search_reset_penalties_on_new_best_solution_;
    double multi_armed_bandit_compound_operator_memory_coefficient_;
    double multi_armed_bandit_compound_operator_exploration_coefficient_;
    ::int32_t cheapest_insertion_first_solution_min_neighbors_;
    ::int32_t cheapest_insertion_ls_operator_min_neighbors_;
    int use_generalized_cp_sat_;
    int local_cheapest_insertion_pickup_delivery_strategy_;
    double ls_operator_neighbors_ratio_;
    ::int32_t fallback_to_cp_sat_size_threshold_;
    ::int32_t ls_operator_min_neighbors_;
    double secondary_ls_time_limit_ratio_;
    int local_cheapest_cost_insertion_pickup_delivery_strategy_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
};// -------------------------------------------------------------------

class RoutingModelParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.RoutingModelParameters) */ {
 public:
  inline RoutingModelParameters() : RoutingModelParameters(nullptr) {}
  ~RoutingModelParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RoutingModelParameters(::google::protobuf::internal::ConstantInitialized);

  inline RoutingModelParameters(const RoutingModelParameters& from)
      : RoutingModelParameters(nullptr, from) {}
  RoutingModelParameters(RoutingModelParameters&& from) noexcept
    : RoutingModelParameters() {
    *this = ::std::move(from);
  }

  inline RoutingModelParameters& operator=(const RoutingModelParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingModelParameters& operator=(RoutingModelParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingModelParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingModelParameters* internal_default_instance() {
    return reinterpret_cast<const RoutingModelParameters*>(
               &_RoutingModelParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoutingModelParameters& a, RoutingModelParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingModelParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingModelParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingModelParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingModelParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RoutingModelParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RoutingModelParameters& from) {
    RoutingModelParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RoutingModelParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.RoutingModelParameters";
  }
  protected:
  explicit RoutingModelParameters(::google::protobuf::Arena* arena);
  RoutingModelParameters(::google::protobuf::Arena* arena, const RoutingModelParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSolverParametersFieldNumber = 1,
    kReduceVehicleCostModelFieldNumber = 2,
    kMaxCallbackCacheSizeFieldNumber = 3,
  };
  // .operations_research.ConstraintSolverParameters solver_parameters = 1;
  bool has_solver_parameters() const;
  void clear_solver_parameters() ;
  const ::operations_research::ConstraintSolverParameters& solver_parameters() const;
  PROTOBUF_NODISCARD ::operations_research::ConstraintSolverParameters* release_solver_parameters();
  ::operations_research::ConstraintSolverParameters* mutable_solver_parameters();
  void set_allocated_solver_parameters(::operations_research::ConstraintSolverParameters* value);
  void unsafe_arena_set_allocated_solver_parameters(::operations_research::ConstraintSolverParameters* value);
  ::operations_research::ConstraintSolverParameters* unsafe_arena_release_solver_parameters();

  private:
  const ::operations_research::ConstraintSolverParameters& _internal_solver_parameters() const;
  ::operations_research::ConstraintSolverParameters* _internal_mutable_solver_parameters();

  public:
  // bool reduce_vehicle_cost_model = 2;
  void clear_reduce_vehicle_cost_model() ;
  bool reduce_vehicle_cost_model() const;
  void set_reduce_vehicle_cost_model(bool value);

  private:
  bool _internal_reduce_vehicle_cost_model() const;
  void _internal_set_reduce_vehicle_cost_model(bool value);

  public:
  // int32 max_callback_cache_size = 3;
  void clear_max_callback_cache_size() ;
  ::int32_t max_callback_cache_size() const;
  void set_max_callback_cache_size(::int32_t value);

  private:
  ::int32_t _internal_max_callback_cache_size() const;
  void _internal_set_max_callback_cache_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.RoutingModelParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::operations_research::ConstraintSolverParameters* solver_parameters_;
    bool reduce_vehicle_cost_model_;
    ::int32_t max_callback_cache_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// RoutingSearchParameters_LocalSearchNeighborhoodOperators

// .operations_research.OptionalBoolean use_relocate = 1;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate)
  return _internal_use_relocate();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_ = value;
}

// .operations_research.OptionalBoolean use_relocate_pair = 2;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_pair() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_pair_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_pair() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_pair)
  return _internal_use_relocate_pair();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_pair(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_pair(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_pair)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_pair() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_pair_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_pair(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_pair_ = value;
}

// .operations_research.OptionalBoolean use_light_relocate_pair = 24;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_light_relocate_pair() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_light_relocate_pair_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_light_relocate_pair() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_light_relocate_pair)
  return _internal_use_light_relocate_pair();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_light_relocate_pair(::operations_research::OptionalBoolean value) {
  _internal_set_use_light_relocate_pair(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_light_relocate_pair)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_light_relocate_pair() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_light_relocate_pair_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_light_relocate_pair(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_light_relocate_pair_ = value;
}

// .operations_research.OptionalBoolean use_relocate_neighbors = 3;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_neighbors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_neighbors_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_neighbors() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_neighbors)
  return _internal_use_relocate_neighbors();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_neighbors(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_neighbors(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_neighbors)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_neighbors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_neighbors_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_neighbors(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_neighbors_ = value;
}

// .operations_research.OptionalBoolean use_relocate_subtrip = 25;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_subtrip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_subtrip_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_subtrip() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_subtrip)
  return _internal_use_relocate_subtrip();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_subtrip(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_subtrip(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_subtrip)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_subtrip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_subtrip_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_subtrip(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_subtrip_ = value;
}

// .operations_research.OptionalBoolean use_exchange = 4;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_exchange_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_exchange() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange)
  return _internal_use_exchange();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_exchange(::operations_research::OptionalBoolean value) {
  _internal_set_use_exchange(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_exchange_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_exchange(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_exchange_ = value;
}

// .operations_research.OptionalBoolean use_exchange_pair = 22;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_exchange_pair() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_exchange_pair_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_exchange_pair() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_pair)
  return _internal_use_exchange_pair();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_exchange_pair(::operations_research::OptionalBoolean value) {
  _internal_set_use_exchange_pair(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_pair)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_exchange_pair() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_exchange_pair_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_exchange_pair(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_exchange_pair_ = value;
}

// .operations_research.OptionalBoolean use_exchange_subtrip = 26;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_exchange_subtrip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_exchange_subtrip_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_exchange_subtrip() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_subtrip)
  return _internal_use_exchange_subtrip();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_exchange_subtrip(::operations_research::OptionalBoolean value) {
  _internal_set_use_exchange_subtrip(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_exchange_subtrip)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_exchange_subtrip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_exchange_subtrip_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_exchange_subtrip(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_exchange_subtrip_ = value;
}

// .operations_research.OptionalBoolean use_cross = 5;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_cross() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_cross_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_cross() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross)
  return _internal_use_cross();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_cross(::operations_research::OptionalBoolean value) {
  _internal_set_use_cross(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_cross() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_cross_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_cross(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_cross_ = value;
}

// .operations_research.OptionalBoolean use_cross_exchange = 6;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_cross_exchange() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_cross_exchange_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_cross_exchange() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross_exchange)
  return _internal_use_cross_exchange();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_cross_exchange(::operations_research::OptionalBoolean value) {
  _internal_set_use_cross_exchange(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_cross_exchange)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_cross_exchange() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_cross_exchange_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_cross_exchange(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_cross_exchange_ = value;
}

// .operations_research.OptionalBoolean use_relocate_expensive_chain = 23;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_expensive_chain() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_expensive_chain_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_expensive_chain() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_expensive_chain)
  return _internal_use_relocate_expensive_chain();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_expensive_chain(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_expensive_chain(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_expensive_chain)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_expensive_chain() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_expensive_chain_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_expensive_chain(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_expensive_chain_ = value;
}

// .operations_research.OptionalBoolean use_two_opt = 7;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_two_opt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_two_opt_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_two_opt() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_two_opt)
  return _internal_use_two_opt();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_two_opt(::operations_research::OptionalBoolean value) {
  _internal_set_use_two_opt(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_two_opt)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_two_opt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_two_opt_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_two_opt(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_two_opt_ = value;
}

// .operations_research.OptionalBoolean use_or_opt = 8;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_or_opt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_or_opt_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_or_opt() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_or_opt)
  return _internal_use_or_opt();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_or_opt(::operations_research::OptionalBoolean value) {
  _internal_set_use_or_opt(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_or_opt)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_or_opt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_or_opt_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_or_opt(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_or_opt_ = value;
}

// .operations_research.OptionalBoolean use_lin_kernighan = 9;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_lin_kernighan() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_lin_kernighan_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_lin_kernighan() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_lin_kernighan)
  return _internal_use_lin_kernighan();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_lin_kernighan(::operations_research::OptionalBoolean value) {
  _internal_set_use_lin_kernighan(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_lin_kernighan)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_lin_kernighan() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_lin_kernighan_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_lin_kernighan(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_lin_kernighan_ = value;
}

// .operations_research.OptionalBoolean use_tsp_opt = 10;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_tsp_opt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_tsp_opt_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_tsp_opt() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_opt)
  return _internal_use_tsp_opt();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_tsp_opt(::operations_research::OptionalBoolean value) {
  _internal_set_use_tsp_opt(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_opt)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_tsp_opt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_tsp_opt_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_tsp_opt(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_tsp_opt_ = value;
}

// .operations_research.OptionalBoolean use_make_active = 11;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_make_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_make_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_make_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_active)
  return _internal_use_make_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_make_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_make_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_make_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_make_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_make_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_make_active_ = value;
}

// .operations_research.OptionalBoolean use_relocate_and_make_active = 21;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_and_make_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_and_make_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_and_make_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_and_make_active)
  return _internal_use_relocate_and_make_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_and_make_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_and_make_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_and_make_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_and_make_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_and_make_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_and_make_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_and_make_active_ = value;
}

// .operations_research.OptionalBoolean use_make_inactive = 12;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_make_inactive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_make_inactive_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_make_inactive() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_inactive)
  return _internal_use_make_inactive();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_make_inactive(::operations_research::OptionalBoolean value) {
  _internal_set_use_make_inactive(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_inactive)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_make_inactive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_make_inactive_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_make_inactive(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_make_inactive_ = value;
}

// .operations_research.OptionalBoolean use_make_chain_inactive = 13;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_make_chain_inactive() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_make_chain_inactive_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_make_chain_inactive() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_chain_inactive)
  return _internal_use_make_chain_inactive();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_make_chain_inactive(::operations_research::OptionalBoolean value) {
  _internal_set_use_make_chain_inactive(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_make_chain_inactive)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_make_chain_inactive() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_make_chain_inactive_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_make_chain_inactive(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_make_chain_inactive_ = value;
}

// .operations_research.OptionalBoolean use_swap_active = 14;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_swap_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_swap_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_swap_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_swap_active)
  return _internal_use_swap_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_swap_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_swap_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_swap_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_swap_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_swap_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_swap_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_swap_active_ = value;
}

// .operations_research.OptionalBoolean use_extended_swap_active = 15;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_extended_swap_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_extended_swap_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_extended_swap_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_extended_swap_active)
  return _internal_use_extended_swap_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_extended_swap_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_extended_swap_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_extended_swap_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_extended_swap_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_extended_swap_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_extended_swap_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_extended_swap_active_ = value;
}

// .operations_research.OptionalBoolean use_shortest_path_swap_active = 34;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_shortest_path_swap_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_shortest_path_swap_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_shortest_path_swap_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_shortest_path_swap_active)
  return _internal_use_shortest_path_swap_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_shortest_path_swap_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_shortest_path_swap_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_shortest_path_swap_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_shortest_path_swap_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_shortest_path_swap_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_shortest_path_swap_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_shortest_path_swap_active_ = value;
}

// .operations_research.OptionalBoolean use_node_pair_swap_active = 20;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_node_pair_swap_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_node_pair_swap_active_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_node_pair_swap_active() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_node_pair_swap_active)
  return _internal_use_node_pair_swap_active();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_node_pair_swap_active(::operations_research::OptionalBoolean value) {
  _internal_set_use_node_pair_swap_active(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_node_pair_swap_active)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_node_pair_swap_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_node_pair_swap_active_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_node_pair_swap_active(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_node_pair_swap_active_ = value;
}

// .operations_research.OptionalBoolean use_path_lns = 16;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_path_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_path_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_path_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_path_lns)
  return _internal_use_path_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_path_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_path_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_path_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_path_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_path_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_path_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_path_lns_ = value;
}

// .operations_research.OptionalBoolean use_full_path_lns = 17;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_full_path_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_full_path_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_full_path_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_full_path_lns)
  return _internal_use_full_path_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_full_path_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_full_path_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_full_path_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_full_path_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_full_path_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_full_path_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_full_path_lns_ = value;
}

// .operations_research.OptionalBoolean use_tsp_lns = 18;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_tsp_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_tsp_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_tsp_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_lns)
  return _internal_use_tsp_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_tsp_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_tsp_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_tsp_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_tsp_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_tsp_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_tsp_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_tsp_lns_ = value;
}

// .operations_research.OptionalBoolean use_inactive_lns = 19;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_inactive_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_inactive_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_inactive_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_inactive_lns)
  return _internal_use_inactive_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_inactive_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_inactive_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_inactive_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_inactive_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_inactive_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_inactive_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_inactive_lns_ = value;
}

// .operations_research.OptionalBoolean use_global_cheapest_insertion_path_lns = 27;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_global_cheapest_insertion_path_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_global_cheapest_insertion_path_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_global_cheapest_insertion_path_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_path_lns)
  return _internal_use_global_cheapest_insertion_path_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_global_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_global_cheapest_insertion_path_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_path_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_global_cheapest_insertion_path_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_global_cheapest_insertion_path_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_global_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_global_cheapest_insertion_path_lns_ = value;
}

// .operations_research.OptionalBoolean use_local_cheapest_insertion_path_lns = 28;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_local_cheapest_insertion_path_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_local_cheapest_insertion_path_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_local_cheapest_insertion_path_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_path_lns)
  return _internal_use_local_cheapest_insertion_path_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_local_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_local_cheapest_insertion_path_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_path_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_local_cheapest_insertion_path_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_local_cheapest_insertion_path_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_local_cheapest_insertion_path_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_local_cheapest_insertion_path_lns_ = value;
}

// .operations_research.OptionalBoolean use_relocate_path_global_cheapest_insertion_insert_unperformed = 33;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_relocate_path_global_cheapest_insertion_insert_unperformed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_relocate_path_global_cheapest_insertion_insert_unperformed() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_path_global_cheapest_insertion_insert_unperformed)
  return _internal_use_relocate_path_global_cheapest_insertion_insert_unperformed();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_relocate_path_global_cheapest_insertion_insert_unperformed(::operations_research::OptionalBoolean value) {
  _internal_set_use_relocate_path_global_cheapest_insertion_insert_unperformed(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_relocate_path_global_cheapest_insertion_insert_unperformed)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_relocate_path_global_cheapest_insertion_insert_unperformed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_relocate_path_global_cheapest_insertion_insert_unperformed(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_relocate_path_global_cheapest_insertion_insert_unperformed_ = value;
}

// .operations_research.OptionalBoolean use_global_cheapest_insertion_expensive_chain_lns = 29;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_global_cheapest_insertion_expensive_chain_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_global_cheapest_insertion_expensive_chain_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_global_cheapest_insertion_expensive_chain_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_expensive_chain_lns)
  return _internal_use_global_cheapest_insertion_expensive_chain_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_global_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_global_cheapest_insertion_expensive_chain_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_expensive_chain_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_global_cheapest_insertion_expensive_chain_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_global_cheapest_insertion_expensive_chain_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_global_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_global_cheapest_insertion_expensive_chain_lns_ = value;
}

// .operations_research.OptionalBoolean use_local_cheapest_insertion_expensive_chain_lns = 30;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_local_cheapest_insertion_expensive_chain_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_local_cheapest_insertion_expensive_chain_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_local_cheapest_insertion_expensive_chain_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_expensive_chain_lns)
  return _internal_use_local_cheapest_insertion_expensive_chain_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_local_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_local_cheapest_insertion_expensive_chain_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_expensive_chain_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_local_cheapest_insertion_expensive_chain_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_local_cheapest_insertion_expensive_chain_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_local_cheapest_insertion_expensive_chain_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_local_cheapest_insertion_expensive_chain_lns_ = value;
}

// .operations_research.OptionalBoolean use_global_cheapest_insertion_close_nodes_lns = 31;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_global_cheapest_insertion_close_nodes_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_global_cheapest_insertion_close_nodes_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_global_cheapest_insertion_close_nodes_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_close_nodes_lns)
  return _internal_use_global_cheapest_insertion_close_nodes_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_global_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_global_cheapest_insertion_close_nodes_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_global_cheapest_insertion_close_nodes_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_global_cheapest_insertion_close_nodes_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_global_cheapest_insertion_close_nodes_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_global_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_global_cheapest_insertion_close_nodes_lns_ = value;
}

// .operations_research.OptionalBoolean use_local_cheapest_insertion_close_nodes_lns = 32;
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::clear_use_local_cheapest_insertion_close_nodes_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_local_cheapest_insertion_close_nodes_lns_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::use_local_cheapest_insertion_close_nodes_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_close_nodes_lns)
  return _internal_use_local_cheapest_insertion_close_nodes_lns();
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::set_use_local_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value) {
  _internal_set_use_local_cheapest_insertion_close_nodes_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators.use_local_cheapest_insertion_close_nodes_lns)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_use_local_cheapest_insertion_close_nodes_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_local_cheapest_insertion_close_nodes_lns_);
}
inline void RoutingSearchParameters_LocalSearchNeighborhoodOperators::_internal_set_use_local_cheapest_insertion_close_nodes_lns(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_local_cheapest_insertion_close_nodes_lns_ = value;
}

// -------------------------------------------------------------------

// RoutingSearchParameters_ImprovementSearchLimitParameters

// double improvement_rate_coefficient = 38;
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::clear_improvement_rate_coefficient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.improvement_rate_coefficient_ = 0;
}
inline double RoutingSearchParameters_ImprovementSearchLimitParameters::improvement_rate_coefficient() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters.improvement_rate_coefficient)
  return _internal_improvement_rate_coefficient();
}
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::set_improvement_rate_coefficient(double value) {
  _internal_set_improvement_rate_coefficient(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters.improvement_rate_coefficient)
}
inline double RoutingSearchParameters_ImprovementSearchLimitParameters::_internal_improvement_rate_coefficient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.improvement_rate_coefficient_;
}
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::_internal_set_improvement_rate_coefficient(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.improvement_rate_coefficient_ = value;
}

// int32 improvement_rate_solutions_distance = 39;
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::clear_improvement_rate_solutions_distance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.improvement_rate_solutions_distance_ = 0;
}
inline ::int32_t RoutingSearchParameters_ImprovementSearchLimitParameters::improvement_rate_solutions_distance() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters.improvement_rate_solutions_distance)
  return _internal_improvement_rate_solutions_distance();
}
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::set_improvement_rate_solutions_distance(::int32_t value) {
  _internal_set_improvement_rate_solutions_distance(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters.improvement_rate_solutions_distance)
}
inline ::int32_t RoutingSearchParameters_ImprovementSearchLimitParameters::_internal_improvement_rate_solutions_distance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.improvement_rate_solutions_distance_;
}
inline void RoutingSearchParameters_ImprovementSearchLimitParameters::_internal_set_improvement_rate_solutions_distance(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.improvement_rate_solutions_distance_ = value;
}

// -------------------------------------------------------------------

// RoutingSearchParameters

// .operations_research.FirstSolutionStrategy.Value first_solution_strategy = 1;
inline void RoutingSearchParameters::clear_first_solution_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.first_solution_strategy_ = 0;
}
inline ::operations_research::FirstSolutionStrategy_Value RoutingSearchParameters::first_solution_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.first_solution_strategy)
  return _internal_first_solution_strategy();
}
inline void RoutingSearchParameters::set_first_solution_strategy(::operations_research::FirstSolutionStrategy_Value value) {
  _internal_set_first_solution_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.first_solution_strategy)
}
inline ::operations_research::FirstSolutionStrategy_Value RoutingSearchParameters::_internal_first_solution_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::FirstSolutionStrategy_Value>(_impl_.first_solution_strategy_);
}
inline void RoutingSearchParameters::_internal_set_first_solution_strategy(::operations_research::FirstSolutionStrategy_Value value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.first_solution_strategy_ = value;
}

// bool use_unfiltered_first_solution_strategy = 2;
inline void RoutingSearchParameters::clear_use_unfiltered_first_solution_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_unfiltered_first_solution_strategy_ = false;
}
inline bool RoutingSearchParameters::use_unfiltered_first_solution_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_unfiltered_first_solution_strategy)
  return _internal_use_unfiltered_first_solution_strategy();
}
inline void RoutingSearchParameters::set_use_unfiltered_first_solution_strategy(bool value) {
  _internal_set_use_unfiltered_first_solution_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_unfiltered_first_solution_strategy)
}
inline bool RoutingSearchParameters::_internal_use_unfiltered_first_solution_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_unfiltered_first_solution_strategy_;
}
inline void RoutingSearchParameters::_internal_set_use_unfiltered_first_solution_strategy(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_unfiltered_first_solution_strategy_ = value;
}

// double savings_neighbors_ratio = 14;
inline void RoutingSearchParameters::clear_savings_neighbors_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.savings_neighbors_ratio_ = 0;
}
inline double RoutingSearchParameters::savings_neighbors_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.savings_neighbors_ratio)
  return _internal_savings_neighbors_ratio();
}
inline void RoutingSearchParameters::set_savings_neighbors_ratio(double value) {
  _internal_set_savings_neighbors_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.savings_neighbors_ratio)
}
inline double RoutingSearchParameters::_internal_savings_neighbors_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.savings_neighbors_ratio_;
}
inline void RoutingSearchParameters::_internal_set_savings_neighbors_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.savings_neighbors_ratio_ = value;
}

// double savings_max_memory_usage_bytes = 23;
inline void RoutingSearchParameters::clear_savings_max_memory_usage_bytes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.savings_max_memory_usage_bytes_ = 0;
}
inline double RoutingSearchParameters::savings_max_memory_usage_bytes() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.savings_max_memory_usage_bytes)
  return _internal_savings_max_memory_usage_bytes();
}
inline void RoutingSearchParameters::set_savings_max_memory_usage_bytes(double value) {
  _internal_set_savings_max_memory_usage_bytes(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.savings_max_memory_usage_bytes)
}
inline double RoutingSearchParameters::_internal_savings_max_memory_usage_bytes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.savings_max_memory_usage_bytes_;
}
inline void RoutingSearchParameters::_internal_set_savings_max_memory_usage_bytes(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.savings_max_memory_usage_bytes_ = value;
}

// bool savings_add_reverse_arcs = 15;
inline void RoutingSearchParameters::clear_savings_add_reverse_arcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.savings_add_reverse_arcs_ = false;
}
inline bool RoutingSearchParameters::savings_add_reverse_arcs() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.savings_add_reverse_arcs)
  return _internal_savings_add_reverse_arcs();
}
inline void RoutingSearchParameters::set_savings_add_reverse_arcs(bool value) {
  _internal_set_savings_add_reverse_arcs(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.savings_add_reverse_arcs)
}
inline bool RoutingSearchParameters::_internal_savings_add_reverse_arcs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.savings_add_reverse_arcs_;
}
inline void RoutingSearchParameters::_internal_set_savings_add_reverse_arcs(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.savings_add_reverse_arcs_ = value;
}

// double savings_arc_coefficient = 18;
inline void RoutingSearchParameters::clear_savings_arc_coefficient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.savings_arc_coefficient_ = 0;
}
inline double RoutingSearchParameters::savings_arc_coefficient() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.savings_arc_coefficient)
  return _internal_savings_arc_coefficient();
}
inline void RoutingSearchParameters::set_savings_arc_coefficient(double value) {
  _internal_set_savings_arc_coefficient(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.savings_arc_coefficient)
}
inline double RoutingSearchParameters::_internal_savings_arc_coefficient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.savings_arc_coefficient_;
}
inline void RoutingSearchParameters::_internal_set_savings_arc_coefficient(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.savings_arc_coefficient_ = value;
}

// bool savings_parallel_routes = 19;
inline void RoutingSearchParameters::clear_savings_parallel_routes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.savings_parallel_routes_ = false;
}
inline bool RoutingSearchParameters::savings_parallel_routes() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.savings_parallel_routes)
  return _internal_savings_parallel_routes();
}
inline void RoutingSearchParameters::set_savings_parallel_routes(bool value) {
  _internal_set_savings_parallel_routes(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.savings_parallel_routes)
}
inline bool RoutingSearchParameters::_internal_savings_parallel_routes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.savings_parallel_routes_;
}
inline void RoutingSearchParameters::_internal_set_savings_parallel_routes(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.savings_parallel_routes_ = value;
}

// double cheapest_insertion_farthest_seeds_ratio = 16;
inline void RoutingSearchParameters::clear_cheapest_insertion_farthest_seeds_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_farthest_seeds_ratio_ = 0;
}
inline double RoutingSearchParameters::cheapest_insertion_farthest_seeds_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_farthest_seeds_ratio)
  return _internal_cheapest_insertion_farthest_seeds_ratio();
}
inline void RoutingSearchParameters::set_cheapest_insertion_farthest_seeds_ratio(double value) {
  _internal_set_cheapest_insertion_farthest_seeds_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_farthest_seeds_ratio)
}
inline double RoutingSearchParameters::_internal_cheapest_insertion_farthest_seeds_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_farthest_seeds_ratio_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_farthest_seeds_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_farthest_seeds_ratio_ = value;
}

// double cheapest_insertion_first_solution_neighbors_ratio = 21;
inline void RoutingSearchParameters::clear_cheapest_insertion_first_solution_neighbors_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_first_solution_neighbors_ratio_ = 0;
}
inline double RoutingSearchParameters::cheapest_insertion_first_solution_neighbors_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_neighbors_ratio)
  return _internal_cheapest_insertion_first_solution_neighbors_ratio();
}
inline void RoutingSearchParameters::set_cheapest_insertion_first_solution_neighbors_ratio(double value) {
  _internal_set_cheapest_insertion_first_solution_neighbors_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_neighbors_ratio)
}
inline double RoutingSearchParameters::_internal_cheapest_insertion_first_solution_neighbors_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_first_solution_neighbors_ratio_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_first_solution_neighbors_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_first_solution_neighbors_ratio_ = value;
}

// int32 cheapest_insertion_first_solution_min_neighbors = 44;
inline void RoutingSearchParameters::clear_cheapest_insertion_first_solution_min_neighbors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_first_solution_min_neighbors_ = 0;
}
inline ::int32_t RoutingSearchParameters::cheapest_insertion_first_solution_min_neighbors() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_min_neighbors)
  return _internal_cheapest_insertion_first_solution_min_neighbors();
}
inline void RoutingSearchParameters::set_cheapest_insertion_first_solution_min_neighbors(::int32_t value) {
  _internal_set_cheapest_insertion_first_solution_min_neighbors(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_min_neighbors)
}
inline ::int32_t RoutingSearchParameters::_internal_cheapest_insertion_first_solution_min_neighbors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_first_solution_min_neighbors_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_first_solution_min_neighbors(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_first_solution_min_neighbors_ = value;
}

// double cheapest_insertion_ls_operator_neighbors_ratio = 31;
inline void RoutingSearchParameters::clear_cheapest_insertion_ls_operator_neighbors_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_ls_operator_neighbors_ratio_ = 0;
}
inline double RoutingSearchParameters::cheapest_insertion_ls_operator_neighbors_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_ls_operator_neighbors_ratio)
  return _internal_cheapest_insertion_ls_operator_neighbors_ratio();
}
inline void RoutingSearchParameters::set_cheapest_insertion_ls_operator_neighbors_ratio(double value) {
  _internal_set_cheapest_insertion_ls_operator_neighbors_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_ls_operator_neighbors_ratio)
}
inline double RoutingSearchParameters::_internal_cheapest_insertion_ls_operator_neighbors_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_ls_operator_neighbors_ratio_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_ls_operator_neighbors_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_ls_operator_neighbors_ratio_ = value;
}

// int32 cheapest_insertion_ls_operator_min_neighbors = 45;
inline void RoutingSearchParameters::clear_cheapest_insertion_ls_operator_min_neighbors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_ls_operator_min_neighbors_ = 0;
}
inline ::int32_t RoutingSearchParameters::cheapest_insertion_ls_operator_min_neighbors() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_ls_operator_min_neighbors)
  return _internal_cheapest_insertion_ls_operator_min_neighbors();
}
inline void RoutingSearchParameters::set_cheapest_insertion_ls_operator_min_neighbors(::int32_t value) {
  _internal_set_cheapest_insertion_ls_operator_min_neighbors(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_ls_operator_min_neighbors)
}
inline ::int32_t RoutingSearchParameters::_internal_cheapest_insertion_ls_operator_min_neighbors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_ls_operator_min_neighbors_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_ls_operator_min_neighbors(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_ls_operator_min_neighbors_ = value;
}

// bool cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization = 46;
inline void RoutingSearchParameters::clear_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_ = false;
}
inline bool RoutingSearchParameters::cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization)
  return _internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization();
}
inline void RoutingSearchParameters::set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(bool value) {
  _internal_set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization)
}
inline bool RoutingSearchParameters::_internal_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_first_solution_use_neighbors_ratio_for_initialization_ = value;
}

// bool cheapest_insertion_add_unperformed_entries = 40;
inline void RoutingSearchParameters::clear_cheapest_insertion_add_unperformed_entries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cheapest_insertion_add_unperformed_entries_ = false;
}
inline bool RoutingSearchParameters::cheapest_insertion_add_unperformed_entries() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.cheapest_insertion_add_unperformed_entries)
  return _internal_cheapest_insertion_add_unperformed_entries();
}
inline void RoutingSearchParameters::set_cheapest_insertion_add_unperformed_entries(bool value) {
  _internal_set_cheapest_insertion_add_unperformed_entries(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.cheapest_insertion_add_unperformed_entries)
}
inline bool RoutingSearchParameters::_internal_cheapest_insertion_add_unperformed_entries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cheapest_insertion_add_unperformed_entries_;
}
inline void RoutingSearchParameters::_internal_set_cheapest_insertion_add_unperformed_entries(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cheapest_insertion_add_unperformed_entries_ = value;
}

// .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_insertion_pickup_delivery_strategy = 49;
inline void RoutingSearchParameters::clear_local_cheapest_insertion_pickup_delivery_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_cheapest_insertion_pickup_delivery_strategy_ = 0;
}
inline ::operations_research::RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::local_cheapest_insertion_pickup_delivery_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.local_cheapest_insertion_pickup_delivery_strategy)
  return _internal_local_cheapest_insertion_pickup_delivery_strategy();
}
inline void RoutingSearchParameters::set_local_cheapest_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value) {
  _internal_set_local_cheapest_insertion_pickup_delivery_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.local_cheapest_insertion_pickup_delivery_strategy)
}
inline ::operations_research::RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::_internal_local_cheapest_insertion_pickup_delivery_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::RoutingSearchParameters_PairInsertionStrategy>(_impl_.local_cheapest_insertion_pickup_delivery_strategy_);
}
inline void RoutingSearchParameters::_internal_set_local_cheapest_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_cheapest_insertion_pickup_delivery_strategy_ = value;
}

// .operations_research.RoutingSearchParameters.PairInsertionStrategy local_cheapest_cost_insertion_pickup_delivery_strategy = 55;
inline void RoutingSearchParameters::clear_local_cheapest_cost_insertion_pickup_delivery_strategy() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_cheapest_cost_insertion_pickup_delivery_strategy_ = 0;
}
inline ::operations_research::RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::local_cheapest_cost_insertion_pickup_delivery_strategy() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.local_cheapest_cost_insertion_pickup_delivery_strategy)
  return _internal_local_cheapest_cost_insertion_pickup_delivery_strategy();
}
inline void RoutingSearchParameters::set_local_cheapest_cost_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value) {
  _internal_set_local_cheapest_cost_insertion_pickup_delivery_strategy(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.local_cheapest_cost_insertion_pickup_delivery_strategy)
}
inline ::operations_research::RoutingSearchParameters_PairInsertionStrategy RoutingSearchParameters::_internal_local_cheapest_cost_insertion_pickup_delivery_strategy() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::RoutingSearchParameters_PairInsertionStrategy>(_impl_.local_cheapest_cost_insertion_pickup_delivery_strategy_);
}
inline void RoutingSearchParameters::_internal_set_local_cheapest_cost_insertion_pickup_delivery_strategy(::operations_research::RoutingSearchParameters_PairInsertionStrategy value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_cheapest_cost_insertion_pickup_delivery_strategy_ = value;
}

// bool christofides_use_minimum_matching = 30;
inline void RoutingSearchParameters::clear_christofides_use_minimum_matching() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.christofides_use_minimum_matching_ = false;
}
inline bool RoutingSearchParameters::christofides_use_minimum_matching() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.christofides_use_minimum_matching)
  return _internal_christofides_use_minimum_matching();
}
inline void RoutingSearchParameters::set_christofides_use_minimum_matching(bool value) {
  _internal_set_christofides_use_minimum_matching(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.christofides_use_minimum_matching)
}
inline bool RoutingSearchParameters::_internal_christofides_use_minimum_matching() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.christofides_use_minimum_matching_;
}
inline void RoutingSearchParameters::_internal_set_christofides_use_minimum_matching(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.christofides_use_minimum_matching_ = value;
}

// .operations_research.RoutingSearchParameters.LocalSearchNeighborhoodOperators local_search_operators = 3;
inline bool RoutingSearchParameters::has_local_search_operators() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.local_search_operators_ != nullptr);
  return value;
}
inline void RoutingSearchParameters::clear_local_search_operators() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.local_search_operators_ != nullptr) _impl_.local_search_operators_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& RoutingSearchParameters::_internal_local_search_operators() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* p = _impl_.local_search_operators_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators&>(::operations_research::_RoutingSearchParameters_LocalSearchNeighborhoodOperators_default_instance_);
}
inline const ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators& RoutingSearchParameters::local_search_operators() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.local_search_operators)
  return _internal_local_search_operators();
}
inline void RoutingSearchParameters::unsafe_arena_set_allocated_local_search_operators(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.local_search_operators_);
  }
  _impl_.local_search_operators_ = reinterpret_cast<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingSearchParameters.local_search_operators)
}
inline ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* RoutingSearchParameters::release_local_search_operators() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* released = _impl_.local_search_operators_;
  _impl_.local_search_operators_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* RoutingSearchParameters::unsafe_arena_release_local_search_operators() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.local_search_operators)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* temp = _impl_.local_search_operators_;
  _impl_.local_search_operators_ = nullptr;
  return temp;
}
inline ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* RoutingSearchParameters::_internal_mutable_local_search_operators() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.local_search_operators_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators>(GetArena());
    _impl_.local_search_operators_ = reinterpret_cast<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(p);
  }
  return _impl_.local_search_operators_;
}
inline ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* RoutingSearchParameters::mutable_local_search_operators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* _msg = _internal_mutable_local_search_operators();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.local_search_operators)
  return _msg;
}
inline void RoutingSearchParameters::set_allocated_local_search_operators(::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(_impl_.local_search_operators_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.local_search_operators_ = reinterpret_cast<::operations_research::RoutingSearchParameters_LocalSearchNeighborhoodOperators*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.local_search_operators)
}

// double ls_operator_neighbors_ratio = 53;
inline void RoutingSearchParameters::clear_ls_operator_neighbors_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ls_operator_neighbors_ratio_ = 0;
}
inline double RoutingSearchParameters::ls_operator_neighbors_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.ls_operator_neighbors_ratio)
  return _internal_ls_operator_neighbors_ratio();
}
inline void RoutingSearchParameters::set_ls_operator_neighbors_ratio(double value) {
  _internal_set_ls_operator_neighbors_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.ls_operator_neighbors_ratio)
}
inline double RoutingSearchParameters::_internal_ls_operator_neighbors_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ls_operator_neighbors_ratio_;
}
inline void RoutingSearchParameters::_internal_set_ls_operator_neighbors_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ls_operator_neighbors_ratio_ = value;
}

// int32 ls_operator_min_neighbors = 54;
inline void RoutingSearchParameters::clear_ls_operator_min_neighbors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ls_operator_min_neighbors_ = 0;
}
inline ::int32_t RoutingSearchParameters::ls_operator_min_neighbors() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.ls_operator_min_neighbors)
  return _internal_ls_operator_min_neighbors();
}
inline void RoutingSearchParameters::set_ls_operator_min_neighbors(::int32_t value) {
  _internal_set_ls_operator_min_neighbors(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.ls_operator_min_neighbors)
}
inline ::int32_t RoutingSearchParameters::_internal_ls_operator_min_neighbors() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ls_operator_min_neighbors_;
}
inline void RoutingSearchParameters::_internal_set_ls_operator_min_neighbors(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ls_operator_min_neighbors_ = value;
}

// bool use_multi_armed_bandit_concatenate_operators = 41;
inline void RoutingSearchParameters::clear_use_multi_armed_bandit_concatenate_operators() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_multi_armed_bandit_concatenate_operators_ = false;
}
inline bool RoutingSearchParameters::use_multi_armed_bandit_concatenate_operators() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_multi_armed_bandit_concatenate_operators)
  return _internal_use_multi_armed_bandit_concatenate_operators();
}
inline void RoutingSearchParameters::set_use_multi_armed_bandit_concatenate_operators(bool value) {
  _internal_set_use_multi_armed_bandit_concatenate_operators(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_multi_armed_bandit_concatenate_operators)
}
inline bool RoutingSearchParameters::_internal_use_multi_armed_bandit_concatenate_operators() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_multi_armed_bandit_concatenate_operators_;
}
inline void RoutingSearchParameters::_internal_set_use_multi_armed_bandit_concatenate_operators(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_multi_armed_bandit_concatenate_operators_ = value;
}

// double multi_armed_bandit_compound_operator_memory_coefficient = 42;
inline void RoutingSearchParameters::clear_multi_armed_bandit_compound_operator_memory_coefficient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.multi_armed_bandit_compound_operator_memory_coefficient_ = 0;
}
inline double RoutingSearchParameters::multi_armed_bandit_compound_operator_memory_coefficient() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.multi_armed_bandit_compound_operator_memory_coefficient)
  return _internal_multi_armed_bandit_compound_operator_memory_coefficient();
}
inline void RoutingSearchParameters::set_multi_armed_bandit_compound_operator_memory_coefficient(double value) {
  _internal_set_multi_armed_bandit_compound_operator_memory_coefficient(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.multi_armed_bandit_compound_operator_memory_coefficient)
}
inline double RoutingSearchParameters::_internal_multi_armed_bandit_compound_operator_memory_coefficient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.multi_armed_bandit_compound_operator_memory_coefficient_;
}
inline void RoutingSearchParameters::_internal_set_multi_armed_bandit_compound_operator_memory_coefficient(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multi_armed_bandit_compound_operator_memory_coefficient_ = value;
}

// double multi_armed_bandit_compound_operator_exploration_coefficient = 43;
inline void RoutingSearchParameters::clear_multi_armed_bandit_compound_operator_exploration_coefficient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.multi_armed_bandit_compound_operator_exploration_coefficient_ = 0;
}
inline double RoutingSearchParameters::multi_armed_bandit_compound_operator_exploration_coefficient() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.multi_armed_bandit_compound_operator_exploration_coefficient)
  return _internal_multi_armed_bandit_compound_operator_exploration_coefficient();
}
inline void RoutingSearchParameters::set_multi_armed_bandit_compound_operator_exploration_coefficient(double value) {
  _internal_set_multi_armed_bandit_compound_operator_exploration_coefficient(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.multi_armed_bandit_compound_operator_exploration_coefficient)
}
inline double RoutingSearchParameters::_internal_multi_armed_bandit_compound_operator_exploration_coefficient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.multi_armed_bandit_compound_operator_exploration_coefficient_;
}
inline void RoutingSearchParameters::_internal_set_multi_armed_bandit_compound_operator_exploration_coefficient(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.multi_armed_bandit_compound_operator_exploration_coefficient_ = value;
}

// int32 relocate_expensive_chain_num_arcs_to_consider = 20;
inline void RoutingSearchParameters::clear_relocate_expensive_chain_num_arcs_to_consider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relocate_expensive_chain_num_arcs_to_consider_ = 0;
}
inline ::int32_t RoutingSearchParameters::relocate_expensive_chain_num_arcs_to_consider() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.relocate_expensive_chain_num_arcs_to_consider)
  return _internal_relocate_expensive_chain_num_arcs_to_consider();
}
inline void RoutingSearchParameters::set_relocate_expensive_chain_num_arcs_to_consider(::int32_t value) {
  _internal_set_relocate_expensive_chain_num_arcs_to_consider(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.relocate_expensive_chain_num_arcs_to_consider)
}
inline ::int32_t RoutingSearchParameters::_internal_relocate_expensive_chain_num_arcs_to_consider() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relocate_expensive_chain_num_arcs_to_consider_;
}
inline void RoutingSearchParameters::_internal_set_relocate_expensive_chain_num_arcs_to_consider(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relocate_expensive_chain_num_arcs_to_consider_ = value;
}

// int32 heuristic_expensive_chain_lns_num_arcs_to_consider = 32;
inline void RoutingSearchParameters::clear_heuristic_expensive_chain_lns_num_arcs_to_consider() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_ = 0;
}
inline ::int32_t RoutingSearchParameters::heuristic_expensive_chain_lns_num_arcs_to_consider() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.heuristic_expensive_chain_lns_num_arcs_to_consider)
  return _internal_heuristic_expensive_chain_lns_num_arcs_to_consider();
}
inline void RoutingSearchParameters::set_heuristic_expensive_chain_lns_num_arcs_to_consider(::int32_t value) {
  _internal_set_heuristic_expensive_chain_lns_num_arcs_to_consider(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.heuristic_expensive_chain_lns_num_arcs_to_consider)
}
inline ::int32_t RoutingSearchParameters::_internal_heuristic_expensive_chain_lns_num_arcs_to_consider() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_;
}
inline void RoutingSearchParameters::_internal_set_heuristic_expensive_chain_lns_num_arcs_to_consider(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.heuristic_expensive_chain_lns_num_arcs_to_consider_ = value;
}

// int32 heuristic_close_nodes_lns_num_nodes = 35;
inline void RoutingSearchParameters::clear_heuristic_close_nodes_lns_num_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heuristic_close_nodes_lns_num_nodes_ = 0;
}
inline ::int32_t RoutingSearchParameters::heuristic_close_nodes_lns_num_nodes() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.heuristic_close_nodes_lns_num_nodes)
  return _internal_heuristic_close_nodes_lns_num_nodes();
}
inline void RoutingSearchParameters::set_heuristic_close_nodes_lns_num_nodes(::int32_t value) {
  _internal_set_heuristic_close_nodes_lns_num_nodes(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.heuristic_close_nodes_lns_num_nodes)
}
inline ::int32_t RoutingSearchParameters::_internal_heuristic_close_nodes_lns_num_nodes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.heuristic_close_nodes_lns_num_nodes_;
}
inline void RoutingSearchParameters::_internal_set_heuristic_close_nodes_lns_num_nodes(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.heuristic_close_nodes_lns_num_nodes_ = value;
}

// .operations_research.LocalSearchMetaheuristic.Value local_search_metaheuristic = 4;
inline void RoutingSearchParameters::clear_local_search_metaheuristic() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.local_search_metaheuristic_ = 0;
}
inline ::operations_research::LocalSearchMetaheuristic_Value RoutingSearchParameters::local_search_metaheuristic() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.local_search_metaheuristic)
  return _internal_local_search_metaheuristic();
}
inline void RoutingSearchParameters::set_local_search_metaheuristic(::operations_research::LocalSearchMetaheuristic_Value value) {
  _internal_set_local_search_metaheuristic(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.local_search_metaheuristic)
}
inline ::operations_research::LocalSearchMetaheuristic_Value RoutingSearchParameters::_internal_local_search_metaheuristic() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::LocalSearchMetaheuristic_Value>(_impl_.local_search_metaheuristic_);
}
inline void RoutingSearchParameters::_internal_set_local_search_metaheuristic(::operations_research::LocalSearchMetaheuristic_Value value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.local_search_metaheuristic_ = value;
}

// double guided_local_search_lambda_coefficient = 5;
inline void RoutingSearchParameters::clear_guided_local_search_lambda_coefficient() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guided_local_search_lambda_coefficient_ = 0;
}
inline double RoutingSearchParameters::guided_local_search_lambda_coefficient() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.guided_local_search_lambda_coefficient)
  return _internal_guided_local_search_lambda_coefficient();
}
inline void RoutingSearchParameters::set_guided_local_search_lambda_coefficient(double value) {
  _internal_set_guided_local_search_lambda_coefficient(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.guided_local_search_lambda_coefficient)
}
inline double RoutingSearchParameters::_internal_guided_local_search_lambda_coefficient() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guided_local_search_lambda_coefficient_;
}
inline void RoutingSearchParameters::_internal_set_guided_local_search_lambda_coefficient(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.guided_local_search_lambda_coefficient_ = value;
}

// bool guided_local_search_reset_penalties_on_new_best_solution = 51;
inline void RoutingSearchParameters::clear_guided_local_search_reset_penalties_on_new_best_solution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guided_local_search_reset_penalties_on_new_best_solution_ = false;
}
inline bool RoutingSearchParameters::guided_local_search_reset_penalties_on_new_best_solution() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.guided_local_search_reset_penalties_on_new_best_solution)
  return _internal_guided_local_search_reset_penalties_on_new_best_solution();
}
inline void RoutingSearchParameters::set_guided_local_search_reset_penalties_on_new_best_solution(bool value) {
  _internal_set_guided_local_search_reset_penalties_on_new_best_solution(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.guided_local_search_reset_penalties_on_new_best_solution)
}
inline bool RoutingSearchParameters::_internal_guided_local_search_reset_penalties_on_new_best_solution() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guided_local_search_reset_penalties_on_new_best_solution_;
}
inline void RoutingSearchParameters::_internal_set_guided_local_search_reset_penalties_on_new_best_solution(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.guided_local_search_reset_penalties_on_new_best_solution_ = value;
}

// bool use_depth_first_search = 6;
inline void RoutingSearchParameters::clear_use_depth_first_search() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_depth_first_search_ = false;
}
inline bool RoutingSearchParameters::use_depth_first_search() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_depth_first_search)
  return _internal_use_depth_first_search();
}
inline void RoutingSearchParameters::set_use_depth_first_search(bool value) {
  _internal_set_use_depth_first_search(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_depth_first_search)
}
inline bool RoutingSearchParameters::_internal_use_depth_first_search() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_depth_first_search_;
}
inline void RoutingSearchParameters::_internal_set_use_depth_first_search(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_depth_first_search_ = value;
}

// .operations_research.OptionalBoolean use_cp = 28;
inline void RoutingSearchParameters::clear_use_cp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_cp_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::use_cp() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_cp)
  return _internal_use_cp();
}
inline void RoutingSearchParameters::set_use_cp(::operations_research::OptionalBoolean value) {
  _internal_set_use_cp(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_cp)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::_internal_use_cp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_cp_);
}
inline void RoutingSearchParameters::_internal_set_use_cp(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_cp_ = value;
}

// .operations_research.OptionalBoolean use_cp_sat = 27;
inline void RoutingSearchParameters::clear_use_cp_sat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_cp_sat_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::use_cp_sat() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_cp_sat)
  return _internal_use_cp_sat();
}
inline void RoutingSearchParameters::set_use_cp_sat(::operations_research::OptionalBoolean value) {
  _internal_set_use_cp_sat(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_cp_sat)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::_internal_use_cp_sat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_cp_sat_);
}
inline void RoutingSearchParameters::_internal_set_use_cp_sat(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_cp_sat_ = value;
}

// .operations_research.OptionalBoolean use_generalized_cp_sat = 47;
inline void RoutingSearchParameters::clear_use_generalized_cp_sat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_generalized_cp_sat_ = 0;
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::use_generalized_cp_sat() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_generalized_cp_sat)
  return _internal_use_generalized_cp_sat();
}
inline void RoutingSearchParameters::set_use_generalized_cp_sat(::operations_research::OptionalBoolean value) {
  _internal_set_use_generalized_cp_sat(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_generalized_cp_sat)
}
inline ::operations_research::OptionalBoolean RoutingSearchParameters::_internal_use_generalized_cp_sat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::OptionalBoolean>(_impl_.use_generalized_cp_sat_);
}
inline void RoutingSearchParameters::_internal_set_use_generalized_cp_sat(::operations_research::OptionalBoolean value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_generalized_cp_sat_ = value;
}

// .operations_research.sat.SatParameters sat_parameters = 48;
inline bool RoutingSearchParameters::has_sat_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sat_parameters_ != nullptr);
  return value;
}
inline const ::operations_research::sat::SatParameters& RoutingSearchParameters::_internal_sat_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::SatParameters* p = _impl_.sat_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::SatParameters&>(::operations_research::sat::_SatParameters_default_instance_);
}
inline const ::operations_research::sat::SatParameters& RoutingSearchParameters::sat_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.sat_parameters)
  return _internal_sat_parameters();
}
inline void RoutingSearchParameters::unsafe_arena_set_allocated_sat_parameters(::operations_research::sat::SatParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sat_parameters_);
  }
  _impl_.sat_parameters_ = reinterpret_cast<::operations_research::sat::SatParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingSearchParameters.sat_parameters)
}
inline ::operations_research::sat::SatParameters* RoutingSearchParameters::release_sat_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::sat::SatParameters* released = _impl_.sat_parameters_;
  _impl_.sat_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::SatParameters* RoutingSearchParameters::unsafe_arena_release_sat_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.sat_parameters)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::sat::SatParameters* temp = _impl_.sat_parameters_;
  _impl_.sat_parameters_ = nullptr;
  return temp;
}
inline ::operations_research::sat::SatParameters* RoutingSearchParameters::_internal_mutable_sat_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.sat_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::SatParameters>(GetArena());
    _impl_.sat_parameters_ = reinterpret_cast<::operations_research::sat::SatParameters*>(p);
  }
  return _impl_.sat_parameters_;
}
inline ::operations_research::sat::SatParameters* RoutingSearchParameters::mutable_sat_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::SatParameters* _msg = _internal_mutable_sat_parameters();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.sat_parameters)
  return _msg;
}
inline void RoutingSearchParameters::set_allocated_sat_parameters(::operations_research::sat::SatParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sat_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.sat_parameters_ = reinterpret_cast<::operations_research::sat::SatParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.sat_parameters)
}

// bool report_intermediate_cp_sat_solutions = 56;
inline void RoutingSearchParameters::clear_report_intermediate_cp_sat_solutions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.report_intermediate_cp_sat_solutions_ = false;
}
inline bool RoutingSearchParameters::report_intermediate_cp_sat_solutions() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.report_intermediate_cp_sat_solutions)
  return _internal_report_intermediate_cp_sat_solutions();
}
inline void RoutingSearchParameters::set_report_intermediate_cp_sat_solutions(bool value) {
  _internal_set_report_intermediate_cp_sat_solutions(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.report_intermediate_cp_sat_solutions)
}
inline bool RoutingSearchParameters::_internal_report_intermediate_cp_sat_solutions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.report_intermediate_cp_sat_solutions_;
}
inline void RoutingSearchParameters::_internal_set_report_intermediate_cp_sat_solutions(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.report_intermediate_cp_sat_solutions_ = value;
}

// int32 fallback_to_cp_sat_size_threshold = 52;
inline void RoutingSearchParameters::clear_fallback_to_cp_sat_size_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.fallback_to_cp_sat_size_threshold_ = 0;
}
inline ::int32_t RoutingSearchParameters::fallback_to_cp_sat_size_threshold() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.fallback_to_cp_sat_size_threshold)
  return _internal_fallback_to_cp_sat_size_threshold();
}
inline void RoutingSearchParameters::set_fallback_to_cp_sat_size_threshold(::int32_t value) {
  _internal_set_fallback_to_cp_sat_size_threshold(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.fallback_to_cp_sat_size_threshold)
}
inline ::int32_t RoutingSearchParameters::_internal_fallback_to_cp_sat_size_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.fallback_to_cp_sat_size_threshold_;
}
inline void RoutingSearchParameters::_internal_set_fallback_to_cp_sat_size_threshold(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.fallback_to_cp_sat_size_threshold_ = value;
}

// .operations_research.RoutingSearchParameters.SchedulingSolver continuous_scheduling_solver = 33;
inline void RoutingSearchParameters::clear_continuous_scheduling_solver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.continuous_scheduling_solver_ = 0;
}
inline ::operations_research::RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::continuous_scheduling_solver() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.continuous_scheduling_solver)
  return _internal_continuous_scheduling_solver();
}
inline void RoutingSearchParameters::set_continuous_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value) {
  _internal_set_continuous_scheduling_solver(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.continuous_scheduling_solver)
}
inline ::operations_research::RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::_internal_continuous_scheduling_solver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(_impl_.continuous_scheduling_solver_);
}
inline void RoutingSearchParameters::_internal_set_continuous_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.continuous_scheduling_solver_ = value;
}

// .operations_research.RoutingSearchParameters.SchedulingSolver mixed_integer_scheduling_solver = 34;
inline void RoutingSearchParameters::clear_mixed_integer_scheduling_solver() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mixed_integer_scheduling_solver_ = 0;
}
inline ::operations_research::RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::mixed_integer_scheduling_solver() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.mixed_integer_scheduling_solver)
  return _internal_mixed_integer_scheduling_solver();
}
inline void RoutingSearchParameters::set_mixed_integer_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value) {
  _internal_set_mixed_integer_scheduling_solver(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.mixed_integer_scheduling_solver)
}
inline ::operations_research::RoutingSearchParameters_SchedulingSolver RoutingSearchParameters::_internal_mixed_integer_scheduling_solver() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::RoutingSearchParameters_SchedulingSolver>(_impl_.mixed_integer_scheduling_solver_);
}
inline void RoutingSearchParameters::_internal_set_mixed_integer_scheduling_solver(::operations_research::RoutingSearchParameters_SchedulingSolver value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mixed_integer_scheduling_solver_ = value;
}

// optional bool disable_scheduling_beware_this_may_degrade_performance = 50;
inline bool RoutingSearchParameters::has_disable_scheduling_beware_this_may_degrade_performance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void RoutingSearchParameters::clear_disable_scheduling_beware_this_may_degrade_performance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.disable_scheduling_beware_this_may_degrade_performance_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool RoutingSearchParameters::disable_scheduling_beware_this_may_degrade_performance() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.disable_scheduling_beware_this_may_degrade_performance)
  return _internal_disable_scheduling_beware_this_may_degrade_performance();
}
inline void RoutingSearchParameters::set_disable_scheduling_beware_this_may_degrade_performance(bool value) {
  _internal_set_disable_scheduling_beware_this_may_degrade_performance(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.disable_scheduling_beware_this_may_degrade_performance)
}
inline bool RoutingSearchParameters::_internal_disable_scheduling_beware_this_may_degrade_performance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.disable_scheduling_beware_this_may_degrade_performance_;
}
inline void RoutingSearchParameters::_internal_set_disable_scheduling_beware_this_may_degrade_performance(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.disable_scheduling_beware_this_may_degrade_performance_ = value;
}

// double optimization_step = 7;
inline void RoutingSearchParameters::clear_optimization_step() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.optimization_step_ = 0;
}
inline double RoutingSearchParameters::optimization_step() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.optimization_step)
  return _internal_optimization_step();
}
inline void RoutingSearchParameters::set_optimization_step(double value) {
  _internal_set_optimization_step(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.optimization_step)
}
inline double RoutingSearchParameters::_internal_optimization_step() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.optimization_step_;
}
inline void RoutingSearchParameters::_internal_set_optimization_step(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.optimization_step_ = value;
}

// int32 number_of_solutions_to_collect = 17;
inline void RoutingSearchParameters::clear_number_of_solutions_to_collect() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_of_solutions_to_collect_ = 0;
}
inline ::int32_t RoutingSearchParameters::number_of_solutions_to_collect() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.number_of_solutions_to_collect)
  return _internal_number_of_solutions_to_collect();
}
inline void RoutingSearchParameters::set_number_of_solutions_to_collect(::int32_t value) {
  _internal_set_number_of_solutions_to_collect(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.number_of_solutions_to_collect)
}
inline ::int32_t RoutingSearchParameters::_internal_number_of_solutions_to_collect() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_of_solutions_to_collect_;
}
inline void RoutingSearchParameters::_internal_set_number_of_solutions_to_collect(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.number_of_solutions_to_collect_ = value;
}

// int64 solution_limit = 8;
inline void RoutingSearchParameters::clear_solution_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_limit_ = ::int64_t{0};
}
inline ::int64_t RoutingSearchParameters::solution_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.solution_limit)
  return _internal_solution_limit();
}
inline void RoutingSearchParameters::set_solution_limit(::int64_t value) {
  _internal_set_solution_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.solution_limit)
}
inline ::int64_t RoutingSearchParameters::_internal_solution_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_limit_;
}
inline void RoutingSearchParameters::_internal_set_solution_limit(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.solution_limit_ = value;
}

// .google.protobuf.Duration time_limit = 9;
inline bool RoutingSearchParameters::has_time_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_limit_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& RoutingSearchParameters::_internal_time_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.time_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& RoutingSearchParameters::time_limit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.time_limit)
  return _internal_time_limit();
}
inline void RoutingSearchParameters::unsafe_arena_set_allocated_time_limit(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_limit_);
  }
  _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingSearchParameters.time_limit)
}
inline ::google::protobuf::Duration* RoutingSearchParameters::release_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* released = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::unsafe_arena_release_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.time_limit)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Duration* temp = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::_internal_mutable_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.time_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.time_limit_;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::mutable_time_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_time_limit();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.time_limit)
  return _msg;
}
inline void RoutingSearchParameters::set_allocated_time_limit(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_limit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.time_limit)
}

// .google.protobuf.Duration lns_time_limit = 10;
inline bool RoutingSearchParameters::has_lns_time_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lns_time_limit_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& RoutingSearchParameters::_internal_lns_time_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.lns_time_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& RoutingSearchParameters::lns_time_limit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.lns_time_limit)
  return _internal_lns_time_limit();
}
inline void RoutingSearchParameters::unsafe_arena_set_allocated_lns_time_limit(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lns_time_limit_);
  }
  _impl_.lns_time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingSearchParameters.lns_time_limit)
}
inline ::google::protobuf::Duration* RoutingSearchParameters::release_lns_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* released = _impl_.lns_time_limit_;
  _impl_.lns_time_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::unsafe_arena_release_lns_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.lns_time_limit)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Duration* temp = _impl_.lns_time_limit_;
  _impl_.lns_time_limit_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::_internal_mutable_lns_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.lns_time_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.lns_time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.lns_time_limit_;
}
inline ::google::protobuf::Duration* RoutingSearchParameters::mutable_lns_time_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_lns_time_limit();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.lns_time_limit)
  return _msg;
}
inline void RoutingSearchParameters::set_allocated_lns_time_limit(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lns_time_limit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.lns_time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.lns_time_limit)
}

// double secondary_ls_time_limit_ratio = 57;
inline void RoutingSearchParameters::clear_secondary_ls_time_limit_ratio() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.secondary_ls_time_limit_ratio_ = 0;
}
inline double RoutingSearchParameters::secondary_ls_time_limit_ratio() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.secondary_ls_time_limit_ratio)
  return _internal_secondary_ls_time_limit_ratio();
}
inline void RoutingSearchParameters::set_secondary_ls_time_limit_ratio(double value) {
  _internal_set_secondary_ls_time_limit_ratio(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.secondary_ls_time_limit_ratio)
}
inline double RoutingSearchParameters::_internal_secondary_ls_time_limit_ratio() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.secondary_ls_time_limit_ratio_;
}
inline void RoutingSearchParameters::_internal_set_secondary_ls_time_limit_ratio(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.secondary_ls_time_limit_ratio_ = value;
}

// .operations_research.RoutingSearchParameters.ImprovementSearchLimitParameters improvement_limit_parameters = 37;
inline bool RoutingSearchParameters::has_improvement_limit_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.improvement_limit_parameters_ != nullptr);
  return value;
}
inline void RoutingSearchParameters::clear_improvement_limit_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.improvement_limit_parameters_ != nullptr) _impl_.improvement_limit_parameters_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters& RoutingSearchParameters::_internal_improvement_limit_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* p = _impl_.improvement_limit_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters&>(::operations_research::_RoutingSearchParameters_ImprovementSearchLimitParameters_default_instance_);
}
inline const ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters& RoutingSearchParameters::improvement_limit_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.improvement_limit_parameters)
  return _internal_improvement_limit_parameters();
}
inline void RoutingSearchParameters::unsafe_arena_set_allocated_improvement_limit_parameters(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.improvement_limit_parameters_);
  }
  _impl_.improvement_limit_parameters_ = reinterpret_cast<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingSearchParameters.improvement_limit_parameters)
}
inline ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* RoutingSearchParameters::release_improvement_limit_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* released = _impl_.improvement_limit_parameters_;
  _impl_.improvement_limit_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* RoutingSearchParameters::unsafe_arena_release_improvement_limit_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.improvement_limit_parameters)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* temp = _impl_.improvement_limit_parameters_;
  _impl_.improvement_limit_parameters_ = nullptr;
  return temp;
}
inline ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* RoutingSearchParameters::_internal_mutable_improvement_limit_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.improvement_limit_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters>(GetArena());
    _impl_.improvement_limit_parameters_ = reinterpret_cast<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*>(p);
  }
  return _impl_.improvement_limit_parameters_;
}
inline ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* RoutingSearchParameters::mutable_improvement_limit_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* _msg = _internal_mutable_improvement_limit_parameters();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.improvement_limit_parameters)
  return _msg;
}
inline void RoutingSearchParameters::set_allocated_improvement_limit_parameters(::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*>(_impl_.improvement_limit_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.improvement_limit_parameters_ = reinterpret_cast<::operations_research::RoutingSearchParameters_ImprovementSearchLimitParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.improvement_limit_parameters)
}

// bool use_full_propagation = 11;
inline void RoutingSearchParameters::clear_use_full_propagation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_full_propagation_ = false;
}
inline bool RoutingSearchParameters::use_full_propagation() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.use_full_propagation)
  return _internal_use_full_propagation();
}
inline void RoutingSearchParameters::set_use_full_propagation(bool value) {
  _internal_set_use_full_propagation(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.use_full_propagation)
}
inline bool RoutingSearchParameters::_internal_use_full_propagation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_full_propagation_;
}
inline void RoutingSearchParameters::_internal_set_use_full_propagation(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.use_full_propagation_ = value;
}

// bool log_search = 13;
inline void RoutingSearchParameters::clear_log_search() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_search_ = false;
}
inline bool RoutingSearchParameters::log_search() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.log_search)
  return _internal_log_search();
}
inline void RoutingSearchParameters::set_log_search(bool value) {
  _internal_set_log_search(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.log_search)
}
inline bool RoutingSearchParameters::_internal_log_search() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_search_;
}
inline void RoutingSearchParameters::_internal_set_log_search(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_search_ = value;
}

// double log_cost_scaling_factor = 22;
inline void RoutingSearchParameters::clear_log_cost_scaling_factor() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_cost_scaling_factor_ = 0;
}
inline double RoutingSearchParameters::log_cost_scaling_factor() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.log_cost_scaling_factor)
  return _internal_log_cost_scaling_factor();
}
inline void RoutingSearchParameters::set_log_cost_scaling_factor(double value) {
  _internal_set_log_cost_scaling_factor(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.log_cost_scaling_factor)
}
inline double RoutingSearchParameters::_internal_log_cost_scaling_factor() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_cost_scaling_factor_;
}
inline void RoutingSearchParameters::_internal_set_log_cost_scaling_factor(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_cost_scaling_factor_ = value;
}

// double log_cost_offset = 29;
inline void RoutingSearchParameters::clear_log_cost_offset() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_cost_offset_ = 0;
}
inline double RoutingSearchParameters::log_cost_offset() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.log_cost_offset)
  return _internal_log_cost_offset();
}
inline void RoutingSearchParameters::set_log_cost_offset(double value) {
  _internal_set_log_cost_offset(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.log_cost_offset)
}
inline double RoutingSearchParameters::_internal_log_cost_offset() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_cost_offset_;
}
inline void RoutingSearchParameters::_internal_set_log_cost_offset(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_cost_offset_ = value;
}

// string log_tag = 36;
inline void RoutingSearchParameters::clear_log_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_tag_.ClearToEmpty();
}
inline const std::string& RoutingSearchParameters::log_tag() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingSearchParameters.log_tag)
  return _internal_log_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RoutingSearchParameters::set_log_tag(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_tag_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.RoutingSearchParameters.log_tag)
}
inline std::string* RoutingSearchParameters::mutable_log_tag() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_log_tag();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingSearchParameters.log_tag)
  return _s;
}
inline const std::string& RoutingSearchParameters::_internal_log_tag() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_tag_.Get();
}
inline void RoutingSearchParameters::_internal_set_log_tag(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.log_tag_.Set(value, GetArena());
}
inline std::string* RoutingSearchParameters::_internal_mutable_log_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.log_tag_.Mutable( GetArena());
}
inline std::string* RoutingSearchParameters::release_log_tag() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingSearchParameters.log_tag)
  return _impl_.log_tag_.Release();
}
inline void RoutingSearchParameters::set_allocated_log_tag(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_tag_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.log_tag_.IsDefault()) {
          _impl_.log_tag_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingSearchParameters.log_tag)
}

// -------------------------------------------------------------------

// RoutingModelParameters

// .operations_research.ConstraintSolverParameters solver_parameters = 1;
inline bool RoutingModelParameters::has_solver_parameters() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.solver_parameters_ != nullptr);
  return value;
}
inline const ::operations_research::ConstraintSolverParameters& RoutingModelParameters::_internal_solver_parameters() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::ConstraintSolverParameters* p = _impl_.solver_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::ConstraintSolverParameters&>(::operations_research::_ConstraintSolverParameters_default_instance_);
}
inline const ::operations_research::ConstraintSolverParameters& RoutingModelParameters::solver_parameters() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.RoutingModelParameters.solver_parameters)
  return _internal_solver_parameters();
}
inline void RoutingModelParameters::unsafe_arena_set_allocated_solver_parameters(::operations_research::ConstraintSolverParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solver_parameters_);
  }
  _impl_.solver_parameters_ = reinterpret_cast<::operations_research::ConstraintSolverParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.RoutingModelParameters.solver_parameters)
}
inline ::operations_research::ConstraintSolverParameters* RoutingModelParameters::release_solver_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::ConstraintSolverParameters* released = _impl_.solver_parameters_;
  _impl_.solver_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::ConstraintSolverParameters* RoutingModelParameters::unsafe_arena_release_solver_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.RoutingModelParameters.solver_parameters)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::ConstraintSolverParameters* temp = _impl_.solver_parameters_;
  _impl_.solver_parameters_ = nullptr;
  return temp;
}
inline ::operations_research::ConstraintSolverParameters* RoutingModelParameters::_internal_mutable_solver_parameters() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.solver_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::ConstraintSolverParameters>(GetArena());
    _impl_.solver_parameters_ = reinterpret_cast<::operations_research::ConstraintSolverParameters*>(p);
  }
  return _impl_.solver_parameters_;
}
inline ::operations_research::ConstraintSolverParameters* RoutingModelParameters::mutable_solver_parameters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::ConstraintSolverParameters* _msg = _internal_mutable_solver_parameters();
  // @@protoc_insertion_point(field_mutable:operations_research.RoutingModelParameters.solver_parameters)
  return _msg;
}
inline void RoutingModelParameters::set_allocated_solver_parameters(::operations_research::ConstraintSolverParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.solver_parameters_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.solver_parameters_ = reinterpret_cast<::operations_research::ConstraintSolverParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.RoutingModelParameters.solver_parameters)
}

// bool reduce_vehicle_cost_model = 2;
inline void RoutingModelParameters::clear_reduce_vehicle_cost_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.reduce_vehicle_cost_model_ = false;
}
inline bool RoutingModelParameters::reduce_vehicle_cost_model() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingModelParameters.reduce_vehicle_cost_model)
  return _internal_reduce_vehicle_cost_model();
}
inline void RoutingModelParameters::set_reduce_vehicle_cost_model(bool value) {
  _internal_set_reduce_vehicle_cost_model(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingModelParameters.reduce_vehicle_cost_model)
}
inline bool RoutingModelParameters::_internal_reduce_vehicle_cost_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.reduce_vehicle_cost_model_;
}
inline void RoutingModelParameters::_internal_set_reduce_vehicle_cost_model(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.reduce_vehicle_cost_model_ = value;
}

// int32 max_callback_cache_size = 3;
inline void RoutingModelParameters::clear_max_callback_cache_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_callback_cache_size_ = 0;
}
inline ::int32_t RoutingModelParameters::max_callback_cache_size() const {
  // @@protoc_insertion_point(field_get:operations_research.RoutingModelParameters.max_callback_cache_size)
  return _internal_max_callback_cache_size();
}
inline void RoutingModelParameters::set_max_callback_cache_size(::int32_t value) {
  _internal_set_max_callback_cache_size(value);
  // @@protoc_insertion_point(field_set:operations_research.RoutingModelParameters.max_callback_cache_size)
}
inline ::int32_t RoutingModelParameters::_internal_max_callback_cache_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_callback_cache_size_;
}
inline void RoutingModelParameters::_internal_set_max_callback_cache_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_callback_cache_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::RoutingSearchParameters_PairInsertionStrategy> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::RoutingSearchParameters_PairInsertionStrategy>() {
  return ::operations_research::RoutingSearchParameters_PairInsertionStrategy_descriptor();
}
template <>
struct is_proto_enum<::operations_research::RoutingSearchParameters_SchedulingSolver> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::RoutingSearchParameters_SchedulingSolver>() {
  return ::operations_research::RoutingSearchParameters_SchedulingSolver_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fparameters_2eproto_2epb_2eh
