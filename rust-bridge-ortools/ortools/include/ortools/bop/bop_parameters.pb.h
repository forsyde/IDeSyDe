// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/bop/bop_parameters.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fbop_2fbop_5fparameters_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fbop_2fbop_5fparameters_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fbop_2fbop_5fparameters_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fbop_2fbop_5fparameters_2eproto;
namespace operations_research {
namespace bop {
class BopOptimizerMethod;
struct BopOptimizerMethodDefaultTypeInternal;
extern BopOptimizerMethodDefaultTypeInternal _BopOptimizerMethod_default_instance_;
class BopParameters;
struct BopParametersDefaultTypeInternal;
extern BopParametersDefaultTypeInternal _BopParameters_default_instance_;
class BopSolverOptimizerSet;
struct BopSolverOptimizerSetDefaultTypeInternal;
extern BopSolverOptimizerSetDefaultTypeInternal _BopSolverOptimizerSet_default_instance_;
}  // namespace bop
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace bop {
enum BopOptimizerMethod_OptimizerType : int {
  BopOptimizerMethod_OptimizerType_SAT_CORE_BASED = 0,
  BopOptimizerMethod_OptimizerType_SAT_LINEAR_SEARCH = 15,
  BopOptimizerMethod_OptimizerType_LINEAR_RELAXATION = 1,
  BopOptimizerMethod_OptimizerType_LOCAL_SEARCH = 2,
  BopOptimizerMethod_OptimizerType_RANDOM_FIRST_SOLUTION = 3,
  BopOptimizerMethod_OptimizerType_RANDOM_CONSTRAINT_LNS = 4,
  BopOptimizerMethod_OptimizerType_RANDOM_VARIABLE_LNS = 5,
  BopOptimizerMethod_OptimizerType_COMPLETE_LNS = 7,
  BopOptimizerMethod_OptimizerType_LP_FIRST_SOLUTION = 8,
  BopOptimizerMethod_OptimizerType_OBJECTIVE_FIRST_SOLUTION = 9,
  BopOptimizerMethod_OptimizerType_USER_GUIDED_FIRST_SOLUTION = 14,
  BopOptimizerMethod_OptimizerType_RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP = 11,
  BopOptimizerMethod_OptimizerType_RANDOM_VARIABLE_LNS_GUIDED_BY_LP = 12,
  BopOptimizerMethod_OptimizerType_RELATION_GRAPH_LNS = 16,
  BopOptimizerMethod_OptimizerType_RELATION_GRAPH_LNS_GUIDED_BY_LP = 17,
};

bool BopOptimizerMethod_OptimizerType_IsValid(int value);
extern const uint32_t BopOptimizerMethod_OptimizerType_internal_data_[];
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod_OptimizerType_OptimizerType_MIN = static_cast<BopOptimizerMethod_OptimizerType>(0);
constexpr BopOptimizerMethod_OptimizerType BopOptimizerMethod_OptimizerType_OptimizerType_MAX = static_cast<BopOptimizerMethod_OptimizerType>(17);
constexpr int BopOptimizerMethod_OptimizerType_OptimizerType_ARRAYSIZE = 17 + 1;
const ::google::protobuf::EnumDescriptor*
BopOptimizerMethod_OptimizerType_descriptor();
template <typename T>
const std::string& BopOptimizerMethod_OptimizerType_Name(T value) {
  static_assert(std::is_same<T, BopOptimizerMethod_OptimizerType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OptimizerType_Name().");
  return BopOptimizerMethod_OptimizerType_Name(static_cast<BopOptimizerMethod_OptimizerType>(value));
}
template <>
inline const std::string& BopOptimizerMethod_OptimizerType_Name(BopOptimizerMethod_OptimizerType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BopOptimizerMethod_OptimizerType_descriptor,
                                                 0, 17>(
      static_cast<int>(value));
}
inline bool BopOptimizerMethod_OptimizerType_Parse(absl::string_view name, BopOptimizerMethod_OptimizerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BopOptimizerMethod_OptimizerType>(
      BopOptimizerMethod_OptimizerType_descriptor(), name, value);
}
enum BopParameters_ThreadSynchronizationType : int {
  BopParameters_ThreadSynchronizationType_NO_SYNCHRONIZATION = 0,
  BopParameters_ThreadSynchronizationType_SYNCHRONIZE_ALL = 1,
  BopParameters_ThreadSynchronizationType_SYNCHRONIZE_ON_RIGHT = 2,
};

bool BopParameters_ThreadSynchronizationType_IsValid(int value);
extern const uint32_t BopParameters_ThreadSynchronizationType_internal_data_[];
constexpr BopParameters_ThreadSynchronizationType BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_MIN = static_cast<BopParameters_ThreadSynchronizationType>(0);
constexpr BopParameters_ThreadSynchronizationType BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_MAX = static_cast<BopParameters_ThreadSynchronizationType>(2);
constexpr int BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
BopParameters_ThreadSynchronizationType_descriptor();
template <typename T>
const std::string& BopParameters_ThreadSynchronizationType_Name(T value) {
  static_assert(std::is_same<T, BopParameters_ThreadSynchronizationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ThreadSynchronizationType_Name().");
  return BopParameters_ThreadSynchronizationType_Name(static_cast<BopParameters_ThreadSynchronizationType>(value));
}
template <>
inline const std::string& BopParameters_ThreadSynchronizationType_Name(BopParameters_ThreadSynchronizationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<BopParameters_ThreadSynchronizationType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool BopParameters_ThreadSynchronizationType_Parse(absl::string_view name, BopParameters_ThreadSynchronizationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BopParameters_ThreadSynchronizationType>(
      BopParameters_ThreadSynchronizationType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class BopOptimizerMethod final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.bop.BopOptimizerMethod) */ {
 public:
  inline BopOptimizerMethod() : BopOptimizerMethod(nullptr) {}
  ~BopOptimizerMethod() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BopOptimizerMethod(::google::protobuf::internal::ConstantInitialized);

  inline BopOptimizerMethod(const BopOptimizerMethod& from)
      : BopOptimizerMethod(nullptr, from) {}
  BopOptimizerMethod(BopOptimizerMethod&& from) noexcept
    : BopOptimizerMethod() {
    *this = ::std::move(from);
  }

  inline BopOptimizerMethod& operator=(const BopOptimizerMethod& from) {
    CopyFrom(from);
    return *this;
  }
  inline BopOptimizerMethod& operator=(BopOptimizerMethod&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BopOptimizerMethod& default_instance() {
    return *internal_default_instance();
  }
  static inline const BopOptimizerMethod* internal_default_instance() {
    return reinterpret_cast<const BopOptimizerMethod*>(
               &_BopOptimizerMethod_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BopOptimizerMethod& a, BopOptimizerMethod& b) {
    a.Swap(&b);
  }
  inline void Swap(BopOptimizerMethod* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BopOptimizerMethod* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BopOptimizerMethod* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BopOptimizerMethod>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BopOptimizerMethod& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BopOptimizerMethod& from) {
    BopOptimizerMethod::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BopOptimizerMethod* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.bop.BopOptimizerMethod";
  }
  protected:
  explicit BopOptimizerMethod(::google::protobuf::Arena* arena);
  BopOptimizerMethod(::google::protobuf::Arena* arena, const BopOptimizerMethod& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using OptimizerType = BopOptimizerMethod_OptimizerType;
  static constexpr OptimizerType SAT_CORE_BASED = BopOptimizerMethod_OptimizerType_SAT_CORE_BASED;
  static constexpr OptimizerType SAT_LINEAR_SEARCH = BopOptimizerMethod_OptimizerType_SAT_LINEAR_SEARCH;
  static constexpr OptimizerType LINEAR_RELAXATION = BopOptimizerMethod_OptimizerType_LINEAR_RELAXATION;
  static constexpr OptimizerType LOCAL_SEARCH = BopOptimizerMethod_OptimizerType_LOCAL_SEARCH;
  static constexpr OptimizerType RANDOM_FIRST_SOLUTION = BopOptimizerMethod_OptimizerType_RANDOM_FIRST_SOLUTION;
  static constexpr OptimizerType RANDOM_CONSTRAINT_LNS = BopOptimizerMethod_OptimizerType_RANDOM_CONSTRAINT_LNS;
  static constexpr OptimizerType RANDOM_VARIABLE_LNS = BopOptimizerMethod_OptimizerType_RANDOM_VARIABLE_LNS;
  static constexpr OptimizerType COMPLETE_LNS = BopOptimizerMethod_OptimizerType_COMPLETE_LNS;
  static constexpr OptimizerType LP_FIRST_SOLUTION = BopOptimizerMethod_OptimizerType_LP_FIRST_SOLUTION;
  static constexpr OptimizerType OBJECTIVE_FIRST_SOLUTION = BopOptimizerMethod_OptimizerType_OBJECTIVE_FIRST_SOLUTION;
  static constexpr OptimizerType USER_GUIDED_FIRST_SOLUTION = BopOptimizerMethod_OptimizerType_USER_GUIDED_FIRST_SOLUTION;
  static constexpr OptimizerType RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP = BopOptimizerMethod_OptimizerType_RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP;
  static constexpr OptimizerType RANDOM_VARIABLE_LNS_GUIDED_BY_LP = BopOptimizerMethod_OptimizerType_RANDOM_VARIABLE_LNS_GUIDED_BY_LP;
  static constexpr OptimizerType RELATION_GRAPH_LNS = BopOptimizerMethod_OptimizerType_RELATION_GRAPH_LNS;
  static constexpr OptimizerType RELATION_GRAPH_LNS_GUIDED_BY_LP = BopOptimizerMethod_OptimizerType_RELATION_GRAPH_LNS_GUIDED_BY_LP;
  static inline bool OptimizerType_IsValid(int value) {
    return BopOptimizerMethod_OptimizerType_IsValid(value);
  }
  static constexpr OptimizerType OptimizerType_MIN = BopOptimizerMethod_OptimizerType_OptimizerType_MIN;
  static constexpr OptimizerType OptimizerType_MAX = BopOptimizerMethod_OptimizerType_OptimizerType_MAX;
  static constexpr int OptimizerType_ARRAYSIZE = BopOptimizerMethod_OptimizerType_OptimizerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OptimizerType_descriptor() {
    return BopOptimizerMethod_OptimizerType_descriptor();
  }
  template <typename T>
  static inline const std::string& OptimizerType_Name(T value) {
    return BopOptimizerMethod_OptimizerType_Name(value);
  }
  static inline bool OptimizerType_Parse(absl::string_view name, OptimizerType* value) {
    return BopOptimizerMethod_OptimizerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::operations_research::bop::BopOptimizerMethod_OptimizerType type() const;
  void set_type(::operations_research::bop::BopOptimizerMethod_OptimizerType value);

  private:
  ::operations_research::bop::BopOptimizerMethod_OptimizerType _internal_type() const;
  void _internal_set_type(::operations_research::bop::BopOptimizerMethod_OptimizerType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.bop.BopOptimizerMethod)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto;
};// -------------------------------------------------------------------

class BopSolverOptimizerSet final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.bop.BopSolverOptimizerSet) */ {
 public:
  inline BopSolverOptimizerSet() : BopSolverOptimizerSet(nullptr) {}
  ~BopSolverOptimizerSet() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BopSolverOptimizerSet(::google::protobuf::internal::ConstantInitialized);

  inline BopSolverOptimizerSet(const BopSolverOptimizerSet& from)
      : BopSolverOptimizerSet(nullptr, from) {}
  BopSolverOptimizerSet(BopSolverOptimizerSet&& from) noexcept
    : BopSolverOptimizerSet() {
    *this = ::std::move(from);
  }

  inline BopSolverOptimizerSet& operator=(const BopSolverOptimizerSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline BopSolverOptimizerSet& operator=(BopSolverOptimizerSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BopSolverOptimizerSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const BopSolverOptimizerSet* internal_default_instance() {
    return reinterpret_cast<const BopSolverOptimizerSet*>(
               &_BopSolverOptimizerSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BopSolverOptimizerSet& a, BopSolverOptimizerSet& b) {
    a.Swap(&b);
  }
  inline void Swap(BopSolverOptimizerSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BopSolverOptimizerSet* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BopSolverOptimizerSet* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BopSolverOptimizerSet>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BopSolverOptimizerSet& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BopSolverOptimizerSet& from) {
    BopSolverOptimizerSet::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BopSolverOptimizerSet* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.bop.BopSolverOptimizerSet";
  }
  protected:
  explicit BopSolverOptimizerSet(::google::protobuf::Arena* arena);
  BopSolverOptimizerSet(::google::protobuf::Arena* arena, const BopSolverOptimizerSet& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMethodsFieldNumber = 1,
  };
  // repeated .operations_research.bop.BopOptimizerMethod methods = 1;
  int methods_size() const;
  private:
  int _internal_methods_size() const;

  public:
  void clear_methods() ;
  ::operations_research::bop::BopOptimizerMethod* mutable_methods(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopOptimizerMethod >*
      mutable_methods();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>& _internal_methods() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>* _internal_mutable_methods();
  public:
  const ::operations_research::bop::BopOptimizerMethod& methods(int index) const;
  ::operations_research::bop::BopOptimizerMethod* add_methods();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopOptimizerMethod >&
      methods() const;
  // @@protoc_insertion_point(class_scope:operations_research.bop.BopSolverOptimizerSet)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopOptimizerMethod > methods_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto;
};// -------------------------------------------------------------------

class BopParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.bop.BopParameters) */ {
 public:
  inline BopParameters() : BopParameters(nullptr) {}
  ~BopParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BopParameters(::google::protobuf::internal::ConstantInitialized);

  inline BopParameters(const BopParameters& from)
      : BopParameters(nullptr, from) {}
  BopParameters(BopParameters&& from) noexcept
    : BopParameters() {
    *this = ::std::move(from);
  }

  inline BopParameters& operator=(const BopParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline BopParameters& operator=(BopParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BopParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const BopParameters* internal_default_instance() {
    return reinterpret_cast<const BopParameters*>(
               &_BopParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BopParameters& a, BopParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(BopParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BopParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BopParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BopParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BopParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BopParameters& from) {
    BopParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BopParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.bop.BopParameters";
  }
  protected:
  explicit BopParameters(::google::protobuf::Arena* arena);
  BopParameters(::google::protobuf::Arena* arena, const BopParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ThreadSynchronizationType = BopParameters_ThreadSynchronizationType;
  static constexpr ThreadSynchronizationType NO_SYNCHRONIZATION = BopParameters_ThreadSynchronizationType_NO_SYNCHRONIZATION;
  static constexpr ThreadSynchronizationType SYNCHRONIZE_ALL = BopParameters_ThreadSynchronizationType_SYNCHRONIZE_ALL;
  static constexpr ThreadSynchronizationType SYNCHRONIZE_ON_RIGHT = BopParameters_ThreadSynchronizationType_SYNCHRONIZE_ON_RIGHT;
  static inline bool ThreadSynchronizationType_IsValid(int value) {
    return BopParameters_ThreadSynchronizationType_IsValid(value);
  }
  static constexpr ThreadSynchronizationType ThreadSynchronizationType_MIN = BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_MIN;
  static constexpr ThreadSynchronizationType ThreadSynchronizationType_MAX = BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_MAX;
  static constexpr int ThreadSynchronizationType_ARRAYSIZE = BopParameters_ThreadSynchronizationType_ThreadSynchronizationType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ThreadSynchronizationType_descriptor() {
    return BopParameters_ThreadSynchronizationType_descriptor();
  }
  template <typename T>
  static inline const std::string& ThreadSynchronizationType_Name(T value) {
    return BopParameters_ThreadSynchronizationType_Name(value);
  }
  static inline bool ThreadSynchronizationType_Parse(absl::string_view name, ThreadSynchronizationType* value) {
    return BopParameters_ThreadSynchronizationType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSolverOptimizerSetsFieldNumber = 26,
    kDefaultSolverOptimizerSetsFieldNumber = 33,
    kLogSearchProgressFieldNumber = 14,
    kPruneSearchTreeFieldNumber = 4,
    kSortConstraintsByNumTermsFieldNumber = 5,
    kUseSymmetryFieldNumber = 17,
    kSynchronizationTypeFieldNumber = 25,
    kMaxNumberOfConsecutiveFailingOptimizerCallsFieldNumber = 35,
    kExploitSymmetryInSatFirstSolutionFieldNumber = 40,
    kUsePotentialOneFlipRepairsInLsFieldNumber = 39,
    kUseLpStrongBranchingFieldNumber = 29,
    kDecomposedProblemMinTimeInSecondsFieldNumber = 36,
    kMaxLpSolveForFeasibilityProblemsFieldNumber = 41,
    kMaxTimeInSecondsFieldNumber = 1,
    kMaxNumDecisionsInLsFieldNumber = 2,
    kRandomSeedFieldNumber = 7,
    kNumRelaxedVarsFieldNumber = 8,
    kMaxNumberOfConflictsInRandomLnsFieldNumber = 9,
    kComputeEstimatedImpactFieldNumber = 3,
    kUseRandomLnsFieldNumber = 6,
    kUseLpLnsFieldNumber = 12,
    kUseSatToChooseLnsNeighbourhoodFieldNumber = 15,
    kNumRandomLnsTriesFieldNumber = 10,
    kMaxNumberOfBacktracksInLsFieldNumber = 11,
    kMaxNumberOfConflictsForQuickCheckFieldNumber = 16,
    kMaxNumberOfConflictsInRandomSolutionGenerationFieldNumber = 20,
    kMaxNumberOfExploredAssignmentsPerTryInLsFieldNumber = 21,
    kUseTranspositionTableInLsFieldNumber = 22,
    kUseLearnedBinaryClausesInLpFieldNumber = 23,
    kNumberOfSolversFieldNumber = 24,
    kMaxDeterministicTimeFieldNumber = 27,
    kRelativeGapLimitFieldNumber = 28,
    kDecomposerNumVariablesThresholdFieldNumber = 30,
    kNumBopSolversUsedByDecompositionFieldNumber = 31,
    kGuidedSatConflictsChunkFieldNumber = 34,
    kMaxNumBrokenConstraintsInLsFieldNumber = 38,
    kLpMaxDeterministicTimeFieldNumber = 37,
  };
  // repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
  int solver_optimizer_sets_size() const;
  private:
  int _internal_solver_optimizer_sets_size() const;

  public:
  void clear_solver_optimizer_sets() ;
  ::operations_research::bop::BopSolverOptimizerSet* mutable_solver_optimizer_sets(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopSolverOptimizerSet >*
      mutable_solver_optimizer_sets();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>& _internal_solver_optimizer_sets() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>* _internal_mutable_solver_optimizer_sets();
  public:
  const ::operations_research::bop::BopSolverOptimizerSet& solver_optimizer_sets(int index) const;
  ::operations_research::bop::BopSolverOptimizerSet* add_solver_optimizer_sets();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopSolverOptimizerSet >&
      solver_optimizer_sets() const;
  // optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
  bool has_default_solver_optimizer_sets() const;
  void clear_default_solver_optimizer_sets() ;
  const std::string& default_solver_optimizer_sets() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_default_solver_optimizer_sets(Arg_&& arg, Args_... args);
  std::string* mutable_default_solver_optimizer_sets();
  PROTOBUF_NODISCARD std::string* release_default_solver_optimizer_sets();
  void set_allocated_default_solver_optimizer_sets(std::string* value);

  private:
  const std::string& _internal_default_solver_optimizer_sets() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_solver_optimizer_sets(
      const std::string& value);
  std::string* _internal_mutable_default_solver_optimizer_sets();

  public:
  // optional bool log_search_progress = 14 [default = false];
  bool has_log_search_progress() const;
  void clear_log_search_progress() ;
  bool log_search_progress() const;
  void set_log_search_progress(bool value);

  private:
  bool _internal_log_search_progress() const;
  void _internal_set_log_search_progress(bool value);

  public:
  // optional bool prune_search_tree = 4 [default = false];
  bool has_prune_search_tree() const;
  void clear_prune_search_tree() ;
  bool prune_search_tree() const;
  void set_prune_search_tree(bool value);

  private:
  bool _internal_prune_search_tree() const;
  void _internal_set_prune_search_tree(bool value);

  public:
  // optional bool sort_constraints_by_num_terms = 5 [default = false];
  bool has_sort_constraints_by_num_terms() const;
  void clear_sort_constraints_by_num_terms() ;
  bool sort_constraints_by_num_terms() const;
  void set_sort_constraints_by_num_terms(bool value);

  private:
  bool _internal_sort_constraints_by_num_terms() const;
  void _internal_set_sort_constraints_by_num_terms(bool value);

  public:
  // optional bool use_symmetry = 17 [default = false];
  bool has_use_symmetry() const;
  void clear_use_symmetry() ;
  bool use_symmetry() const;
  void set_use_symmetry(bool value);

  private:
  bool _internal_use_symmetry() const;
  void _internal_set_use_symmetry(bool value);

  public:
  // optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
  bool has_synchronization_type() const;
  void clear_synchronization_type() ;
  ::operations_research::bop::BopParameters_ThreadSynchronizationType synchronization_type() const;
  void set_synchronization_type(::operations_research::bop::BopParameters_ThreadSynchronizationType value);

  private:
  ::operations_research::bop::BopParameters_ThreadSynchronizationType _internal_synchronization_type() const;
  void _internal_set_synchronization_type(::operations_research::bop::BopParameters_ThreadSynchronizationType value);

  public:
  // optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
  bool has_max_number_of_consecutive_failing_optimizer_calls() const;
  void clear_max_number_of_consecutive_failing_optimizer_calls() ;
  ::int32_t max_number_of_consecutive_failing_optimizer_calls() const;
  void set_max_number_of_consecutive_failing_optimizer_calls(::int32_t value);

  private:
  ::int32_t _internal_max_number_of_consecutive_failing_optimizer_calls() const;
  void _internal_set_max_number_of_consecutive_failing_optimizer_calls(::int32_t value);

  public:
  // optional bool exploit_symmetry_in_sat_first_solution = 40 [default = false];
  bool has_exploit_symmetry_in_sat_first_solution() const;
  void clear_exploit_symmetry_in_sat_first_solution() ;
  bool exploit_symmetry_in_sat_first_solution() const;
  void set_exploit_symmetry_in_sat_first_solution(bool value);

  private:
  bool _internal_exploit_symmetry_in_sat_first_solution() const;
  void _internal_set_exploit_symmetry_in_sat_first_solution(bool value);

  public:
  // optional bool use_potential_one_flip_repairs_in_ls = 39 [default = false];
  bool has_use_potential_one_flip_repairs_in_ls() const;
  void clear_use_potential_one_flip_repairs_in_ls() ;
  bool use_potential_one_flip_repairs_in_ls() const;
  void set_use_potential_one_flip_repairs_in_ls(bool value);

  private:
  bool _internal_use_potential_one_flip_repairs_in_ls() const;
  void _internal_set_use_potential_one_flip_repairs_in_ls(bool value);

  public:
  // optional bool use_lp_strong_branching = 29 [default = false];
  bool has_use_lp_strong_branching() const;
  void clear_use_lp_strong_branching() ;
  bool use_lp_strong_branching() const;
  void set_use_lp_strong_branching(bool value);

  private:
  bool _internal_use_lp_strong_branching() const;
  void _internal_set_use_lp_strong_branching(bool value);

  public:
  // optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
  bool has_decomposed_problem_min_time_in_seconds() const;
  void clear_decomposed_problem_min_time_in_seconds() ;
  double decomposed_problem_min_time_in_seconds() const;
  void set_decomposed_problem_min_time_in_seconds(double value);

  private:
  double _internal_decomposed_problem_min_time_in_seconds() const;
  void _internal_set_decomposed_problem_min_time_in_seconds(double value);

  public:
  // optional int32 max_lp_solve_for_feasibility_problems = 41 [default = 0];
  bool has_max_lp_solve_for_feasibility_problems() const;
  void clear_max_lp_solve_for_feasibility_problems() ;
  ::int32_t max_lp_solve_for_feasibility_problems() const;
  void set_max_lp_solve_for_feasibility_problems(::int32_t value);

  private:
  ::int32_t _internal_max_lp_solve_for_feasibility_problems() const;
  void _internal_set_max_lp_solve_for_feasibility_problems(::int32_t value);

  public:
  // optional double max_time_in_seconds = 1 [default = inf];
  bool has_max_time_in_seconds() const;
  void clear_max_time_in_seconds() ;
  double max_time_in_seconds() const;
  void set_max_time_in_seconds(double value);

  private:
  double _internal_max_time_in_seconds() const;
  void _internal_set_max_time_in_seconds(double value);

  public:
  // optional int32 max_num_decisions_in_ls = 2 [default = 4];
  bool has_max_num_decisions_in_ls() const;
  void clear_max_num_decisions_in_ls() ;
  ::int32_t max_num_decisions_in_ls() const;
  void set_max_num_decisions_in_ls(::int32_t value);

  private:
  ::int32_t _internal_max_num_decisions_in_ls() const;
  void _internal_set_max_num_decisions_in_ls(::int32_t value);

  public:
  // optional int32 random_seed = 7 [default = 8];
  bool has_random_seed() const;
  void clear_random_seed() ;
  ::int32_t random_seed() const;
  void set_random_seed(::int32_t value);

  private:
  ::int32_t _internal_random_seed() const;
  void _internal_set_random_seed(::int32_t value);

  public:
  // optional int32 num_relaxed_vars = 8 [default = 10];
  bool has_num_relaxed_vars() const;
  void clear_num_relaxed_vars() ;
  ::int32_t num_relaxed_vars() const;
  void set_num_relaxed_vars(::int32_t value);

  private:
  ::int32_t _internal_num_relaxed_vars() const;
  void _internal_set_num_relaxed_vars(::int32_t value);

  public:
  // optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
  bool has_max_number_of_conflicts_in_random_lns() const;
  void clear_max_number_of_conflicts_in_random_lns() ;
  ::int32_t max_number_of_conflicts_in_random_lns() const;
  void set_max_number_of_conflicts_in_random_lns(::int32_t value);

  private:
  ::int32_t _internal_max_number_of_conflicts_in_random_lns() const;
  void _internal_set_max_number_of_conflicts_in_random_lns(::int32_t value);

  public:
  // optional bool compute_estimated_impact = 3 [default = true];
  bool has_compute_estimated_impact() const;
  void clear_compute_estimated_impact() ;
  bool compute_estimated_impact() const;
  void set_compute_estimated_impact(bool value);

  private:
  bool _internal_compute_estimated_impact() const;
  void _internal_set_compute_estimated_impact(bool value);

  public:
  // optional bool use_random_lns = 6 [default = true];
  bool has_use_random_lns() const;
  void clear_use_random_lns() ;
  bool use_random_lns() const;
  void set_use_random_lns(bool value);

  private:
  bool _internal_use_random_lns() const;
  void _internal_set_use_random_lns(bool value);

  public:
  // optional bool use_lp_lns = 12 [default = true];
  bool has_use_lp_lns() const;
  void clear_use_lp_lns() ;
  bool use_lp_lns() const;
  void set_use_lp_lns(bool value);

  private:
  bool _internal_use_lp_lns() const;
  void _internal_set_use_lp_lns(bool value);

  public:
  // optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
  bool has_use_sat_to_choose_lns_neighbourhood() const;
  void clear_use_sat_to_choose_lns_neighbourhood() ;
  bool use_sat_to_choose_lns_neighbourhood() const;
  void set_use_sat_to_choose_lns_neighbourhood(bool value);

  private:
  bool _internal_use_sat_to_choose_lns_neighbourhood() const;
  void _internal_set_use_sat_to_choose_lns_neighbourhood(bool value);

  public:
  // optional int32 num_random_lns_tries = 10 [default = 1];
  bool has_num_random_lns_tries() const;
  void clear_num_random_lns_tries() ;
  ::int32_t num_random_lns_tries() const;
  void set_num_random_lns_tries(::int32_t value);

  private:
  ::int32_t _internal_num_random_lns_tries() const;
  void _internal_set_num_random_lns_tries(::int32_t value);

  public:
  // optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
  bool has_max_number_of_backtracks_in_ls() const;
  void clear_max_number_of_backtracks_in_ls() ;
  ::int64_t max_number_of_backtracks_in_ls() const;
  void set_max_number_of_backtracks_in_ls(::int64_t value);

  private:
  ::int64_t _internal_max_number_of_backtracks_in_ls() const;
  void _internal_set_max_number_of_backtracks_in_ls(::int64_t value);

  public:
  // optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
  bool has_max_number_of_conflicts_for_quick_check() const;
  void clear_max_number_of_conflicts_for_quick_check() ;
  ::int32_t max_number_of_conflicts_for_quick_check() const;
  void set_max_number_of_conflicts_for_quick_check(::int32_t value);

  private:
  ::int32_t _internal_max_number_of_conflicts_for_quick_check() const;
  void _internal_set_max_number_of_conflicts_for_quick_check(::int32_t value);

  public:
  // optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
  bool has_max_number_of_conflicts_in_random_solution_generation() const;
  void clear_max_number_of_conflicts_in_random_solution_generation() ;
  ::int32_t max_number_of_conflicts_in_random_solution_generation() const;
  void set_max_number_of_conflicts_in_random_solution_generation(::int32_t value);

  private:
  ::int32_t _internal_max_number_of_conflicts_in_random_solution_generation() const;
  void _internal_set_max_number_of_conflicts_in_random_solution_generation(::int32_t value);

  public:
  // optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
  bool has_max_number_of_explored_assignments_per_try_in_ls() const;
  void clear_max_number_of_explored_assignments_per_try_in_ls() ;
  ::int64_t max_number_of_explored_assignments_per_try_in_ls() const;
  void set_max_number_of_explored_assignments_per_try_in_ls(::int64_t value);

  private:
  ::int64_t _internal_max_number_of_explored_assignments_per_try_in_ls() const;
  void _internal_set_max_number_of_explored_assignments_per_try_in_ls(::int64_t value);

  public:
  // optional bool use_transposition_table_in_ls = 22 [default = true];
  bool has_use_transposition_table_in_ls() const;
  void clear_use_transposition_table_in_ls() ;
  bool use_transposition_table_in_ls() const;
  void set_use_transposition_table_in_ls(bool value);

  private:
  bool _internal_use_transposition_table_in_ls() const;
  void _internal_set_use_transposition_table_in_ls(bool value);

  public:
  // optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
  bool has_use_learned_binary_clauses_in_lp() const;
  void clear_use_learned_binary_clauses_in_lp() ;
  bool use_learned_binary_clauses_in_lp() const;
  void set_use_learned_binary_clauses_in_lp(bool value);

  private:
  bool _internal_use_learned_binary_clauses_in_lp() const;
  void _internal_set_use_learned_binary_clauses_in_lp(bool value);

  public:
  // optional int32 number_of_solvers = 24 [default = 1];
  bool has_number_of_solvers() const;
  void clear_number_of_solvers() ;
  ::int32_t number_of_solvers() const;
  void set_number_of_solvers(::int32_t value);

  private:
  ::int32_t _internal_number_of_solvers() const;
  void _internal_set_number_of_solvers(::int32_t value);

  public:
  // optional double max_deterministic_time = 27 [default = inf];
  bool has_max_deterministic_time() const;
  void clear_max_deterministic_time() ;
  double max_deterministic_time() const;
  void set_max_deterministic_time(double value);

  private:
  double _internal_max_deterministic_time() const;
  void _internal_set_max_deterministic_time(double value);

  public:
  // optional double relative_gap_limit = 28 [default = 0.0001];
  bool has_relative_gap_limit() const;
  void clear_relative_gap_limit() ;
  double relative_gap_limit() const;
  void set_relative_gap_limit(double value);

  private:
  double _internal_relative_gap_limit() const;
  void _internal_set_relative_gap_limit(double value);

  public:
  // optional int32 decomposer_num_variables_threshold = 30 [default = 50];
  bool has_decomposer_num_variables_threshold() const;
  void clear_decomposer_num_variables_threshold() ;
  ::int32_t decomposer_num_variables_threshold() const;
  void set_decomposer_num_variables_threshold(::int32_t value);

  private:
  ::int32_t _internal_decomposer_num_variables_threshold() const;
  void _internal_set_decomposer_num_variables_threshold(::int32_t value);

  public:
  // optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
  bool has_num_bop_solvers_used_by_decomposition() const;
  void clear_num_bop_solvers_used_by_decomposition() ;
  ::int32_t num_bop_solvers_used_by_decomposition() const;
  void set_num_bop_solvers_used_by_decomposition(::int32_t value);

  private:
  ::int32_t _internal_num_bop_solvers_used_by_decomposition() const;
  void _internal_set_num_bop_solvers_used_by_decomposition(::int32_t value);

  public:
  // optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
  bool has_guided_sat_conflicts_chunk() const;
  void clear_guided_sat_conflicts_chunk() ;
  ::int32_t guided_sat_conflicts_chunk() const;
  void set_guided_sat_conflicts_chunk(::int32_t value);

  private:
  ::int32_t _internal_guided_sat_conflicts_chunk() const;
  void _internal_set_guided_sat_conflicts_chunk(::int32_t value);

  public:
  // optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
  bool has_max_num_broken_constraints_in_ls() const;
  void clear_max_num_broken_constraints_in_ls() ;
  ::int32_t max_num_broken_constraints_in_ls() const;
  void set_max_num_broken_constraints_in_ls(::int32_t value);

  private:
  ::int32_t _internal_max_num_broken_constraints_in_ls() const;
  void _internal_set_max_num_broken_constraints_in_ls(::int32_t value);

  public:
  // optional double lp_max_deterministic_time = 37 [default = 1];
  bool has_lp_max_deterministic_time() const;
  void clear_lp_max_deterministic_time() ;
  double lp_max_deterministic_time() const;
  void set_lp_max_deterministic_time(double value);

  private:
  double _internal_lp_max_deterministic_time() const;
  void _internal_set_lp_max_deterministic_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.bop.BopParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 37, 2,
      107, 7>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<2> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::bop::BopSolverOptimizerSet > solver_optimizer_sets_;
    static const ::google::protobuf::internal::LazyString _i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_;
    ::google::protobuf::internal::ArenaStringPtr default_solver_optimizer_sets_;
    bool log_search_progress_;
    bool prune_search_tree_;
    bool sort_constraints_by_num_terms_;
    bool use_symmetry_;
    int synchronization_type_;
    ::int32_t max_number_of_consecutive_failing_optimizer_calls_;
    bool exploit_symmetry_in_sat_first_solution_;
    bool use_potential_one_flip_repairs_in_ls_;
    bool use_lp_strong_branching_;
    double decomposed_problem_min_time_in_seconds_;
    ::int32_t max_lp_solve_for_feasibility_problems_;
    double max_time_in_seconds_;
    ::int32_t max_num_decisions_in_ls_;
    ::int32_t random_seed_;
    ::int32_t num_relaxed_vars_;
    ::int32_t max_number_of_conflicts_in_random_lns_;
    bool compute_estimated_impact_;
    bool use_random_lns_;
    bool use_lp_lns_;
    bool use_sat_to_choose_lns_neighbourhood_;
    ::int32_t num_random_lns_tries_;
    ::int64_t max_number_of_backtracks_in_ls_;
    ::int32_t max_number_of_conflicts_for_quick_check_;
    ::int32_t max_number_of_conflicts_in_random_solution_generation_;
    ::int64_t max_number_of_explored_assignments_per_try_in_ls_;
    bool use_transposition_table_in_ls_;
    bool use_learned_binary_clauses_in_lp_;
    ::int32_t number_of_solvers_;
    double max_deterministic_time_;
    double relative_gap_limit_;
    ::int32_t decomposer_num_variables_threshold_;
    ::int32_t num_bop_solvers_used_by_decomposition_;
    ::int32_t guided_sat_conflicts_chunk_;
    ::int32_t max_num_broken_constraints_in_ls_;
    double lp_max_deterministic_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fbop_2fbop_5fparameters_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BopOptimizerMethod

// optional .operations_research.bop.BopOptimizerMethod.OptimizerType type = 1;
inline bool BopOptimizerMethod::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BopOptimizerMethod::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::operations_research::bop::BopOptimizerMethod_OptimizerType BopOptimizerMethod::type() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopOptimizerMethod.type)
  return _internal_type();
}
inline void BopOptimizerMethod::set_type(::operations_research::bop::BopOptimizerMethod_OptimizerType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopOptimizerMethod.type)
}
inline ::operations_research::bop::BopOptimizerMethod_OptimizerType BopOptimizerMethod::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::bop::BopOptimizerMethod_OptimizerType>(_impl_.type_);
}
inline void BopOptimizerMethod::_internal_set_type(::operations_research::bop::BopOptimizerMethod_OptimizerType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::bop::BopOptimizerMethod_OptimizerType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}

// -------------------------------------------------------------------

// BopSolverOptimizerSet

// repeated .operations_research.bop.BopOptimizerMethod methods = 1;
inline int BopSolverOptimizerSet::_internal_methods_size() const {
  return _internal_methods().size();
}
inline int BopSolverOptimizerSet::methods_size() const {
  return _internal_methods_size();
}
inline void BopSolverOptimizerSet::clear_methods() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.methods_.Clear();
}
inline ::operations_research::bop::BopOptimizerMethod* BopSolverOptimizerSet::mutable_methods(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.bop.BopSolverOptimizerSet.methods)
  return _internal_mutable_methods()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>* BopSolverOptimizerSet::mutable_methods()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.bop.BopSolverOptimizerSet.methods)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_methods();
}
inline const ::operations_research::bop::BopOptimizerMethod& BopSolverOptimizerSet::methods(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopSolverOptimizerSet.methods)
  return _internal_methods().Get(index);
}
inline ::operations_research::bop::BopOptimizerMethod* BopSolverOptimizerSet::add_methods() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::bop::BopOptimizerMethod* _add = _internal_mutable_methods()->Add();
  // @@protoc_insertion_point(field_add:operations_research.bop.BopSolverOptimizerSet.methods)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>& BopSolverOptimizerSet::methods() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.bop.BopSolverOptimizerSet.methods)
  return _internal_methods();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>&
BopSolverOptimizerSet::_internal_methods() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.methods_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopOptimizerMethod>*
BopSolverOptimizerSet::_internal_mutable_methods() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.methods_;
}

// -------------------------------------------------------------------

// BopParameters

// optional double max_time_in_seconds = 1 [default = inf];
inline bool BopParameters::has_max_time_in_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void BopParameters::clear_max_time_in_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_time_in_seconds_ = std::numeric_limits<double>::infinity();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double BopParameters::max_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_time_in_seconds)
  return _internal_max_time_in_seconds();
}
inline void BopParameters::set_max_time_in_seconds(double value) {
  _internal_set_max_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_time_in_seconds)
}
inline double BopParameters::_internal_max_time_in_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_time_in_seconds_;
}
inline void BopParameters::_internal_set_max_time_in_seconds(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.max_time_in_seconds_ = value;
}

// optional double max_deterministic_time = 27 [default = inf];
inline bool BopParameters::has_max_deterministic_time() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void BopParameters::clear_max_deterministic_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_deterministic_time_ = std::numeric_limits<double>::infinity();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline double BopParameters::max_deterministic_time() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_deterministic_time)
  return _internal_max_deterministic_time();
}
inline void BopParameters::set_max_deterministic_time(double value) {
  _internal_set_max_deterministic_time(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_deterministic_time)
}
inline double BopParameters::_internal_max_deterministic_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_deterministic_time_;
}
inline void BopParameters::_internal_set_max_deterministic_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.max_deterministic_time_ = value;
}

// optional double lp_max_deterministic_time = 37 [default = 1];
inline bool BopParameters::has_lp_max_deterministic_time() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void BopParameters::clear_lp_max_deterministic_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lp_max_deterministic_time_ = 1;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline double BopParameters::lp_max_deterministic_time() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.lp_max_deterministic_time)
  return _internal_lp_max_deterministic_time();
}
inline void BopParameters::set_lp_max_deterministic_time(double value) {
  _internal_set_lp_max_deterministic_time(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.lp_max_deterministic_time)
}
inline double BopParameters::_internal_lp_max_deterministic_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lp_max_deterministic_time_;
}
inline void BopParameters::_internal_set_lp_max_deterministic_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.lp_max_deterministic_time_ = value;
}

// optional int32 max_number_of_consecutive_failing_optimizer_calls = 35;
inline bool BopParameters::has_max_number_of_consecutive_failing_optimizer_calls() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_consecutive_failing_optimizer_calls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_consecutive_failing_optimizer_calls_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t BopParameters::max_number_of_consecutive_failing_optimizer_calls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_consecutive_failing_optimizer_calls)
  return _internal_max_number_of_consecutive_failing_optimizer_calls();
}
inline void BopParameters::set_max_number_of_consecutive_failing_optimizer_calls(::int32_t value) {
  _internal_set_max_number_of_consecutive_failing_optimizer_calls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_consecutive_failing_optimizer_calls)
}
inline ::int32_t BopParameters::_internal_max_number_of_consecutive_failing_optimizer_calls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_consecutive_failing_optimizer_calls_;
}
inline void BopParameters::_internal_set_max_number_of_consecutive_failing_optimizer_calls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_number_of_consecutive_failing_optimizer_calls_ = value;
}

// optional double relative_gap_limit = 28 [default = 0.0001];
inline bool BopParameters::has_relative_gap_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void BopParameters::clear_relative_gap_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_gap_limit_ = 0.0001;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline double BopParameters::relative_gap_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.relative_gap_limit)
  return _internal_relative_gap_limit();
}
inline void BopParameters::set_relative_gap_limit(double value) {
  _internal_set_relative_gap_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.relative_gap_limit)
}
inline double BopParameters::_internal_relative_gap_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_gap_limit_;
}
inline void BopParameters::_internal_set_relative_gap_limit(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.relative_gap_limit_ = value;
}

// optional int32 max_num_decisions_in_ls = 2 [default = 4];
inline bool BopParameters::has_max_num_decisions_in_ls() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void BopParameters::clear_max_num_decisions_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_num_decisions_in_ls_ = 4;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t BopParameters::max_num_decisions_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_num_decisions_in_ls)
  return _internal_max_num_decisions_in_ls();
}
inline void BopParameters::set_max_num_decisions_in_ls(::int32_t value) {
  _internal_set_max_num_decisions_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_num_decisions_in_ls)
}
inline ::int32_t BopParameters::_internal_max_num_decisions_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_num_decisions_in_ls_;
}
inline void BopParameters::_internal_set_max_num_decisions_in_ls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.max_num_decisions_in_ls_ = value;
}

// optional int32 max_num_broken_constraints_in_ls = 38 [default = 2147483647];
inline bool BopParameters::has_max_num_broken_constraints_in_ls() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void BopParameters::clear_max_num_broken_constraints_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_num_broken_constraints_in_ls_ = 2147483647;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::int32_t BopParameters::max_num_broken_constraints_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_num_broken_constraints_in_ls)
  return _internal_max_num_broken_constraints_in_ls();
}
inline void BopParameters::set_max_num_broken_constraints_in_ls(::int32_t value) {
  _internal_set_max_num_broken_constraints_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_num_broken_constraints_in_ls)
}
inline ::int32_t BopParameters::_internal_max_num_broken_constraints_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_num_broken_constraints_in_ls_;
}
inline void BopParameters::_internal_set_max_num_broken_constraints_in_ls(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.max_num_broken_constraints_in_ls_ = value;
}

// optional bool log_search_progress = 14 [default = false];
inline bool BopParameters::has_log_search_progress() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BopParameters::clear_log_search_progress() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.log_search_progress_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool BopParameters::log_search_progress() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.log_search_progress)
  return _internal_log_search_progress();
}
inline void BopParameters::set_log_search_progress(bool value) {
  _internal_set_log_search_progress(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.log_search_progress)
}
inline bool BopParameters::_internal_log_search_progress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.log_search_progress_;
}
inline void BopParameters::_internal_set_log_search_progress(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.log_search_progress_ = value;
}

// optional bool compute_estimated_impact = 3 [default = true];
inline bool BopParameters::has_compute_estimated_impact() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void BopParameters::clear_compute_estimated_impact() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.compute_estimated_impact_ = true;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool BopParameters::compute_estimated_impact() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.compute_estimated_impact)
  return _internal_compute_estimated_impact();
}
inline void BopParameters::set_compute_estimated_impact(bool value) {
  _internal_set_compute_estimated_impact(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.compute_estimated_impact)
}
inline bool BopParameters::_internal_compute_estimated_impact() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.compute_estimated_impact_;
}
inline void BopParameters::_internal_set_compute_estimated_impact(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.compute_estimated_impact_ = value;
}

// optional bool prune_search_tree = 4 [default = false];
inline bool BopParameters::has_prune_search_tree() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BopParameters::clear_prune_search_tree() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.prune_search_tree_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool BopParameters::prune_search_tree() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.prune_search_tree)
  return _internal_prune_search_tree();
}
inline void BopParameters::set_prune_search_tree(bool value) {
  _internal_set_prune_search_tree(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.prune_search_tree)
}
inline bool BopParameters::_internal_prune_search_tree() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.prune_search_tree_;
}
inline void BopParameters::_internal_set_prune_search_tree(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.prune_search_tree_ = value;
}

// optional bool sort_constraints_by_num_terms = 5 [default = false];
inline bool BopParameters::has_sort_constraints_by_num_terms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BopParameters::clear_sort_constraints_by_num_terms() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sort_constraints_by_num_terms_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool BopParameters::sort_constraints_by_num_terms() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.sort_constraints_by_num_terms)
  return _internal_sort_constraints_by_num_terms();
}
inline void BopParameters::set_sort_constraints_by_num_terms(bool value) {
  _internal_set_sort_constraints_by_num_terms(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.sort_constraints_by_num_terms)
}
inline bool BopParameters::_internal_sort_constraints_by_num_terms() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sort_constraints_by_num_terms_;
}
inline void BopParameters::_internal_set_sort_constraints_by_num_terms(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.sort_constraints_by_num_terms_ = value;
}

// optional bool use_random_lns = 6 [default = true];
inline bool BopParameters::has_use_random_lns() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void BopParameters::clear_use_random_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_random_lns_ = true;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool BopParameters::use_random_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_random_lns)
  return _internal_use_random_lns();
}
inline void BopParameters::set_use_random_lns(bool value) {
  _internal_set_use_random_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_random_lns)
}
inline bool BopParameters::_internal_use_random_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_random_lns_;
}
inline void BopParameters::_internal_set_use_random_lns(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.use_random_lns_ = value;
}

// optional int32 random_seed = 7 [default = 8];
inline bool BopParameters::has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void BopParameters::clear_random_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_seed_ = 8;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t BopParameters::random_seed() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.random_seed)
  return _internal_random_seed();
}
inline void BopParameters::set_random_seed(::int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.random_seed)
}
inline ::int32_t BopParameters::_internal_random_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_seed_;
}
inline void BopParameters::_internal_set_random_seed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.random_seed_ = value;
}

// optional int32 num_relaxed_vars = 8 [default = 10];
inline bool BopParameters::has_num_relaxed_vars() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void BopParameters::clear_num_relaxed_vars() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_relaxed_vars_ = 10;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t BopParameters::num_relaxed_vars() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.num_relaxed_vars)
  return _internal_num_relaxed_vars();
}
inline void BopParameters::set_num_relaxed_vars(::int32_t value) {
  _internal_set_num_relaxed_vars(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.num_relaxed_vars)
}
inline ::int32_t BopParameters::_internal_num_relaxed_vars() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_relaxed_vars_;
}
inline void BopParameters::_internal_set_num_relaxed_vars(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.num_relaxed_vars_ = value;
}

// optional int32 max_number_of_conflicts_in_random_lns = 9 [default = 2500];
inline bool BopParameters::has_max_number_of_conflicts_in_random_lns() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_conflicts_in_random_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_conflicts_in_random_lns_ = 2500;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t BopParameters::max_number_of_conflicts_in_random_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_conflicts_in_random_lns)
  return _internal_max_number_of_conflicts_in_random_lns();
}
inline void BopParameters::set_max_number_of_conflicts_in_random_lns(::int32_t value) {
  _internal_set_max_number_of_conflicts_in_random_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_conflicts_in_random_lns)
}
inline ::int32_t BopParameters::_internal_max_number_of_conflicts_in_random_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_conflicts_in_random_lns_;
}
inline void BopParameters::_internal_set_max_number_of_conflicts_in_random_lns(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.max_number_of_conflicts_in_random_lns_ = value;
}

// optional int32 num_random_lns_tries = 10 [default = 1];
inline bool BopParameters::has_num_random_lns_tries() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void BopParameters::clear_num_random_lns_tries() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_random_lns_tries_ = 1;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t BopParameters::num_random_lns_tries() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.num_random_lns_tries)
  return _internal_num_random_lns_tries();
}
inline void BopParameters::set_num_random_lns_tries(::int32_t value) {
  _internal_set_num_random_lns_tries(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.num_random_lns_tries)
}
inline ::int32_t BopParameters::_internal_num_random_lns_tries() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_random_lns_tries_;
}
inline void BopParameters::_internal_set_num_random_lns_tries(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.num_random_lns_tries_ = value;
}

// optional int64 max_number_of_backtracks_in_ls = 11 [default = 100000000];
inline bool BopParameters::has_max_number_of_backtracks_in_ls() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_backtracks_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_backtracks_in_ls_ = ::int64_t{100000000};
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int64_t BopParameters::max_number_of_backtracks_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_backtracks_in_ls)
  return _internal_max_number_of_backtracks_in_ls();
}
inline void BopParameters::set_max_number_of_backtracks_in_ls(::int64_t value) {
  _internal_set_max_number_of_backtracks_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_backtracks_in_ls)
}
inline ::int64_t BopParameters::_internal_max_number_of_backtracks_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_backtracks_in_ls_;
}
inline void BopParameters::_internal_set_max_number_of_backtracks_in_ls(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.max_number_of_backtracks_in_ls_ = value;
}

// optional bool use_lp_lns = 12 [default = true];
inline bool BopParameters::has_use_lp_lns() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void BopParameters::clear_use_lp_lns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_lp_lns_ = true;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool BopParameters::use_lp_lns() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_lp_lns)
  return _internal_use_lp_lns();
}
inline void BopParameters::set_use_lp_lns(bool value) {
  _internal_set_use_lp_lns(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_lp_lns)
}
inline bool BopParameters::_internal_use_lp_lns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_lp_lns_;
}
inline void BopParameters::_internal_set_use_lp_lns(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.use_lp_lns_ = value;
}

// optional bool use_sat_to_choose_lns_neighbourhood = 15 [default = true];
inline bool BopParameters::has_use_sat_to_choose_lns_neighbourhood() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void BopParameters::clear_use_sat_to_choose_lns_neighbourhood() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_sat_to_choose_lns_neighbourhood_ = true;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline bool BopParameters::use_sat_to_choose_lns_neighbourhood() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_sat_to_choose_lns_neighbourhood)
  return _internal_use_sat_to_choose_lns_neighbourhood();
}
inline void BopParameters::set_use_sat_to_choose_lns_neighbourhood(bool value) {
  _internal_set_use_sat_to_choose_lns_neighbourhood(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_sat_to_choose_lns_neighbourhood)
}
inline bool BopParameters::_internal_use_sat_to_choose_lns_neighbourhood() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_sat_to_choose_lns_neighbourhood_;
}
inline void BopParameters::_internal_set_use_sat_to_choose_lns_neighbourhood(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.use_sat_to_choose_lns_neighbourhood_ = value;
}

// optional int32 max_number_of_conflicts_for_quick_check = 16 [default = 10];
inline bool BopParameters::has_max_number_of_conflicts_for_quick_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_conflicts_for_quick_check() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_conflicts_for_quick_check_ = 10;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::int32_t BopParameters::max_number_of_conflicts_for_quick_check() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_conflicts_for_quick_check)
  return _internal_max_number_of_conflicts_for_quick_check();
}
inline void BopParameters::set_max_number_of_conflicts_for_quick_check(::int32_t value) {
  _internal_set_max_number_of_conflicts_for_quick_check(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_conflicts_for_quick_check)
}
inline ::int32_t BopParameters::_internal_max_number_of_conflicts_for_quick_check() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_conflicts_for_quick_check_;
}
inline void BopParameters::_internal_set_max_number_of_conflicts_for_quick_check(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.max_number_of_conflicts_for_quick_check_ = value;
}

// optional bool use_symmetry = 17 [default = false];
inline bool BopParameters::has_use_symmetry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BopParameters::clear_use_symmetry() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_symmetry_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool BopParameters::use_symmetry() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_symmetry)
  return _internal_use_symmetry();
}
inline void BopParameters::set_use_symmetry(bool value) {
  _internal_set_use_symmetry(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_symmetry)
}
inline bool BopParameters::_internal_use_symmetry() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_symmetry_;
}
inline void BopParameters::_internal_set_use_symmetry(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.use_symmetry_ = value;
}

// optional bool exploit_symmetry_in_sat_first_solution = 40 [default = false];
inline bool BopParameters::has_exploit_symmetry_in_sat_first_solution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void BopParameters::clear_exploit_symmetry_in_sat_first_solution() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exploit_symmetry_in_sat_first_solution_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool BopParameters::exploit_symmetry_in_sat_first_solution() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.exploit_symmetry_in_sat_first_solution)
  return _internal_exploit_symmetry_in_sat_first_solution();
}
inline void BopParameters::set_exploit_symmetry_in_sat_first_solution(bool value) {
  _internal_set_exploit_symmetry_in_sat_first_solution(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.exploit_symmetry_in_sat_first_solution)
}
inline bool BopParameters::_internal_exploit_symmetry_in_sat_first_solution() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exploit_symmetry_in_sat_first_solution_;
}
inline void BopParameters::_internal_set_exploit_symmetry_in_sat_first_solution(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.exploit_symmetry_in_sat_first_solution_ = value;
}

// optional int32 max_number_of_conflicts_in_random_solution_generation = 20 [default = 500];
inline bool BopParameters::has_max_number_of_conflicts_in_random_solution_generation() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_conflicts_in_random_solution_generation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_conflicts_in_random_solution_generation_ = 500;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::int32_t BopParameters::max_number_of_conflicts_in_random_solution_generation() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_conflicts_in_random_solution_generation)
  return _internal_max_number_of_conflicts_in_random_solution_generation();
}
inline void BopParameters::set_max_number_of_conflicts_in_random_solution_generation(::int32_t value) {
  _internal_set_max_number_of_conflicts_in_random_solution_generation(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_conflicts_in_random_solution_generation)
}
inline ::int32_t BopParameters::_internal_max_number_of_conflicts_in_random_solution_generation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_conflicts_in_random_solution_generation_;
}
inline void BopParameters::_internal_set_max_number_of_conflicts_in_random_solution_generation(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.max_number_of_conflicts_in_random_solution_generation_ = value;
}

// optional int64 max_number_of_explored_assignments_per_try_in_ls = 21 [default = 10000];
inline bool BopParameters::has_max_number_of_explored_assignments_per_try_in_ls() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void BopParameters::clear_max_number_of_explored_assignments_per_try_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_number_of_explored_assignments_per_try_in_ls_ = ::int64_t{10000};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::int64_t BopParameters::max_number_of_explored_assignments_per_try_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_number_of_explored_assignments_per_try_in_ls)
  return _internal_max_number_of_explored_assignments_per_try_in_ls();
}
inline void BopParameters::set_max_number_of_explored_assignments_per_try_in_ls(::int64_t value) {
  _internal_set_max_number_of_explored_assignments_per_try_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_number_of_explored_assignments_per_try_in_ls)
}
inline ::int64_t BopParameters::_internal_max_number_of_explored_assignments_per_try_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_number_of_explored_assignments_per_try_in_ls_;
}
inline void BopParameters::_internal_set_max_number_of_explored_assignments_per_try_in_ls(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.max_number_of_explored_assignments_per_try_in_ls_ = value;
}

// optional bool use_transposition_table_in_ls = 22 [default = true];
inline bool BopParameters::has_use_transposition_table_in_ls() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void BopParameters::clear_use_transposition_table_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_transposition_table_in_ls_ = true;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool BopParameters::use_transposition_table_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_transposition_table_in_ls)
  return _internal_use_transposition_table_in_ls();
}
inline void BopParameters::set_use_transposition_table_in_ls(bool value) {
  _internal_set_use_transposition_table_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_transposition_table_in_ls)
}
inline bool BopParameters::_internal_use_transposition_table_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_transposition_table_in_ls_;
}
inline void BopParameters::_internal_set_use_transposition_table_in_ls(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.use_transposition_table_in_ls_ = value;
}

// optional bool use_potential_one_flip_repairs_in_ls = 39 [default = false];
inline bool BopParameters::has_use_potential_one_flip_repairs_in_ls() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void BopParameters::clear_use_potential_one_flip_repairs_in_ls() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_potential_one_flip_repairs_in_ls_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool BopParameters::use_potential_one_flip_repairs_in_ls() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_potential_one_flip_repairs_in_ls)
  return _internal_use_potential_one_flip_repairs_in_ls();
}
inline void BopParameters::set_use_potential_one_flip_repairs_in_ls(bool value) {
  _internal_set_use_potential_one_flip_repairs_in_ls(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_potential_one_flip_repairs_in_ls)
}
inline bool BopParameters::_internal_use_potential_one_flip_repairs_in_ls() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_potential_one_flip_repairs_in_ls_;
}
inline void BopParameters::_internal_set_use_potential_one_flip_repairs_in_ls(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.use_potential_one_flip_repairs_in_ls_ = value;
}

// optional bool use_learned_binary_clauses_in_lp = 23 [default = true];
inline bool BopParameters::has_use_learned_binary_clauses_in_lp() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void BopParameters::clear_use_learned_binary_clauses_in_lp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_learned_binary_clauses_in_lp_ = true;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool BopParameters::use_learned_binary_clauses_in_lp() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_learned_binary_clauses_in_lp)
  return _internal_use_learned_binary_clauses_in_lp();
}
inline void BopParameters::set_use_learned_binary_clauses_in_lp(bool value) {
  _internal_set_use_learned_binary_clauses_in_lp(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_learned_binary_clauses_in_lp)
}
inline bool BopParameters::_internal_use_learned_binary_clauses_in_lp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_learned_binary_clauses_in_lp_;
}
inline void BopParameters::_internal_set_use_learned_binary_clauses_in_lp(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.use_learned_binary_clauses_in_lp_ = value;
}

// optional int32 number_of_solvers = 24 [default = 1];
inline bool BopParameters::has_number_of_solvers() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void BopParameters::clear_number_of_solvers() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.number_of_solvers_ = 1;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline ::int32_t BopParameters::number_of_solvers() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.number_of_solvers)
  return _internal_number_of_solvers();
}
inline void BopParameters::set_number_of_solvers(::int32_t value) {
  _internal_set_number_of_solvers(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.number_of_solvers)
}
inline ::int32_t BopParameters::_internal_number_of_solvers() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.number_of_solvers_;
}
inline void BopParameters::_internal_set_number_of_solvers(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.number_of_solvers_ = value;
}

// optional .operations_research.bop.BopParameters.ThreadSynchronizationType synchronization_type = 25 [default = NO_SYNCHRONIZATION];
inline bool BopParameters::has_synchronization_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BopParameters::clear_synchronization_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.synchronization_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::operations_research::bop::BopParameters_ThreadSynchronizationType BopParameters::synchronization_type() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.synchronization_type)
  return _internal_synchronization_type();
}
inline void BopParameters::set_synchronization_type(::operations_research::bop::BopParameters_ThreadSynchronizationType value) {
  _internal_set_synchronization_type(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.synchronization_type)
}
inline ::operations_research::bop::BopParameters_ThreadSynchronizationType BopParameters::_internal_synchronization_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::bop::BopParameters_ThreadSynchronizationType>(_impl_.synchronization_type_);
}
inline void BopParameters::_internal_set_synchronization_type(::operations_research::bop::BopParameters_ThreadSynchronizationType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::bop::BopParameters_ThreadSynchronizationType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.synchronization_type_ = value;
}

// repeated .operations_research.bop.BopSolverOptimizerSet solver_optimizer_sets = 26;
inline int BopParameters::_internal_solver_optimizer_sets_size() const {
  return _internal_solver_optimizer_sets().size();
}
inline int BopParameters::solver_optimizer_sets_size() const {
  return _internal_solver_optimizer_sets_size();
}
inline void BopParameters::clear_solver_optimizer_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solver_optimizer_sets_.Clear();
}
inline ::operations_research::bop::BopSolverOptimizerSet* BopParameters::mutable_solver_optimizer_sets(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.bop.BopParameters.solver_optimizer_sets)
  return _internal_mutable_solver_optimizer_sets()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>* BopParameters::mutable_solver_optimizer_sets()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.bop.BopParameters.solver_optimizer_sets)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_solver_optimizer_sets();
}
inline const ::operations_research::bop::BopSolverOptimizerSet& BopParameters::solver_optimizer_sets(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.solver_optimizer_sets)
  return _internal_solver_optimizer_sets().Get(index);
}
inline ::operations_research::bop::BopSolverOptimizerSet* BopParameters::add_solver_optimizer_sets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::bop::BopSolverOptimizerSet* _add = _internal_mutable_solver_optimizer_sets()->Add();
  // @@protoc_insertion_point(field_add:operations_research.bop.BopParameters.solver_optimizer_sets)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>& BopParameters::solver_optimizer_sets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.bop.BopParameters.solver_optimizer_sets)
  return _internal_solver_optimizer_sets();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>&
BopParameters::_internal_solver_optimizer_sets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solver_optimizer_sets_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::bop::BopSolverOptimizerSet>*
BopParameters::_internal_mutable_solver_optimizer_sets() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.solver_optimizer_sets_;
}

// optional string default_solver_optimizer_sets = 33 [default = "methods:{type:LOCAL_SEARCH }                       methods:{type:RANDOM_FIRST_SOLUTION }              methods:{type:LINEAR_RELAXATION }                  methods:{type:LP_FIRST_SOLUTION }                  methods:{type:OBJECTIVE_FIRST_SOLUTION }           methods:{type:USER_GUIDED_FIRST_SOLUTION }         methods:{type:RANDOM_CONSTRAINT_LNS_GUIDED_BY_LP } methods:{type:RANDOM_VARIABLE_LNS_GUIDED_BY_LP }   methods:{type:RELATION_GRAPH_LNS }                 methods:{type:RELATION_GRAPH_LNS_GUIDED_BY_LP }    methods:{type:RANDOM_CONSTRAINT_LNS }              methods:{type:RANDOM_VARIABLE_LNS }                methods:{type:SAT_CORE_BASED }                     methods:{type:COMPLETE_LNS }                       "];
inline bool BopParameters::has_default_solver_optimizer_sets() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BopParameters::clear_default_solver_optimizer_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.default_solver_optimizer_sets_.ClearToDefault(::operations_research::bop::BopParameters::Impl_::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_, GetArena());
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BopParameters::default_solver_optimizer_sets() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.default_solver_optimizer_sets)
  if (_impl_.default_solver_optimizer_sets_.IsDefault()) {
    return Impl_::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_.get();
  }
  return _internal_default_solver_optimizer_sets();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BopParameters::set_default_solver_optimizer_sets(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_solver_optimizer_sets_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.default_solver_optimizer_sets)
}
inline std::string* BopParameters::mutable_default_solver_optimizer_sets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_default_solver_optimizer_sets();
  // @@protoc_insertion_point(field_mutable:operations_research.bop.BopParameters.default_solver_optimizer_sets)
  return _s;
}
inline const std::string& BopParameters::_internal_default_solver_optimizer_sets() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.default_solver_optimizer_sets_.Get();
}
inline void BopParameters::_internal_set_default_solver_optimizer_sets(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.default_solver_optimizer_sets_.Set(value, GetArena());
}
inline std::string* BopParameters::_internal_mutable_default_solver_optimizer_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.default_solver_optimizer_sets_.Mutable(::operations_research::bop::BopParameters::Impl_::_i_give_permission_to_break_this_code_default_default_solver_optimizer_sets_, GetArena());
}
inline std::string* BopParameters::release_default_solver_optimizer_sets() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.bop.BopParameters.default_solver_optimizer_sets)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  return _impl_.default_solver_optimizer_sets_.Release();
}
inline void BopParameters::set_allocated_default_solver_optimizer_sets(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.default_solver_optimizer_sets_.SetAllocated(value, GetArena());
  // @@protoc_insertion_point(field_set_allocated:operations_research.bop.BopParameters.default_solver_optimizer_sets)
}

// optional bool use_lp_strong_branching = 29 [default = false];
inline bool BopParameters::has_use_lp_strong_branching() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void BopParameters::clear_use_lp_strong_branching() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.use_lp_strong_branching_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool BopParameters::use_lp_strong_branching() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.use_lp_strong_branching)
  return _internal_use_lp_strong_branching();
}
inline void BopParameters::set_use_lp_strong_branching(bool value) {
  _internal_set_use_lp_strong_branching(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.use_lp_strong_branching)
}
inline bool BopParameters::_internal_use_lp_strong_branching() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.use_lp_strong_branching_;
}
inline void BopParameters::_internal_set_use_lp_strong_branching(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.use_lp_strong_branching_ = value;
}

// optional int32 decomposer_num_variables_threshold = 30 [default = 50];
inline bool BopParameters::has_decomposer_num_variables_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void BopParameters::clear_decomposer_num_variables_threshold() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.decomposer_num_variables_threshold_ = 50;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline ::int32_t BopParameters::decomposer_num_variables_threshold() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.decomposer_num_variables_threshold)
  return _internal_decomposer_num_variables_threshold();
}
inline void BopParameters::set_decomposer_num_variables_threshold(::int32_t value) {
  _internal_set_decomposer_num_variables_threshold(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.decomposer_num_variables_threshold)
}
inline ::int32_t BopParameters::_internal_decomposer_num_variables_threshold() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.decomposer_num_variables_threshold_;
}
inline void BopParameters::_internal_set_decomposer_num_variables_threshold(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.decomposer_num_variables_threshold_ = value;
}

// optional int32 num_bop_solvers_used_by_decomposition = 31 [default = 1];
inline bool BopParameters::has_num_bop_solvers_used_by_decomposition() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void BopParameters::clear_num_bop_solvers_used_by_decomposition() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_bop_solvers_used_by_decomposition_ = 1;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline ::int32_t BopParameters::num_bop_solvers_used_by_decomposition() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.num_bop_solvers_used_by_decomposition)
  return _internal_num_bop_solvers_used_by_decomposition();
}
inline void BopParameters::set_num_bop_solvers_used_by_decomposition(::int32_t value) {
  _internal_set_num_bop_solvers_used_by_decomposition(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.num_bop_solvers_used_by_decomposition)
}
inline ::int32_t BopParameters::_internal_num_bop_solvers_used_by_decomposition() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_bop_solvers_used_by_decomposition_;
}
inline void BopParameters::_internal_set_num_bop_solvers_used_by_decomposition(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.num_bop_solvers_used_by_decomposition_ = value;
}

// optional double decomposed_problem_min_time_in_seconds = 36 [default = 0];
inline bool BopParameters::has_decomposed_problem_min_time_in_seconds() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void BopParameters::clear_decomposed_problem_min_time_in_seconds() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.decomposed_problem_min_time_in_seconds_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double BopParameters::decomposed_problem_min_time_in_seconds() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.decomposed_problem_min_time_in_seconds)
  return _internal_decomposed_problem_min_time_in_seconds();
}
inline void BopParameters::set_decomposed_problem_min_time_in_seconds(double value) {
  _internal_set_decomposed_problem_min_time_in_seconds(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.decomposed_problem_min_time_in_seconds)
}
inline double BopParameters::_internal_decomposed_problem_min_time_in_seconds() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.decomposed_problem_min_time_in_seconds_;
}
inline void BopParameters::_internal_set_decomposed_problem_min_time_in_seconds(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.decomposed_problem_min_time_in_seconds_ = value;
}

// optional int32 guided_sat_conflicts_chunk = 34 [default = 1000];
inline bool BopParameters::has_guided_sat_conflicts_chunk() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void BopParameters::clear_guided_sat_conflicts_chunk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.guided_sat_conflicts_chunk_ = 1000;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline ::int32_t BopParameters::guided_sat_conflicts_chunk() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.guided_sat_conflicts_chunk)
  return _internal_guided_sat_conflicts_chunk();
}
inline void BopParameters::set_guided_sat_conflicts_chunk(::int32_t value) {
  _internal_set_guided_sat_conflicts_chunk(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.guided_sat_conflicts_chunk)
}
inline ::int32_t BopParameters::_internal_guided_sat_conflicts_chunk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.guided_sat_conflicts_chunk_;
}
inline void BopParameters::_internal_set_guided_sat_conflicts_chunk(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.guided_sat_conflicts_chunk_ = value;
}

// optional int32 max_lp_solve_for_feasibility_problems = 41 [default = 0];
inline bool BopParameters::has_max_lp_solve_for_feasibility_problems() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void BopParameters::clear_max_lp_solve_for_feasibility_problems() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_lp_solve_for_feasibility_problems_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t BopParameters::max_lp_solve_for_feasibility_problems() const {
  // @@protoc_insertion_point(field_get:operations_research.bop.BopParameters.max_lp_solve_for_feasibility_problems)
  return _internal_max_lp_solve_for_feasibility_problems();
}
inline void BopParameters::set_max_lp_solve_for_feasibility_problems(::int32_t value) {
  _internal_set_max_lp_solve_for_feasibility_problems(value);
  // @@protoc_insertion_point(field_set:operations_research.bop.BopParameters.max_lp_solve_for_feasibility_problems)
}
inline ::int32_t BopParameters::_internal_max_lp_solve_for_feasibility_problems() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_lp_solve_for_feasibility_problems_;
}
inline void BopParameters::_internal_set_max_lp_solve_for_feasibility_problems(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.max_lp_solve_for_feasibility_problems_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace bop
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::bop::BopOptimizerMethod_OptimizerType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::bop::BopOptimizerMethod_OptimizerType>() {
  return ::operations_research::bop::BopOptimizerMethod_OptimizerType_descriptor();
}
template <>
struct is_proto_enum<::operations_research::bop::BopParameters_ThreadSynchronizationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::bop::BopParameters_ThreadSynchronizationType>() {
  return ::operations_research::bop::BopParameters_ThreadSynchronizationType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fbop_2fbop_5fparameters_2eproto_2epb_2eh
