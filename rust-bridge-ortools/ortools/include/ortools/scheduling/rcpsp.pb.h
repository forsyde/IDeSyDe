// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/scheduling/rcpsp.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2frcpsp_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2frcpsp_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fscheduling_2frcpsp_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fscheduling_2frcpsp_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fscheduling_2frcpsp_2eproto;
namespace operations_research {
namespace scheduling {
namespace rcpsp {
class PerRecipeDelays;
struct PerRecipeDelaysDefaultTypeInternal;
extern PerRecipeDelaysDefaultTypeInternal _PerRecipeDelays_default_instance_;
class PerSuccessorDelays;
struct PerSuccessorDelaysDefaultTypeInternal;
extern PerSuccessorDelaysDefaultTypeInternal _PerSuccessorDelays_default_instance_;
class RcpspAssignment;
struct RcpspAssignmentDefaultTypeInternal;
extern RcpspAssignmentDefaultTypeInternal _RcpspAssignment_default_instance_;
class RcpspProblem;
struct RcpspProblemDefaultTypeInternal;
extern RcpspProblemDefaultTypeInternal _RcpspProblem_default_instance_;
class Recipe;
struct RecipeDefaultTypeInternal;
extern RecipeDefaultTypeInternal _Recipe_default_instance_;
class Resource;
struct ResourceDefaultTypeInternal;
extern ResourceDefaultTypeInternal _Resource_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
}  // namespace rcpsp
}  // namespace scheduling
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace scheduling {
namespace rcpsp {

// ===================================================================


// -------------------------------------------------------------------

class Resource final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.Resource) */ {
 public:
  inline Resource() : Resource(nullptr) {}
  ~Resource() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Resource(::google::protobuf::internal::ConstantInitialized);

  inline Resource(const Resource& from)
      : Resource(nullptr, from) {}
  Resource(Resource&& from) noexcept
    : Resource() {
    *this = ::std::move(from);
  }

  inline Resource& operator=(const Resource& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resource& operator=(Resource&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Resource& default_instance() {
    return *internal_default_instance();
  }
  static inline const Resource* internal_default_instance() {
    return reinterpret_cast<const Resource*>(
               &_Resource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Resource& a, Resource& b) {
    a.Swap(&b);
  }
  inline void Swap(Resource* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resource* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Resource* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Resource>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Resource& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Resource& from) {
    Resource::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Resource* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.Resource";
  }
  protected:
  explicit Resource(::google::protobuf::Arena* arena);
  Resource(::google::protobuf::Arena* arena, const Resource& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxCapacityFieldNumber = 1,
    kMinCapacityFieldNumber = 2,
    kRenewableFieldNumber = 3,
    kUnitCostFieldNumber = 4,
  };
  // int32 max_capacity = 1;
  void clear_max_capacity() ;
  ::int32_t max_capacity() const;
  void set_max_capacity(::int32_t value);

  private:
  ::int32_t _internal_max_capacity() const;
  void _internal_set_max_capacity(::int32_t value);

  public:
  // int32 min_capacity = 2;
  void clear_min_capacity() ;
  ::int32_t min_capacity() const;
  void set_min_capacity(::int32_t value);

  private:
  ::int32_t _internal_min_capacity() const;
  void _internal_set_min_capacity(::int32_t value);

  public:
  // bool renewable = 3;
  void clear_renewable() ;
  bool renewable() const;
  void set_renewable(bool value);

  private:
  bool _internal_renewable() const;
  void _internal_set_renewable(bool value);

  public:
  // int32 unit_cost = 4;
  void clear_unit_cost() ;
  ::int32_t unit_cost() const;
  void set_unit_cost(::int32_t value);

  private:
  ::int32_t _internal_unit_cost() const;
  void _internal_set_unit_cost(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.Resource)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t max_capacity_;
    ::int32_t min_capacity_;
    bool renewable_;
    ::int32_t unit_cost_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class Recipe final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.Recipe) */ {
 public:
  inline Recipe() : Recipe(nullptr) {}
  ~Recipe() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Recipe(::google::protobuf::internal::ConstantInitialized);

  inline Recipe(const Recipe& from)
      : Recipe(nullptr, from) {}
  Recipe(Recipe&& from) noexcept
    : Recipe() {
    *this = ::std::move(from);
  }

  inline Recipe& operator=(const Recipe& from) {
    CopyFrom(from);
    return *this;
  }
  inline Recipe& operator=(Recipe&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Recipe& default_instance() {
    return *internal_default_instance();
  }
  static inline const Recipe* internal_default_instance() {
    return reinterpret_cast<const Recipe*>(
               &_Recipe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Recipe& a, Recipe& b) {
    a.Swap(&b);
  }
  inline void Swap(Recipe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Recipe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Recipe* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Recipe>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Recipe& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Recipe& from) {
    Recipe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Recipe* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.Recipe";
  }
  protected:
  explicit Recipe(::google::protobuf::Arena* arena);
  Recipe(::google::protobuf::Arena* arena, const Recipe& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDemandsFieldNumber = 2,
    kResourcesFieldNumber = 3,
    kDurationFieldNumber = 1,
  };
  // repeated int32 demands = 2;
  int demands_size() const;
  private:
  int _internal_demands_size() const;

  public:
  void clear_demands() ;
  ::int32_t demands(int index) const;
  void set_demands(int index, ::int32_t value);
  void add_demands(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& demands() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_demands();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_demands() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_demands();

  public:
  // repeated int32 resources = 3;
  int resources_size() const;
  private:
  int _internal_resources_size() const;

  public:
  void clear_resources() ;
  ::int32_t resources(int index) const;
  void set_resources(int index, ::int32_t value);
  void add_resources(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& resources() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_resources();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_resources() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_resources();

  public:
  // int32 duration = 1;
  void clear_duration() ;
  ::int32_t duration() const;
  void set_duration(::int32_t value);

  private:
  ::int32_t _internal_duration() const;
  void _internal_set_duration(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.Recipe)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> demands_;
    mutable ::google::protobuf::internal::CachedSize _demands_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> resources_;
    mutable ::google::protobuf::internal::CachedSize _resources_cached_byte_size_;
    ::int32_t duration_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class RcpspAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.RcpspAssignment) */ {
 public:
  inline RcpspAssignment() : RcpspAssignment(nullptr) {}
  ~RcpspAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RcpspAssignment(::google::protobuf::internal::ConstantInitialized);

  inline RcpspAssignment(const RcpspAssignment& from)
      : RcpspAssignment(nullptr, from) {}
  RcpspAssignment(RcpspAssignment&& from) noexcept
    : RcpspAssignment() {
    *this = ::std::move(from);
  }

  inline RcpspAssignment& operator=(const RcpspAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcpspAssignment& operator=(RcpspAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcpspAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcpspAssignment* internal_default_instance() {
    return reinterpret_cast<const RcpspAssignment*>(
               &_RcpspAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RcpspAssignment& a, RcpspAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(RcpspAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcpspAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcpspAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcpspAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RcpspAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RcpspAssignment& from) {
    RcpspAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RcpspAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.RcpspAssignment";
  }
  protected:
  explicit RcpspAssignment(::google::protobuf::Arena* arena);
  RcpspAssignment(::google::protobuf::Arena* arena, const RcpspAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartOfTaskFieldNumber = 1,
    kSelectedRecipeOfTaskFieldNumber = 2,
  };
  // repeated int64 start_of_task = 1;
  int start_of_task_size() const;
  private:
  int _internal_start_of_task_size() const;

  public:
  void clear_start_of_task() ;
  ::int64_t start_of_task(int index) const;
  void set_start_of_task(int index, ::int64_t value);
  void add_start_of_task(::int64_t value);
  const ::google::protobuf::RepeatedField<::int64_t>& start_of_task() const;
  ::google::protobuf::RepeatedField<::int64_t>* mutable_start_of_task();

  private:
  const ::google::protobuf::RepeatedField<::int64_t>& _internal_start_of_task() const;
  ::google::protobuf::RepeatedField<::int64_t>* _internal_mutable_start_of_task();

  public:
  // repeated int32 selected_recipe_of_task = 2;
  int selected_recipe_of_task_size() const;
  private:
  int _internal_selected_recipe_of_task_size() const;

  public:
  void clear_selected_recipe_of_task() ;
  ::int32_t selected_recipe_of_task(int index) const;
  void set_selected_recipe_of_task(int index, ::int32_t value);
  void add_selected_recipe_of_task(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& selected_recipe_of_task() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_selected_recipe_of_task();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_selected_recipe_of_task() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_selected_recipe_of_task();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.RcpspAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int64_t> start_of_task_;
    mutable ::google::protobuf::internal::CachedSize _start_of_task_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> selected_recipe_of_task_;
    mutable ::google::protobuf::internal::CachedSize _selected_recipe_of_task_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class PerRecipeDelays final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.PerRecipeDelays) */ {
 public:
  inline PerRecipeDelays() : PerRecipeDelays(nullptr) {}
  ~PerRecipeDelays() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerRecipeDelays(::google::protobuf::internal::ConstantInitialized);

  inline PerRecipeDelays(const PerRecipeDelays& from)
      : PerRecipeDelays(nullptr, from) {}
  PerRecipeDelays(PerRecipeDelays&& from) noexcept
    : PerRecipeDelays() {
    *this = ::std::move(from);
  }

  inline PerRecipeDelays& operator=(const PerRecipeDelays& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerRecipeDelays& operator=(PerRecipeDelays&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerRecipeDelays& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerRecipeDelays* internal_default_instance() {
    return reinterpret_cast<const PerRecipeDelays*>(
               &_PerRecipeDelays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PerRecipeDelays& a, PerRecipeDelays& b) {
    a.Swap(&b);
  }
  inline void Swap(PerRecipeDelays* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerRecipeDelays* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerRecipeDelays* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerRecipeDelays>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PerRecipeDelays& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PerRecipeDelays& from) {
    PerRecipeDelays::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PerRecipeDelays* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.PerRecipeDelays";
  }
  protected:
  explicit PerRecipeDelays(::google::protobuf::Arena* arena);
  PerRecipeDelays(::google::protobuf::Arena* arena, const PerRecipeDelays& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDelaysFieldNumber = 1,
  };
  // repeated int32 min_delays = 1;
  int min_delays_size() const;
  private:
  int _internal_min_delays_size() const;

  public:
  void clear_min_delays() ;
  ::int32_t min_delays(int index) const;
  void set_min_delays(int index, ::int32_t value);
  void add_min_delays(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& min_delays() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_min_delays();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_min_delays() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_min_delays();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.PerRecipeDelays)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> min_delays_;
    mutable ::google::protobuf::internal::CachedSize _min_delays_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class PerSuccessorDelays final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.PerSuccessorDelays) */ {
 public:
  inline PerSuccessorDelays() : PerSuccessorDelays(nullptr) {}
  ~PerSuccessorDelays() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR PerSuccessorDelays(::google::protobuf::internal::ConstantInitialized);

  inline PerSuccessorDelays(const PerSuccessorDelays& from)
      : PerSuccessorDelays(nullptr, from) {}
  PerSuccessorDelays(PerSuccessorDelays&& from) noexcept
    : PerSuccessorDelays() {
    *this = ::std::move(from);
  }

  inline PerSuccessorDelays& operator=(const PerSuccessorDelays& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerSuccessorDelays& operator=(PerSuccessorDelays&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerSuccessorDelays& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerSuccessorDelays* internal_default_instance() {
    return reinterpret_cast<const PerSuccessorDelays*>(
               &_PerSuccessorDelays_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PerSuccessorDelays& a, PerSuccessorDelays& b) {
    a.Swap(&b);
  }
  inline void Swap(PerSuccessorDelays* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerSuccessorDelays* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PerSuccessorDelays* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PerSuccessorDelays>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PerSuccessorDelays& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const PerSuccessorDelays& from) {
    PerSuccessorDelays::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PerSuccessorDelays* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.PerSuccessorDelays";
  }
  protected:
  explicit PerSuccessorDelays(::google::protobuf::Arena* arena);
  PerSuccessorDelays(::google::protobuf::Arena* arena, const PerSuccessorDelays& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecipeDelaysFieldNumber = 1,
  };
  // repeated .operations_research.scheduling.rcpsp.PerRecipeDelays recipe_delays = 1;
  int recipe_delays_size() const;
  private:
  int _internal_recipe_delays_size() const;

  public:
  void clear_recipe_delays() ;
  ::operations_research::scheduling::rcpsp::PerRecipeDelays* mutable_recipe_delays(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerRecipeDelays >*
      mutable_recipe_delays();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>& _internal_recipe_delays() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>* _internal_mutable_recipe_delays();
  public:
  const ::operations_research::scheduling::rcpsp::PerRecipeDelays& recipe_delays(int index) const;
  ::operations_research::scheduling::rcpsp::PerRecipeDelays* add_recipe_delays();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerRecipeDelays >&
      recipe_delays() const;
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.PerSuccessorDelays)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerRecipeDelays > recipe_delays_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class Task final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Task(::google::protobuf::internal::ConstantInitialized);

  inline Task(const Task& from)
      : Task(nullptr, from) {}
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Task* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Task& from) {
    Task::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Task* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.Task";
  }
  protected:
  explicit Task(::google::protobuf::Arena* arena);
  Task(::google::protobuf::Arena* arena, const Task& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessorsFieldNumber = 1,
    kRecipesFieldNumber = 2,
    kSuccessorDelaysFieldNumber = 3,
  };
  // repeated int32 successors = 1;
  int successors_size() const;
  private:
  int _internal_successors_size() const;

  public:
  void clear_successors() ;
  ::int32_t successors(int index) const;
  void set_successors(int index, ::int32_t value);
  void add_successors(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& successors() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_successors();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_successors() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_successors();

  public:
  // repeated .operations_research.scheduling.rcpsp.Recipe recipes = 2;
  int recipes_size() const;
  private:
  int _internal_recipes_size() const;

  public:
  void clear_recipes() ;
  ::operations_research::scheduling::rcpsp::Recipe* mutable_recipes(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Recipe >*
      mutable_recipes();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>& _internal_recipes() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>* _internal_mutable_recipes();
  public:
  const ::operations_research::scheduling::rcpsp::Recipe& recipes(int index) const;
  ::operations_research::scheduling::rcpsp::Recipe* add_recipes();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Recipe >&
      recipes() const;
  // repeated .operations_research.scheduling.rcpsp.PerSuccessorDelays successor_delays = 3;
  int successor_delays_size() const;
  private:
  int _internal_successor_delays_size() const;

  public:
  void clear_successor_delays() ;
  ::operations_research::scheduling::rcpsp::PerSuccessorDelays* mutable_successor_delays(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerSuccessorDelays >*
      mutable_successor_delays();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>& _internal_successor_delays() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>* _internal_mutable_successor_delays();
  public:
  const ::operations_research::scheduling::rcpsp::PerSuccessorDelays& successor_delays(int index) const;
  ::operations_research::scheduling::rcpsp::PerSuccessorDelays* add_successor_delays();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerSuccessorDelays >&
      successor_delays() const;
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.Task)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> successors_;
    mutable ::google::protobuf::internal::CachedSize _successors_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Recipe > recipes_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::PerSuccessorDelays > successor_delays_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};// -------------------------------------------------------------------

class RcpspProblem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.scheduling.rcpsp.RcpspProblem) */ {
 public:
  inline RcpspProblem() : RcpspProblem(nullptr) {}
  ~RcpspProblem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RcpspProblem(::google::protobuf::internal::ConstantInitialized);

  inline RcpspProblem(const RcpspProblem& from)
      : RcpspProblem(nullptr, from) {}
  RcpspProblem(RcpspProblem&& from) noexcept
    : RcpspProblem() {
    *this = ::std::move(from);
  }

  inline RcpspProblem& operator=(const RcpspProblem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RcpspProblem& operator=(RcpspProblem&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RcpspProblem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RcpspProblem* internal_default_instance() {
    return reinterpret_cast<const RcpspProblem*>(
               &_RcpspProblem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RcpspProblem& a, RcpspProblem& b) {
    a.Swap(&b);
  }
  inline void Swap(RcpspProblem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RcpspProblem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RcpspProblem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RcpspProblem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RcpspProblem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RcpspProblem& from) {
    RcpspProblem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RcpspProblem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.scheduling.rcpsp.RcpspProblem";
  }
  protected:
  explicit RcpspProblem(::google::protobuf::Arena* arena);
  RcpspProblem(::google::protobuf::Arena* arena, const RcpspProblem& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesFieldNumber = 1,
    kTasksFieldNumber = 2,
    kBasedataFieldNumber = 12,
    kNameFieldNumber = 14,
    kIsConsumerProducerFieldNumber = 3,
    kIsResourceInvestmentFieldNumber = 4,
    kIsRcpspMaxFieldNumber = 5,
    kDeadlineFieldNumber = 6,
    kHorizonFieldNumber = 7,
    kReleaseDateFieldNumber = 8,
    kTardinessCostFieldNumber = 9,
    kMpmTimeFieldNumber = 10,
    kSeedFieldNumber = 11,
    kDueDateFieldNumber = 13,
  };
  // repeated .operations_research.scheduling.rcpsp.Resource resources = 1;
  int resources_size() const;
  private:
  int _internal_resources_size() const;

  public:
  void clear_resources() ;
  ::operations_research::scheduling::rcpsp::Resource* mutable_resources(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Resource >*
      mutable_resources();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>& _internal_resources() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>* _internal_mutable_resources();
  public:
  const ::operations_research::scheduling::rcpsp::Resource& resources(int index) const;
  ::operations_research::scheduling::rcpsp::Resource* add_resources();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Resource >&
      resources() const;
  // repeated .operations_research.scheduling.rcpsp.Task tasks = 2;
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;

  public:
  void clear_tasks() ;
  ::operations_research::scheduling::rcpsp::Task* mutable_tasks(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Task >*
      mutable_tasks();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>& _internal_tasks() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>* _internal_mutable_tasks();
  public:
  const ::operations_research::scheduling::rcpsp::Task& tasks(int index) const;
  ::operations_research::scheduling::rcpsp::Task* add_tasks();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Task >&
      tasks() const;
  // string basedata = 12;
  void clear_basedata() ;
  const std::string& basedata() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_basedata(Arg_&& arg, Args_... args);
  std::string* mutable_basedata();
  PROTOBUF_NODISCARD std::string* release_basedata();
  void set_allocated_basedata(std::string* value);

  private:
  const std::string& _internal_basedata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_basedata(
      const std::string& value);
  std::string* _internal_mutable_basedata();

  public:
  // string name = 14;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // bool is_consumer_producer = 3;
  void clear_is_consumer_producer() ;
  bool is_consumer_producer() const;
  void set_is_consumer_producer(bool value);

  private:
  bool _internal_is_consumer_producer() const;
  void _internal_set_is_consumer_producer(bool value);

  public:
  // bool is_resource_investment = 4;
  void clear_is_resource_investment() ;
  bool is_resource_investment() const;
  void set_is_resource_investment(bool value);

  private:
  bool _internal_is_resource_investment() const;
  void _internal_set_is_resource_investment(bool value);

  public:
  // bool is_rcpsp_max = 5;
  void clear_is_rcpsp_max() ;
  bool is_rcpsp_max() const;
  void set_is_rcpsp_max(bool value);

  private:
  bool _internal_is_rcpsp_max() const;
  void _internal_set_is_rcpsp_max(bool value);

  public:
  // int32 deadline = 6;
  void clear_deadline() ;
  ::int32_t deadline() const;
  void set_deadline(::int32_t value);

  private:
  ::int32_t _internal_deadline() const;
  void _internal_set_deadline(::int32_t value);

  public:
  // int32 horizon = 7;
  void clear_horizon() ;
  ::int32_t horizon() const;
  void set_horizon(::int32_t value);

  private:
  ::int32_t _internal_horizon() const;
  void _internal_set_horizon(::int32_t value);

  public:
  // int32 release_date = 8;
  void clear_release_date() ;
  ::int32_t release_date() const;
  void set_release_date(::int32_t value);

  private:
  ::int32_t _internal_release_date() const;
  void _internal_set_release_date(::int32_t value);

  public:
  // int32 tardiness_cost = 9;
  void clear_tardiness_cost() ;
  ::int32_t tardiness_cost() const;
  void set_tardiness_cost(::int32_t value);

  private:
  ::int32_t _internal_tardiness_cost() const;
  void _internal_set_tardiness_cost(::int32_t value);

  public:
  // int32 mpm_time = 10;
  void clear_mpm_time() ;
  ::int32_t mpm_time() const;
  void set_mpm_time(::int32_t value);

  private:
  ::int32_t _internal_mpm_time() const;
  void _internal_set_mpm_time(::int32_t value);

  public:
  // int64 seed = 11;
  void clear_seed() ;
  ::int64_t seed() const;
  void set_seed(::int64_t value);

  private:
  ::int64_t _internal_seed() const;
  void _internal_set_seed(::int64_t value);

  public:
  // int32 due_date = 13;
  void clear_due_date() ;
  ::int32_t due_date() const;
  void set_due_date(::int32_t value);

  private:
  ::int32_t _internal_due_date() const;
  void _internal_set_due_date(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.scheduling.rcpsp.RcpspProblem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 14, 2,
      78, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Resource > resources_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::scheduling::rcpsp::Task > tasks_;
    ::google::protobuf::internal::ArenaStringPtr basedata_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    bool is_consumer_producer_;
    bool is_resource_investment_;
    bool is_rcpsp_max_;
    ::int32_t deadline_;
    ::int32_t horizon_;
    ::int32_t release_date_;
    ::int32_t tardiness_cost_;
    ::int32_t mpm_time_;
    ::int64_t seed_;
    ::int32_t due_date_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fscheduling_2frcpsp_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Resource

// int32 max_capacity = 1;
inline void Resource::clear_max_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_capacity_ = 0;
}
inline ::int32_t Resource::max_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Resource.max_capacity)
  return _internal_max_capacity();
}
inline void Resource::set_max_capacity(::int32_t value) {
  _internal_set_max_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Resource.max_capacity)
}
inline ::int32_t Resource::_internal_max_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_capacity_;
}
inline void Resource::_internal_set_max_capacity(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_capacity_ = value;
}

// int32 min_capacity = 2;
inline void Resource::clear_min_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_capacity_ = 0;
}
inline ::int32_t Resource::min_capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Resource.min_capacity)
  return _internal_min_capacity();
}
inline void Resource::set_min_capacity(::int32_t value) {
  _internal_set_min_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Resource.min_capacity)
}
inline ::int32_t Resource::_internal_min_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_capacity_;
}
inline void Resource::_internal_set_min_capacity(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_capacity_ = value;
}

// bool renewable = 3;
inline void Resource::clear_renewable() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.renewable_ = false;
}
inline bool Resource::renewable() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Resource.renewable)
  return _internal_renewable();
}
inline void Resource::set_renewable(bool value) {
  _internal_set_renewable(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Resource.renewable)
}
inline bool Resource::_internal_renewable() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.renewable_;
}
inline void Resource::_internal_set_renewable(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.renewable_ = value;
}

// int32 unit_cost = 4;
inline void Resource::clear_unit_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_cost_ = 0;
}
inline ::int32_t Resource::unit_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Resource.unit_cost)
  return _internal_unit_cost();
}
inline void Resource::set_unit_cost(::int32_t value) {
  _internal_set_unit_cost(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Resource.unit_cost)
}
inline ::int32_t Resource::_internal_unit_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_cost_;
}
inline void Resource::_internal_set_unit_cost(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.unit_cost_ = value;
}

// -------------------------------------------------------------------

// Recipe

// int32 duration = 1;
inline void Recipe::clear_duration() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_ = 0;
}
inline ::int32_t Recipe::duration() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Recipe.duration)
  return _internal_duration();
}
inline void Recipe::set_duration(::int32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Recipe.duration)
}
inline ::int32_t Recipe::_internal_duration() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_;
}
inline void Recipe::_internal_set_duration(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.duration_ = value;
}

// repeated int32 demands = 2;
inline int Recipe::_internal_demands_size() const {
  return _internal_demands().size();
}
inline int Recipe::demands_size() const {
  return _internal_demands_size();
}
inline void Recipe::clear_demands() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.demands_.Clear();
}
inline ::int32_t Recipe::demands(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Recipe.demands)
  return _internal_demands().Get(index);
}
inline void Recipe::set_demands(int index, ::int32_t value) {
  _internal_mutable_demands()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Recipe.demands)
}
inline void Recipe::add_demands(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_demands()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.Recipe.demands)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Recipe::demands() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.Recipe.demands)
  return _internal_demands();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Recipe::mutable_demands()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.Recipe.demands)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_demands();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Recipe::_internal_demands()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.demands_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Recipe::_internal_mutable_demands() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.demands_;
}

// repeated int32 resources = 3;
inline int Recipe::_internal_resources_size() const {
  return _internal_resources().size();
}
inline int Recipe::resources_size() const {
  return _internal_resources_size();
}
inline void Recipe::clear_resources() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resources_.Clear();
}
inline ::int32_t Recipe::resources(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Recipe.resources)
  return _internal_resources().Get(index);
}
inline void Recipe::set_resources(int index, ::int32_t value) {
  _internal_mutable_resources()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Recipe.resources)
}
inline void Recipe::add_resources(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_resources()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.Recipe.resources)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Recipe::resources() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.Recipe.resources)
  return _internal_resources();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Recipe::mutable_resources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.Recipe.resources)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resources();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Recipe::_internal_resources()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resources_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Recipe::_internal_mutable_resources() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resources_;
}

// -------------------------------------------------------------------

// PerRecipeDelays

// repeated int32 min_delays = 1;
inline int PerRecipeDelays::_internal_min_delays_size() const {
  return _internal_min_delays().size();
}
inline int PerRecipeDelays::min_delays_size() const {
  return _internal_min_delays_size();
}
inline void PerRecipeDelays::clear_min_delays() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_delays_.Clear();
}
inline ::int32_t PerRecipeDelays::min_delays(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.PerRecipeDelays.min_delays)
  return _internal_min_delays().Get(index);
}
inline void PerRecipeDelays::set_min_delays(int index, ::int32_t value) {
  _internal_mutable_min_delays()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.PerRecipeDelays.min_delays)
}
inline void PerRecipeDelays::add_min_delays(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_min_delays()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.PerRecipeDelays.min_delays)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PerRecipeDelays::min_delays() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.PerRecipeDelays.min_delays)
  return _internal_min_delays();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PerRecipeDelays::mutable_min_delays()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.PerRecipeDelays.min_delays)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_min_delays();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PerRecipeDelays::_internal_min_delays()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_delays_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PerRecipeDelays::_internal_mutable_min_delays() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.min_delays_;
}

// -------------------------------------------------------------------

// PerSuccessorDelays

// repeated .operations_research.scheduling.rcpsp.PerRecipeDelays recipe_delays = 1;
inline int PerSuccessorDelays::_internal_recipe_delays_size() const {
  return _internal_recipe_delays().size();
}
inline int PerSuccessorDelays::recipe_delays_size() const {
  return _internal_recipe_delays_size();
}
inline void PerSuccessorDelays::clear_recipe_delays() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipe_delays_.Clear();
}
inline ::operations_research::scheduling::rcpsp::PerRecipeDelays* PerSuccessorDelays::mutable_recipe_delays(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.PerSuccessorDelays.recipe_delays)
  return _internal_mutable_recipe_delays()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>* PerSuccessorDelays::mutable_recipe_delays()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.PerSuccessorDelays.recipe_delays)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_recipe_delays();
}
inline const ::operations_research::scheduling::rcpsp::PerRecipeDelays& PerSuccessorDelays::recipe_delays(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.PerSuccessorDelays.recipe_delays)
  return _internal_recipe_delays().Get(index);
}
inline ::operations_research::scheduling::rcpsp::PerRecipeDelays* PerSuccessorDelays::add_recipe_delays() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::scheduling::rcpsp::PerRecipeDelays* _add = _internal_mutable_recipe_delays()->Add();
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.PerSuccessorDelays.recipe_delays)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>& PerSuccessorDelays::recipe_delays() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.PerSuccessorDelays.recipe_delays)
  return _internal_recipe_delays();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>&
PerSuccessorDelays::_internal_recipe_delays() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recipe_delays_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerRecipeDelays>*
PerSuccessorDelays::_internal_mutable_recipe_delays() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.recipe_delays_;
}

// -------------------------------------------------------------------

// Task

// repeated int32 successors = 1;
inline int Task::_internal_successors_size() const {
  return _internal_successors().size();
}
inline int Task::successors_size() const {
  return _internal_successors_size();
}
inline void Task::clear_successors() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.successors_.Clear();
}
inline ::int32_t Task::successors(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Task.successors)
  return _internal_successors().Get(index);
}
inline void Task::set_successors(int index, ::int32_t value) {
  _internal_mutable_successors()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.Task.successors)
}
inline void Task::add_successors(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_successors()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.Task.successors)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Task::successors() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.Task.successors)
  return _internal_successors();
}
inline ::google::protobuf::RepeatedField<::int32_t>* Task::mutable_successors()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.Task.successors)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_successors();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& Task::_internal_successors()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.successors_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* Task::_internal_mutable_successors() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.successors_;
}

// repeated .operations_research.scheduling.rcpsp.Recipe recipes = 2;
inline int Task::_internal_recipes_size() const {
  return _internal_recipes().size();
}
inline int Task::recipes_size() const {
  return _internal_recipes_size();
}
inline void Task::clear_recipes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.recipes_.Clear();
}
inline ::operations_research::scheduling::rcpsp::Recipe* Task::mutable_recipes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.Task.recipes)
  return _internal_mutable_recipes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>* Task::mutable_recipes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.Task.recipes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_recipes();
}
inline const ::operations_research::scheduling::rcpsp::Recipe& Task::recipes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Task.recipes)
  return _internal_recipes().Get(index);
}
inline ::operations_research::scheduling::rcpsp::Recipe* Task::add_recipes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::scheduling::rcpsp::Recipe* _add = _internal_mutable_recipes()->Add();
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.Task.recipes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>& Task::recipes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.Task.recipes)
  return _internal_recipes();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>&
Task::_internal_recipes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.recipes_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Recipe>*
Task::_internal_mutable_recipes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.recipes_;
}

// repeated .operations_research.scheduling.rcpsp.PerSuccessorDelays successor_delays = 3;
inline int Task::_internal_successor_delays_size() const {
  return _internal_successor_delays().size();
}
inline int Task::successor_delays_size() const {
  return _internal_successor_delays_size();
}
inline void Task::clear_successor_delays() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.successor_delays_.Clear();
}
inline ::operations_research::scheduling::rcpsp::PerSuccessorDelays* Task::mutable_successor_delays(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.Task.successor_delays)
  return _internal_mutable_successor_delays()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>* Task::mutable_successor_delays()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.Task.successor_delays)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_successor_delays();
}
inline const ::operations_research::scheduling::rcpsp::PerSuccessorDelays& Task::successor_delays(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.Task.successor_delays)
  return _internal_successor_delays().Get(index);
}
inline ::operations_research::scheduling::rcpsp::PerSuccessorDelays* Task::add_successor_delays() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::scheduling::rcpsp::PerSuccessorDelays* _add = _internal_mutable_successor_delays()->Add();
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.Task.successor_delays)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>& Task::successor_delays() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.Task.successor_delays)
  return _internal_successor_delays();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>&
Task::_internal_successor_delays() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.successor_delays_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::PerSuccessorDelays>*
Task::_internal_mutable_successor_delays() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.successor_delays_;
}

// -------------------------------------------------------------------

// RcpspProblem

// repeated .operations_research.scheduling.rcpsp.Resource resources = 1;
inline int RcpspProblem::_internal_resources_size() const {
  return _internal_resources().size();
}
inline int RcpspProblem::resources_size() const {
  return _internal_resources_size();
}
inline void RcpspProblem::clear_resources() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.resources_.Clear();
}
inline ::operations_research::scheduling::rcpsp::Resource* RcpspProblem::mutable_resources(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.RcpspProblem.resources)
  return _internal_mutable_resources()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>* RcpspProblem::mutable_resources()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.RcpspProblem.resources)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_resources();
}
inline const ::operations_research::scheduling::rcpsp::Resource& RcpspProblem::resources(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.resources)
  return _internal_resources().Get(index);
}
inline ::operations_research::scheduling::rcpsp::Resource* RcpspProblem::add_resources() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::scheduling::rcpsp::Resource* _add = _internal_mutable_resources()->Add();
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.RcpspProblem.resources)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>& RcpspProblem::resources() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.RcpspProblem.resources)
  return _internal_resources();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>&
RcpspProblem::_internal_resources() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.resources_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Resource>*
RcpspProblem::_internal_mutable_resources() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.resources_;
}

// repeated .operations_research.scheduling.rcpsp.Task tasks = 2;
inline int RcpspProblem::_internal_tasks_size() const {
  return _internal_tasks().size();
}
inline int RcpspProblem::tasks_size() const {
  return _internal_tasks_size();
}
inline void RcpspProblem::clear_tasks() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tasks_.Clear();
}
inline ::operations_research::scheduling::rcpsp::Task* RcpspProblem::mutable_tasks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.RcpspProblem.tasks)
  return _internal_mutable_tasks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>* RcpspProblem::mutable_tasks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.RcpspProblem.tasks)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_tasks();
}
inline const ::operations_research::scheduling::rcpsp::Task& RcpspProblem::tasks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.tasks)
  return _internal_tasks().Get(index);
}
inline ::operations_research::scheduling::rcpsp::Task* RcpspProblem::add_tasks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::scheduling::rcpsp::Task* _add = _internal_mutable_tasks()->Add();
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.RcpspProblem.tasks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>& RcpspProblem::tasks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.RcpspProblem.tasks)
  return _internal_tasks();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>&
RcpspProblem::_internal_tasks() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tasks_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::scheduling::rcpsp::Task>*
RcpspProblem::_internal_mutable_tasks() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.tasks_;
}

// bool is_consumer_producer = 3;
inline void RcpspProblem::clear_is_consumer_producer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_consumer_producer_ = false;
}
inline bool RcpspProblem::is_consumer_producer() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.is_consumer_producer)
  return _internal_is_consumer_producer();
}
inline void RcpspProblem::set_is_consumer_producer(bool value) {
  _internal_set_is_consumer_producer(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.is_consumer_producer)
}
inline bool RcpspProblem::_internal_is_consumer_producer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_consumer_producer_;
}
inline void RcpspProblem::_internal_set_is_consumer_producer(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_consumer_producer_ = value;
}

// bool is_resource_investment = 4;
inline void RcpspProblem::clear_is_resource_investment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_resource_investment_ = false;
}
inline bool RcpspProblem::is_resource_investment() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.is_resource_investment)
  return _internal_is_resource_investment();
}
inline void RcpspProblem::set_is_resource_investment(bool value) {
  _internal_set_is_resource_investment(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.is_resource_investment)
}
inline bool RcpspProblem::_internal_is_resource_investment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_resource_investment_;
}
inline void RcpspProblem::_internal_set_is_resource_investment(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_resource_investment_ = value;
}

// bool is_rcpsp_max = 5;
inline void RcpspProblem::clear_is_rcpsp_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_rcpsp_max_ = false;
}
inline bool RcpspProblem::is_rcpsp_max() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.is_rcpsp_max)
  return _internal_is_rcpsp_max();
}
inline void RcpspProblem::set_is_rcpsp_max(bool value) {
  _internal_set_is_rcpsp_max(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.is_rcpsp_max)
}
inline bool RcpspProblem::_internal_is_rcpsp_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_rcpsp_max_;
}
inline void RcpspProblem::_internal_set_is_rcpsp_max(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_rcpsp_max_ = value;
}

// int32 deadline = 6;
inline void RcpspProblem::clear_deadline() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deadline_ = 0;
}
inline ::int32_t RcpspProblem::deadline() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.deadline)
  return _internal_deadline();
}
inline void RcpspProblem::set_deadline(::int32_t value) {
  _internal_set_deadline(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.deadline)
}
inline ::int32_t RcpspProblem::_internal_deadline() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deadline_;
}
inline void RcpspProblem::_internal_set_deadline(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deadline_ = value;
}

// int32 horizon = 7;
inline void RcpspProblem::clear_horizon() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.horizon_ = 0;
}
inline ::int32_t RcpspProblem::horizon() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.horizon)
  return _internal_horizon();
}
inline void RcpspProblem::set_horizon(::int32_t value) {
  _internal_set_horizon(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.horizon)
}
inline ::int32_t RcpspProblem::_internal_horizon() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.horizon_;
}
inline void RcpspProblem::_internal_set_horizon(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.horizon_ = value;
}

// int32 release_date = 8;
inline void RcpspProblem::clear_release_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.release_date_ = 0;
}
inline ::int32_t RcpspProblem::release_date() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.release_date)
  return _internal_release_date();
}
inline void RcpspProblem::set_release_date(::int32_t value) {
  _internal_set_release_date(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.release_date)
}
inline ::int32_t RcpspProblem::_internal_release_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.release_date_;
}
inline void RcpspProblem::_internal_set_release_date(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.release_date_ = value;
}

// int32 tardiness_cost = 9;
inline void RcpspProblem::clear_tardiness_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tardiness_cost_ = 0;
}
inline ::int32_t RcpspProblem::tardiness_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.tardiness_cost)
  return _internal_tardiness_cost();
}
inline void RcpspProblem::set_tardiness_cost(::int32_t value) {
  _internal_set_tardiness_cost(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.tardiness_cost)
}
inline ::int32_t RcpspProblem::_internal_tardiness_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tardiness_cost_;
}
inline void RcpspProblem::_internal_set_tardiness_cost(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.tardiness_cost_ = value;
}

// int32 mpm_time = 10;
inline void RcpspProblem::clear_mpm_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.mpm_time_ = 0;
}
inline ::int32_t RcpspProblem::mpm_time() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.mpm_time)
  return _internal_mpm_time();
}
inline void RcpspProblem::set_mpm_time(::int32_t value) {
  _internal_set_mpm_time(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.mpm_time)
}
inline ::int32_t RcpspProblem::_internal_mpm_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.mpm_time_;
}
inline void RcpspProblem::_internal_set_mpm_time(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.mpm_time_ = value;
}

// int64 seed = 11;
inline void RcpspProblem::clear_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.seed_ = ::int64_t{0};
}
inline ::int64_t RcpspProblem::seed() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.seed)
  return _internal_seed();
}
inline void RcpspProblem::set_seed(::int64_t value) {
  _internal_set_seed(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.seed)
}
inline ::int64_t RcpspProblem::_internal_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.seed_;
}
inline void RcpspProblem::_internal_set_seed(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.seed_ = value;
}

// string basedata = 12;
inline void RcpspProblem::clear_basedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basedata_.ClearToEmpty();
}
inline const std::string& RcpspProblem::basedata() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.basedata)
  return _internal_basedata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RcpspProblem::set_basedata(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basedata_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.basedata)
}
inline std::string* RcpspProblem::mutable_basedata() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_basedata();
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.RcpspProblem.basedata)
  return _s;
}
inline const std::string& RcpspProblem::_internal_basedata() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.basedata_.Get();
}
inline void RcpspProblem::_internal_set_basedata(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.basedata_.Set(value, GetArena());
}
inline std::string* RcpspProblem::_internal_mutable_basedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.basedata_.Mutable( GetArena());
}
inline std::string* RcpspProblem::release_basedata() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.scheduling.rcpsp.RcpspProblem.basedata)
  return _impl_.basedata_.Release();
}
inline void RcpspProblem::set_allocated_basedata(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.basedata_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.basedata_.IsDefault()) {
          _impl_.basedata_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.scheduling.rcpsp.RcpspProblem.basedata)
}

// int32 due_date = 13;
inline void RcpspProblem::clear_due_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.due_date_ = 0;
}
inline ::int32_t RcpspProblem::due_date() const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.due_date)
  return _internal_due_date();
}
inline void RcpspProblem::set_due_date(::int32_t value) {
  _internal_set_due_date(value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.due_date)
}
inline ::int32_t RcpspProblem::_internal_due_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.due_date_;
}
inline void RcpspProblem::_internal_set_due_date(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.due_date_ = value;
}

// string name = 14;
inline void RcpspProblem::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& RcpspProblem::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspProblem.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void RcpspProblem::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspProblem.name)
}
inline std::string* RcpspProblem::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:operations_research.scheduling.rcpsp.RcpspProblem.name)
  return _s;
}
inline const std::string& RcpspProblem::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void RcpspProblem::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* RcpspProblem::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* RcpspProblem::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.scheduling.rcpsp.RcpspProblem.name)
  return _impl_.name_.Release();
}
inline void RcpspProblem::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.scheduling.rcpsp.RcpspProblem.name)
}

// -------------------------------------------------------------------

// RcpspAssignment

// repeated int64 start_of_task = 1;
inline int RcpspAssignment::_internal_start_of_task_size() const {
  return _internal_start_of_task().size();
}
inline int RcpspAssignment::start_of_task_size() const {
  return _internal_start_of_task_size();
}
inline void RcpspAssignment::clear_start_of_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_of_task_.Clear();
}
inline ::int64_t RcpspAssignment::start_of_task(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspAssignment.start_of_task)
  return _internal_start_of_task().Get(index);
}
inline void RcpspAssignment::set_start_of_task(int index, ::int64_t value) {
  _internal_mutable_start_of_task()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspAssignment.start_of_task)
}
inline void RcpspAssignment::add_start_of_task(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_start_of_task()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.RcpspAssignment.start_of_task)
}
inline const ::google::protobuf::RepeatedField<::int64_t>& RcpspAssignment::start_of_task() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.RcpspAssignment.start_of_task)
  return _internal_start_of_task();
}
inline ::google::protobuf::RepeatedField<::int64_t>* RcpspAssignment::mutable_start_of_task()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.RcpspAssignment.start_of_task)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_start_of_task();
}
inline const ::google::protobuf::RepeatedField<::int64_t>& RcpspAssignment::_internal_start_of_task()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_of_task_;
}
inline ::google::protobuf::RepeatedField<::int64_t>* RcpspAssignment::_internal_mutable_start_of_task() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.start_of_task_;
}

// repeated int32 selected_recipe_of_task = 2;
inline int RcpspAssignment::_internal_selected_recipe_of_task_size() const {
  return _internal_selected_recipe_of_task().size();
}
inline int RcpspAssignment::selected_recipe_of_task_size() const {
  return _internal_selected_recipe_of_task_size();
}
inline void RcpspAssignment::clear_selected_recipe_of_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.selected_recipe_of_task_.Clear();
}
inline ::int32_t RcpspAssignment::selected_recipe_of_task(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.scheduling.rcpsp.RcpspAssignment.selected_recipe_of_task)
  return _internal_selected_recipe_of_task().Get(index);
}
inline void RcpspAssignment::set_selected_recipe_of_task(int index, ::int32_t value) {
  _internal_mutable_selected_recipe_of_task()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.scheduling.rcpsp.RcpspAssignment.selected_recipe_of_task)
}
inline void RcpspAssignment::add_selected_recipe_of_task(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_selected_recipe_of_task()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.scheduling.rcpsp.RcpspAssignment.selected_recipe_of_task)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RcpspAssignment::selected_recipe_of_task() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.scheduling.rcpsp.RcpspAssignment.selected_recipe_of_task)
  return _internal_selected_recipe_of_task();
}
inline ::google::protobuf::RepeatedField<::int32_t>* RcpspAssignment::mutable_selected_recipe_of_task()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.scheduling.rcpsp.RcpspAssignment.selected_recipe_of_task)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_selected_recipe_of_task();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& RcpspAssignment::_internal_selected_recipe_of_task()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.selected_recipe_of_task_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* RcpspAssignment::_internal_mutable_selected_recipe_of_task() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.selected_recipe_of_task_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace rcpsp
}  // namespace scheduling
}  // namespace operations_research


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fscheduling_2frcpsp_2eproto_2epb_2eh
