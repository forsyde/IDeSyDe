// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/math_opt/parameters.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/duration.pb.h"
#include "ortools/glop/parameters.pb.h"
#include "ortools/gscip/gscip.pb.h"
#include "ortools/math_opt/solvers/glpk.pb.h"
#include "ortools/math_opt/solvers/gurobi.pb.h"
#include "ortools/math_opt/solvers/highs.pb.h"
#include "ortools/sat/sat_parameters.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fmath_5fopt_2fparameters_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fmath_5fopt_2fparameters_2eproto;
namespace operations_research {
namespace math_opt {
class SolveParametersProto;
struct SolveParametersProtoDefaultTypeInternal;
extern SolveParametersProtoDefaultTypeInternal _SolveParametersProto_default_instance_;
class SolverInitializerProto;
struct SolverInitializerProtoDefaultTypeInternal;
extern SolverInitializerProtoDefaultTypeInternal _SolverInitializerProto_default_instance_;
class StrictnessProto;
struct StrictnessProtoDefaultTypeInternal;
extern StrictnessProtoDefaultTypeInternal _StrictnessProto_default_instance_;
}  // namespace math_opt
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
namespace math_opt {
enum SolverTypeProto : int {
  SOLVER_TYPE_UNSPECIFIED = 0,
  SOLVER_TYPE_GSCIP = 1,
  SOLVER_TYPE_GUROBI = 2,
  SOLVER_TYPE_GLOP = 3,
  SOLVER_TYPE_CP_SAT = 4,
  SOLVER_TYPE_GLPK = 6,
  SOLVER_TYPE_ECOS = 8,
  SOLVER_TYPE_SCS = 9,
  SOLVER_TYPE_HIGHS = 10,
  SolverTypeProto_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SolverTypeProto_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SolverTypeProto_IsValid(int value);
extern const uint32_t SolverTypeProto_internal_data_[];
constexpr SolverTypeProto SolverTypeProto_MIN = static_cast<SolverTypeProto>(0);
constexpr SolverTypeProto SolverTypeProto_MAX = static_cast<SolverTypeProto>(10);
constexpr int SolverTypeProto_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
SolverTypeProto_descriptor();
template <typename T>
const std::string& SolverTypeProto_Name(T value) {
  static_assert(std::is_same<T, SolverTypeProto>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SolverTypeProto_Name().");
  return SolverTypeProto_Name(static_cast<SolverTypeProto>(value));
}
template <>
inline const std::string& SolverTypeProto_Name(SolverTypeProto value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SolverTypeProto_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool SolverTypeProto_Parse(absl::string_view name, SolverTypeProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SolverTypeProto>(
      SolverTypeProto_descriptor(), name, value);
}
enum LPAlgorithmProto : int {
  LP_ALGORITHM_UNSPECIFIED = 0,
  LP_ALGORITHM_PRIMAL_SIMPLEX = 1,
  LP_ALGORITHM_DUAL_SIMPLEX = 2,
  LP_ALGORITHM_BARRIER = 3,
  LP_ALGORITHM_FIRST_ORDER = 4,
  LPAlgorithmProto_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LPAlgorithmProto_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LPAlgorithmProto_IsValid(int value);
extern const uint32_t LPAlgorithmProto_internal_data_[];
constexpr LPAlgorithmProto LPAlgorithmProto_MIN = static_cast<LPAlgorithmProto>(0);
constexpr LPAlgorithmProto LPAlgorithmProto_MAX = static_cast<LPAlgorithmProto>(4);
constexpr int LPAlgorithmProto_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
LPAlgorithmProto_descriptor();
template <typename T>
const std::string& LPAlgorithmProto_Name(T value) {
  static_assert(std::is_same<T, LPAlgorithmProto>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LPAlgorithmProto_Name().");
  return LPAlgorithmProto_Name(static_cast<LPAlgorithmProto>(value));
}
template <>
inline const std::string& LPAlgorithmProto_Name(LPAlgorithmProto value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LPAlgorithmProto_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool LPAlgorithmProto_Parse(absl::string_view name, LPAlgorithmProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LPAlgorithmProto>(
      LPAlgorithmProto_descriptor(), name, value);
}
enum EmphasisProto : int {
  EMPHASIS_UNSPECIFIED = 0,
  EMPHASIS_OFF = 1,
  EMPHASIS_LOW = 2,
  EMPHASIS_MEDIUM = 3,
  EMPHASIS_HIGH = 4,
  EMPHASIS_VERY_HIGH = 5,
  EmphasisProto_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  EmphasisProto_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool EmphasisProto_IsValid(int value);
extern const uint32_t EmphasisProto_internal_data_[];
constexpr EmphasisProto EmphasisProto_MIN = static_cast<EmphasisProto>(0);
constexpr EmphasisProto EmphasisProto_MAX = static_cast<EmphasisProto>(5);
constexpr int EmphasisProto_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
EmphasisProto_descriptor();
template <typename T>
const std::string& EmphasisProto_Name(T value) {
  static_assert(std::is_same<T, EmphasisProto>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EmphasisProto_Name().");
  return EmphasisProto_Name(static_cast<EmphasisProto>(value));
}
template <>
inline const std::string& EmphasisProto_Name(EmphasisProto value) {
  return ::google::protobuf::internal::NameOfDenseEnum<EmphasisProto_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool EmphasisProto_Parse(absl::string_view name, EmphasisProto* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EmphasisProto>(
      EmphasisProto_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class StrictnessProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.StrictnessProto) */ {
 public:
  inline StrictnessProto() : StrictnessProto(nullptr) {}
  ~StrictnessProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR StrictnessProto(::google::protobuf::internal::ConstantInitialized);

  inline StrictnessProto(const StrictnessProto& from)
      : StrictnessProto(nullptr, from) {}
  StrictnessProto(StrictnessProto&& from) noexcept
    : StrictnessProto() {
    *this = ::std::move(from);
  }

  inline StrictnessProto& operator=(const StrictnessProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrictnessProto& operator=(StrictnessProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrictnessProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrictnessProto* internal_default_instance() {
    return reinterpret_cast<const StrictnessProto*>(
               &_StrictnessProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StrictnessProto& a, StrictnessProto& b) {
    a.Swap(&b);
  }
  inline void Swap(StrictnessProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrictnessProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrictnessProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrictnessProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StrictnessProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const StrictnessProto& from) {
    StrictnessProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(StrictnessProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.math_opt.StrictnessProto";
  }
  protected:
  explicit StrictnessProto(::google::protobuf::Arena* arena);
  StrictnessProto(::google::protobuf::Arena* arena, const StrictnessProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBadParameterFieldNumber = 1,
  };
  // bool bad_parameter = 1;
  void clear_bad_parameter() ;
  bool bad_parameter() const;
  void set_bad_parameter(bool value);

  private:
  bool _internal_bad_parameter() const;
  void _internal_set_bad_parameter(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.math_opt.StrictnessProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool bad_parameter_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};// -------------------------------------------------------------------

class SolverInitializerProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolverInitializerProto) */ {
 public:
  inline SolverInitializerProto() : SolverInitializerProto(nullptr) {}
  ~SolverInitializerProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolverInitializerProto(::google::protobuf::internal::ConstantInitialized);

  inline SolverInitializerProto(const SolverInitializerProto& from)
      : SolverInitializerProto(nullptr, from) {}
  SolverInitializerProto(SolverInitializerProto&& from) noexcept
    : SolverInitializerProto() {
    *this = ::std::move(from);
  }

  inline SolverInitializerProto& operator=(const SolverInitializerProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolverInitializerProto& operator=(SolverInitializerProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolverInitializerProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolverInitializerProto* internal_default_instance() {
    return reinterpret_cast<const SolverInitializerProto*>(
               &_SolverInitializerProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SolverInitializerProto& a, SolverInitializerProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolverInitializerProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolverInitializerProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolverInitializerProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolverInitializerProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolverInitializerProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolverInitializerProto& from) {
    SolverInitializerProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SolverInitializerProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.math_opt.SolverInitializerProto";
  }
  protected:
  explicit SolverInitializerProto(::google::protobuf::Arena* arena);
  SolverInitializerProto(::google::protobuf::Arena* arena, const SolverInitializerProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGurobiFieldNumber = 1,
  };
  // .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
  bool has_gurobi() const;
  void clear_gurobi() ;
  const ::operations_research::math_opt::GurobiInitializerProto& gurobi() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::GurobiInitializerProto* release_gurobi();
  ::operations_research::math_opt::GurobiInitializerProto* mutable_gurobi();
  void set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* value);
  void unsafe_arena_set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* value);
  ::operations_research::math_opt::GurobiInitializerProto* unsafe_arena_release_gurobi();

  private:
  const ::operations_research::math_opt::GurobiInitializerProto& _internal_gurobi() const;
  ::operations_research::math_opt::GurobiInitializerProto* _internal_mutable_gurobi();

  public:
  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolverInitializerProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::operations_research::math_opt::GurobiInitializerProto* gurobi_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};// -------------------------------------------------------------------

class SolveParametersProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.math_opt.SolveParametersProto) */ {
 public:
  inline SolveParametersProto() : SolveParametersProto(nullptr) {}
  ~SolveParametersProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SolveParametersProto(::google::protobuf::internal::ConstantInitialized);

  inline SolveParametersProto(const SolveParametersProto& from)
      : SolveParametersProto(nullptr, from) {}
  SolveParametersProto(SolveParametersProto&& from) noexcept
    : SolveParametersProto() {
    *this = ::std::move(from);
  }

  inline SolveParametersProto& operator=(const SolveParametersProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SolveParametersProto& operator=(SolveParametersProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SolveParametersProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SolveParametersProto* internal_default_instance() {
    return reinterpret_cast<const SolveParametersProto*>(
               &_SolveParametersProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SolveParametersProto& a, SolveParametersProto& b) {
    a.Swap(&b);
  }
  inline void Swap(SolveParametersProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SolveParametersProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SolveParametersProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SolveParametersProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SolveParametersProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SolveParametersProto& from) {
    SolveParametersProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SolveParametersProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.math_opt.SolveParametersProto";
  }
  protected:
  explicit SolveParametersProto(::google::protobuf::Arena* arena);
  SolveParametersProto(::google::protobuf::Arena* arena, const SolveParametersProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeLimitFieldNumber = 1,
    kGscipFieldNumber = 12,
    kGurobiFieldNumber = 13,
    kGlopFieldNumber = 14,
    kCpSatFieldNumber = 15,
    kGlpkFieldNumber = 26,
    kHighsFieldNumber = 27,
    kIterationLimitFieldNumber = 2,
    kEnableOutputFieldNumber = 3,
    kThreadsFieldNumber = 4,
    kRandomSeedFieldNumber = 5,
    kLpAlgorithmFieldNumber = 6,
    kPresolveFieldNumber = 7,
    kCutsFieldNumber = 8,
    kHeuristicsFieldNumber = 9,
    kScalingFieldNumber = 10,
    kRelativeGapToleranceFieldNumber = 17,
    kAbsoluteGapToleranceFieldNumber = 18,
    kCutoffLimitFieldNumber = 20,
    kObjectiveLimitFieldNumber = 21,
    kBestBoundLimitFieldNumber = 22,
    kNodeLimitFieldNumber = 24,
    kSolutionLimitFieldNumber = 23,
    kSolutionPoolSizeFieldNumber = 25,
  };
  // .google.protobuf.Duration time_limit = 1;
  bool has_time_limit() const;
  void clear_time_limit() ;
  const ::google::protobuf::Duration& time_limit() const;
  PROTOBUF_NODISCARD ::google::protobuf::Duration* release_time_limit();
  ::google::protobuf::Duration* mutable_time_limit();
  void set_allocated_time_limit(::google::protobuf::Duration* value);
  void unsafe_arena_set_allocated_time_limit(::google::protobuf::Duration* value);
  ::google::protobuf::Duration* unsafe_arena_release_time_limit();

  private:
  const ::google::protobuf::Duration& _internal_time_limit() const;
  ::google::protobuf::Duration* _internal_mutable_time_limit();

  public:
  // .operations_research.GScipParameters gscip = 12;
  bool has_gscip() const;
  void clear_gscip() ;
  const ::operations_research::GScipParameters& gscip() const;
  PROTOBUF_NODISCARD ::operations_research::GScipParameters* release_gscip();
  ::operations_research::GScipParameters* mutable_gscip();
  void set_allocated_gscip(::operations_research::GScipParameters* value);
  void unsafe_arena_set_allocated_gscip(::operations_research::GScipParameters* value);
  ::operations_research::GScipParameters* unsafe_arena_release_gscip();

  private:
  const ::operations_research::GScipParameters& _internal_gscip() const;
  ::operations_research::GScipParameters* _internal_mutable_gscip();

  public:
  // .operations_research.math_opt.GurobiParametersProto gurobi = 13;
  bool has_gurobi() const;
  void clear_gurobi() ;
  const ::operations_research::math_opt::GurobiParametersProto& gurobi() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::GurobiParametersProto* release_gurobi();
  ::operations_research::math_opt::GurobiParametersProto* mutable_gurobi();
  void set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* value);
  void unsafe_arena_set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* value);
  ::operations_research::math_opt::GurobiParametersProto* unsafe_arena_release_gurobi();

  private:
  const ::operations_research::math_opt::GurobiParametersProto& _internal_gurobi() const;
  ::operations_research::math_opt::GurobiParametersProto* _internal_mutable_gurobi();

  public:
  // .operations_research.glop.GlopParameters glop = 14;
  bool has_glop() const;
  void clear_glop() ;
  const ::operations_research::glop::GlopParameters& glop() const;
  PROTOBUF_NODISCARD ::operations_research::glop::GlopParameters* release_glop();
  ::operations_research::glop::GlopParameters* mutable_glop();
  void set_allocated_glop(::operations_research::glop::GlopParameters* value);
  void unsafe_arena_set_allocated_glop(::operations_research::glop::GlopParameters* value);
  ::operations_research::glop::GlopParameters* unsafe_arena_release_glop();

  private:
  const ::operations_research::glop::GlopParameters& _internal_glop() const;
  ::operations_research::glop::GlopParameters* _internal_mutable_glop();

  public:
  // .operations_research.sat.SatParameters cp_sat = 15;
  bool has_cp_sat() const;
  void clear_cp_sat() ;
  const ::operations_research::sat::SatParameters& cp_sat() const;
  PROTOBUF_NODISCARD ::operations_research::sat::SatParameters* release_cp_sat();
  ::operations_research::sat::SatParameters* mutable_cp_sat();
  void set_allocated_cp_sat(::operations_research::sat::SatParameters* value);
  void unsafe_arena_set_allocated_cp_sat(::operations_research::sat::SatParameters* value);
  ::operations_research::sat::SatParameters* unsafe_arena_release_cp_sat();

  private:
  const ::operations_research::sat::SatParameters& _internal_cp_sat() const;
  ::operations_research::sat::SatParameters* _internal_mutable_cp_sat();

  public:
  // .operations_research.math_opt.GlpkParametersProto glpk = 26;
  bool has_glpk() const;
  void clear_glpk() ;
  const ::operations_research::math_opt::GlpkParametersProto& glpk() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::GlpkParametersProto* release_glpk();
  ::operations_research::math_opt::GlpkParametersProto* mutable_glpk();
  void set_allocated_glpk(::operations_research::math_opt::GlpkParametersProto* value);
  void unsafe_arena_set_allocated_glpk(::operations_research::math_opt::GlpkParametersProto* value);
  ::operations_research::math_opt::GlpkParametersProto* unsafe_arena_release_glpk();

  private:
  const ::operations_research::math_opt::GlpkParametersProto& _internal_glpk() const;
  ::operations_research::math_opt::GlpkParametersProto* _internal_mutable_glpk();

  public:
  // .operations_research.math_opt.HighsOptionsProto highs = 27;
  bool has_highs() const;
  void clear_highs() ;
  const ::operations_research::math_opt::HighsOptionsProto& highs() const;
  PROTOBUF_NODISCARD ::operations_research::math_opt::HighsOptionsProto* release_highs();
  ::operations_research::math_opt::HighsOptionsProto* mutable_highs();
  void set_allocated_highs(::operations_research::math_opt::HighsOptionsProto* value);
  void unsafe_arena_set_allocated_highs(::operations_research::math_opt::HighsOptionsProto* value);
  ::operations_research::math_opt::HighsOptionsProto* unsafe_arena_release_highs();

  private:
  const ::operations_research::math_opt::HighsOptionsProto& _internal_highs() const;
  ::operations_research::math_opt::HighsOptionsProto* _internal_mutable_highs();

  public:
  // optional int64 iteration_limit = 2;
  bool has_iteration_limit() const;
  void clear_iteration_limit() ;
  ::int64_t iteration_limit() const;
  void set_iteration_limit(::int64_t value);

  private:
  ::int64_t _internal_iteration_limit() const;
  void _internal_set_iteration_limit(::int64_t value);

  public:
  // bool enable_output = 3;
  void clear_enable_output() ;
  bool enable_output() const;
  void set_enable_output(bool value);

  private:
  bool _internal_enable_output() const;
  void _internal_set_enable_output(bool value);

  public:
  // optional int32 threads = 4;
  bool has_threads() const;
  void clear_threads() ;
  ::int32_t threads() const;
  void set_threads(::int32_t value);

  private:
  ::int32_t _internal_threads() const;
  void _internal_set_threads(::int32_t value);

  public:
  // optional int32 random_seed = 5;
  bool has_random_seed() const;
  void clear_random_seed() ;
  ::int32_t random_seed() const;
  void set_random_seed(::int32_t value);

  private:
  ::int32_t _internal_random_seed() const;
  void _internal_set_random_seed(::int32_t value);

  public:
  // .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
  void clear_lp_algorithm() ;
  ::operations_research::math_opt::LPAlgorithmProto lp_algorithm() const;
  void set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value);

  private:
  ::operations_research::math_opt::LPAlgorithmProto _internal_lp_algorithm() const;
  void _internal_set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value);

  public:
  // .operations_research.math_opt.EmphasisProto presolve = 7;
  void clear_presolve() ;
  ::operations_research::math_opt::EmphasisProto presolve() const;
  void set_presolve(::operations_research::math_opt::EmphasisProto value);

  private:
  ::operations_research::math_opt::EmphasisProto _internal_presolve() const;
  void _internal_set_presolve(::operations_research::math_opt::EmphasisProto value);

  public:
  // .operations_research.math_opt.EmphasisProto cuts = 8;
  void clear_cuts() ;
  ::operations_research::math_opt::EmphasisProto cuts() const;
  void set_cuts(::operations_research::math_opt::EmphasisProto value);

  private:
  ::operations_research::math_opt::EmphasisProto _internal_cuts() const;
  void _internal_set_cuts(::operations_research::math_opt::EmphasisProto value);

  public:
  // .operations_research.math_opt.EmphasisProto heuristics = 9;
  void clear_heuristics() ;
  ::operations_research::math_opt::EmphasisProto heuristics() const;
  void set_heuristics(::operations_research::math_opt::EmphasisProto value);

  private:
  ::operations_research::math_opt::EmphasisProto _internal_heuristics() const;
  void _internal_set_heuristics(::operations_research::math_opt::EmphasisProto value);

  public:
  // .operations_research.math_opt.EmphasisProto scaling = 10;
  void clear_scaling() ;
  ::operations_research::math_opt::EmphasisProto scaling() const;
  void set_scaling(::operations_research::math_opt::EmphasisProto value);

  private:
  ::operations_research::math_opt::EmphasisProto _internal_scaling() const;
  void _internal_set_scaling(::operations_research::math_opt::EmphasisProto value);

  public:
  // optional double relative_gap_tolerance = 17;
  bool has_relative_gap_tolerance() const;
  void clear_relative_gap_tolerance() ;
  double relative_gap_tolerance() const;
  void set_relative_gap_tolerance(double value);

  private:
  double _internal_relative_gap_tolerance() const;
  void _internal_set_relative_gap_tolerance(double value);

  public:
  // optional double absolute_gap_tolerance = 18;
  bool has_absolute_gap_tolerance() const;
  void clear_absolute_gap_tolerance() ;
  double absolute_gap_tolerance() const;
  void set_absolute_gap_tolerance(double value);

  private:
  double _internal_absolute_gap_tolerance() const;
  void _internal_set_absolute_gap_tolerance(double value);

  public:
  // optional double cutoff_limit = 20;
  bool has_cutoff_limit() const;
  void clear_cutoff_limit() ;
  double cutoff_limit() const;
  void set_cutoff_limit(double value);

  private:
  double _internal_cutoff_limit() const;
  void _internal_set_cutoff_limit(double value);

  public:
  // optional double objective_limit = 21;
  bool has_objective_limit() const;
  void clear_objective_limit() ;
  double objective_limit() const;
  void set_objective_limit(double value);

  private:
  double _internal_objective_limit() const;
  void _internal_set_objective_limit(double value);

  public:
  // optional double best_bound_limit = 22;
  bool has_best_bound_limit() const;
  void clear_best_bound_limit() ;
  double best_bound_limit() const;
  void set_best_bound_limit(double value);

  private:
  double _internal_best_bound_limit() const;
  void _internal_set_best_bound_limit(double value);

  public:
  // optional int64 node_limit = 24;
  bool has_node_limit() const;
  void clear_node_limit() ;
  ::int64_t node_limit() const;
  void set_node_limit(::int64_t value);

  private:
  ::int64_t _internal_node_limit() const;
  void _internal_set_node_limit(::int64_t value);

  public:
  // optional int32 solution_limit = 23;
  bool has_solution_limit() const;
  void clear_solution_limit() ;
  ::int32_t solution_limit() const;
  void set_solution_limit(::int32_t value);

  private:
  ::int32_t _internal_solution_limit() const;
  void _internal_set_solution_limit(::int32_t value);

  public:
  // optional int32 solution_pool_size = 25;
  bool has_solution_pool_size() const;
  void clear_solution_pool_size() ;
  ::int32_t solution_pool_size() const;
  void set_solution_pool_size(::int32_t value);

  private:
  ::int32_t _internal_solution_pool_size() const;
  void _internal_set_solution_pool_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.math_opt.SolveParametersProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 24, 7,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Duration* time_limit_;
    ::operations_research::GScipParameters* gscip_;
    ::operations_research::math_opt::GurobiParametersProto* gurobi_;
    ::operations_research::glop::GlopParameters* glop_;
    ::operations_research::sat::SatParameters* cp_sat_;
    ::operations_research::math_opt::GlpkParametersProto* glpk_;
    ::operations_research::math_opt::HighsOptionsProto* highs_;
    ::int64_t iteration_limit_;
    bool enable_output_;
    ::int32_t threads_;
    ::int32_t random_seed_;
    int lp_algorithm_;
    int presolve_;
    int cuts_;
    int heuristics_;
    int scaling_;
    double relative_gap_tolerance_;
    double absolute_gap_tolerance_;
    double cutoff_limit_;
    double objective_limit_;
    double best_bound_limit_;
    ::int64_t node_limit_;
    ::int32_t solution_limit_;
    ::int32_t solution_pool_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fmath_5fopt_2fparameters_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// StrictnessProto

// bool bad_parameter = 1;
inline void StrictnessProto::clear_bad_parameter() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bad_parameter_ = false;
}
inline bool StrictnessProto::bad_parameter() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.StrictnessProto.bad_parameter)
  return _internal_bad_parameter();
}
inline void StrictnessProto::set_bad_parameter(bool value) {
  _internal_set_bad_parameter(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.StrictnessProto.bad_parameter)
}
inline bool StrictnessProto::_internal_bad_parameter() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bad_parameter_;
}
inline void StrictnessProto::_internal_set_bad_parameter(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bad_parameter_ = value;
}

// -------------------------------------------------------------------

// SolverInitializerProto

// .operations_research.math_opt.GurobiInitializerProto gurobi = 1;
inline bool SolverInitializerProto::has_gurobi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gurobi_ != nullptr);
  return value;
}
inline const ::operations_research::math_opt::GurobiInitializerProto& SolverInitializerProto::_internal_gurobi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::math_opt::GurobiInitializerProto* p = _impl_.gurobi_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::GurobiInitializerProto&>(::operations_research::math_opt::_GurobiInitializerProto_default_instance_);
}
inline const ::operations_research::math_opt::GurobiInitializerProto& SolverInitializerProto::gurobi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolverInitializerProto.gurobi)
  return _internal_gurobi();
}
inline void SolverInitializerProto::unsafe_arena_set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gurobi_);
  }
  _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiInitializerProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolverInitializerProto.gurobi)
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::release_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::math_opt::GurobiInitializerProto* released = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::unsafe_arena_release_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolverInitializerProto.gurobi)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::math_opt::GurobiInitializerProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::_internal_mutable_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.gurobi_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::GurobiInitializerProto>(GetArena());
    _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiInitializerProto*>(p);
  }
  return _impl_.gurobi_;
}
inline ::operations_research::math_opt::GurobiInitializerProto* SolverInitializerProto::mutable_gurobi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::math_opt::GurobiInitializerProto* _msg = _internal_mutable_gurobi();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolverInitializerProto.gurobi)
  return _msg;
}
inline void SolverInitializerProto::set_allocated_gurobi(::operations_research::math_opt::GurobiInitializerProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gurobi_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiInitializerProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolverInitializerProto.gurobi)
}

// -------------------------------------------------------------------

// SolveParametersProto

// .google.protobuf.Duration time_limit = 1;
inline bool SolveParametersProto::has_time_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_limit_ != nullptr);
  return value;
}
inline const ::google::protobuf::Duration& SolveParametersProto::_internal_time_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::google::protobuf::Duration* p = _impl_.time_limit_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Duration&>(::google::protobuf::_Duration_default_instance_);
}
inline const ::google::protobuf::Duration& SolveParametersProto::time_limit() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.time_limit)
  return _internal_time_limit();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_time_limit(::google::protobuf::Duration* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_limit_);
  }
  _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.time_limit)
}
inline ::google::protobuf::Duration* SolveParametersProto::release_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* released = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::google::protobuf::Duration* SolveParametersProto::unsafe_arena_release_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.time_limit)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Duration* temp = _impl_.time_limit_;
  _impl_.time_limit_ = nullptr;
  return temp;
}
inline ::google::protobuf::Duration* SolveParametersProto::_internal_mutable_time_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.time_limit_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Duration>(GetArena());
    _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(p);
  }
  return _impl_.time_limit_;
}
inline ::google::protobuf::Duration* SolveParametersProto::mutable_time_limit() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::Duration* _msg = _internal_mutable_time_limit();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.time_limit)
  return _msg;
}
inline void SolveParametersProto::set_allocated_time_limit(::google::protobuf::Duration* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_limit_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_limit_ = reinterpret_cast<::google::protobuf::Duration*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.time_limit)
}

// optional int64 iteration_limit = 2;
inline bool SolveParametersProto::has_iteration_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void SolveParametersProto::clear_iteration_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.iteration_limit_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int64_t SolveParametersProto::iteration_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.iteration_limit)
  return _internal_iteration_limit();
}
inline void SolveParametersProto::set_iteration_limit(::int64_t value) {
  _internal_set_iteration_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.iteration_limit)
}
inline ::int64_t SolveParametersProto::_internal_iteration_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.iteration_limit_;
}
inline void SolveParametersProto::_internal_set_iteration_limit(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.iteration_limit_ = value;
}

// optional int64 node_limit = 24;
inline bool SolveParametersProto::has_node_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_node_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_limit_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int64_t SolveParametersProto::node_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.node_limit)
  return _internal_node_limit();
}
inline void SolveParametersProto::set_node_limit(::int64_t value) {
  _internal_set_node_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.node_limit)
}
inline ::int64_t SolveParametersProto::_internal_node_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_limit_;
}
inline void SolveParametersProto::_internal_set_node_limit(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.node_limit_ = value;
}

// optional double cutoff_limit = 20;
inline bool SolveParametersProto::has_cutoff_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_cutoff_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cutoff_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double SolveParametersProto::cutoff_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cutoff_limit)
  return _internal_cutoff_limit();
}
inline void SolveParametersProto::set_cutoff_limit(double value) {
  _internal_set_cutoff_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.cutoff_limit)
}
inline double SolveParametersProto::_internal_cutoff_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.cutoff_limit_;
}
inline void SolveParametersProto::_internal_set_cutoff_limit(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.cutoff_limit_ = value;
}

// optional double objective_limit = 21;
inline bool SolveParametersProto::has_objective_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_objective_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double SolveParametersProto::objective_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.objective_limit)
  return _internal_objective_limit();
}
inline void SolveParametersProto::set_objective_limit(double value) {
  _internal_set_objective_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.objective_limit)
}
inline double SolveParametersProto::_internal_objective_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_limit_;
}
inline void SolveParametersProto::_internal_set_objective_limit(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.objective_limit_ = value;
}

// optional double best_bound_limit = 22;
inline bool SolveParametersProto::has_best_bound_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_best_bound_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.best_bound_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline double SolveParametersProto::best_bound_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.best_bound_limit)
  return _internal_best_bound_limit();
}
inline void SolveParametersProto::set_best_bound_limit(double value) {
  _internal_set_best_bound_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.best_bound_limit)
}
inline double SolveParametersProto::_internal_best_bound_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.best_bound_limit_;
}
inline void SolveParametersProto::_internal_set_best_bound_limit(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.best_bound_limit_ = value;
}

// optional int32 solution_limit = 23;
inline bool SolveParametersProto::has_solution_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_solution_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::int32_t SolveParametersProto::solution_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.solution_limit)
  return _internal_solution_limit();
}
inline void SolveParametersProto::set_solution_limit(::int32_t value) {
  _internal_set_solution_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.solution_limit)
}
inline ::int32_t SolveParametersProto::_internal_solution_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_limit_;
}
inline void SolveParametersProto::_internal_set_solution_limit(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.solution_limit_ = value;
}

// bool enable_output = 3;
inline void SolveParametersProto::clear_enable_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.enable_output_ = false;
}
inline bool SolveParametersProto::enable_output() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.enable_output)
  return _internal_enable_output();
}
inline void SolveParametersProto::set_enable_output(bool value) {
  _internal_set_enable_output(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.enable_output)
}
inline bool SolveParametersProto::_internal_enable_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.enable_output_;
}
inline void SolveParametersProto::_internal_set_enable_output(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.enable_output_ = value;
}

// optional int32 threads = 4;
inline bool SolveParametersProto::has_threads() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void SolveParametersProto::clear_threads() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.threads_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t SolveParametersProto::threads() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.threads)
  return _internal_threads();
}
inline void SolveParametersProto::set_threads(::int32_t value) {
  _internal_set_threads(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.threads)
}
inline ::int32_t SolveParametersProto::_internal_threads() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.threads_;
}
inline void SolveParametersProto::_internal_set_threads(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.threads_ = value;
}

// optional int32 random_seed = 5;
inline bool SolveParametersProto::has_random_seed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void SolveParametersProto::clear_random_seed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.random_seed_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t SolveParametersProto::random_seed() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.random_seed)
  return _internal_random_seed();
}
inline void SolveParametersProto::set_random_seed(::int32_t value) {
  _internal_set_random_seed(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.random_seed)
}
inline ::int32_t SolveParametersProto::_internal_random_seed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.random_seed_;
}
inline void SolveParametersProto::_internal_set_random_seed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.random_seed_ = value;
}

// optional double absolute_gap_tolerance = 18;
inline bool SolveParametersProto::has_absolute_gap_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void SolveParametersProto::clear_absolute_gap_tolerance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.absolute_gap_tolerance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double SolveParametersProto::absolute_gap_tolerance() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.absolute_gap_tolerance)
  return _internal_absolute_gap_tolerance();
}
inline void SolveParametersProto::set_absolute_gap_tolerance(double value) {
  _internal_set_absolute_gap_tolerance(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.absolute_gap_tolerance)
}
inline double SolveParametersProto::_internal_absolute_gap_tolerance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.absolute_gap_tolerance_;
}
inline void SolveParametersProto::_internal_set_absolute_gap_tolerance(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.absolute_gap_tolerance_ = value;
}

// optional double relative_gap_tolerance = 17;
inline bool SolveParametersProto::has_relative_gap_tolerance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void SolveParametersProto::clear_relative_gap_tolerance() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_gap_tolerance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double SolveParametersProto::relative_gap_tolerance() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.relative_gap_tolerance)
  return _internal_relative_gap_tolerance();
}
inline void SolveParametersProto::set_relative_gap_tolerance(double value) {
  _internal_set_relative_gap_tolerance(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.relative_gap_tolerance)
}
inline double SolveParametersProto::_internal_relative_gap_tolerance() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_gap_tolerance_;
}
inline void SolveParametersProto::_internal_set_relative_gap_tolerance(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.relative_gap_tolerance_ = value;
}

// optional int32 solution_pool_size = 25;
inline bool SolveParametersProto::has_solution_pool_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void SolveParametersProto::clear_solution_pool_size() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.solution_pool_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::int32_t SolveParametersProto::solution_pool_size() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.solution_pool_size)
  return _internal_solution_pool_size();
}
inline void SolveParametersProto::set_solution_pool_size(::int32_t value) {
  _internal_set_solution_pool_size(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.solution_pool_size)
}
inline ::int32_t SolveParametersProto::_internal_solution_pool_size() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.solution_pool_size_;
}
inline void SolveParametersProto::_internal_set_solution_pool_size(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.solution_pool_size_ = value;
}

// .operations_research.math_opt.LPAlgorithmProto lp_algorithm = 6;
inline void SolveParametersProto::clear_lp_algorithm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lp_algorithm_ = 0;
}
inline ::operations_research::math_opt::LPAlgorithmProto SolveParametersProto::lp_algorithm() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.lp_algorithm)
  return _internal_lp_algorithm();
}
inline void SolveParametersProto::set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value) {
  _internal_set_lp_algorithm(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.lp_algorithm)
}
inline ::operations_research::math_opt::LPAlgorithmProto SolveParametersProto::_internal_lp_algorithm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::math_opt::LPAlgorithmProto>(_impl_.lp_algorithm_);
}
inline void SolveParametersProto::_internal_set_lp_algorithm(::operations_research::math_opt::LPAlgorithmProto value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lp_algorithm_ = value;
}

// .operations_research.math_opt.EmphasisProto presolve = 7;
inline void SolveParametersProto::clear_presolve() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.presolve_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::presolve() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.presolve)
  return _internal_presolve();
}
inline void SolveParametersProto::set_presolve(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_presolve(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.presolve)
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_presolve() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::math_opt::EmphasisProto>(_impl_.presolve_);
}
inline void SolveParametersProto::_internal_set_presolve(::operations_research::math_opt::EmphasisProto value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.presolve_ = value;
}

// .operations_research.math_opt.EmphasisProto cuts = 8;
inline void SolveParametersProto::clear_cuts() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cuts_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::cuts() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cuts)
  return _internal_cuts();
}
inline void SolveParametersProto::set_cuts(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_cuts(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.cuts)
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_cuts() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::math_opt::EmphasisProto>(_impl_.cuts_);
}
inline void SolveParametersProto::_internal_set_cuts(::operations_research::math_opt::EmphasisProto value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cuts_ = value;
}

// .operations_research.math_opt.EmphasisProto heuristics = 9;
inline void SolveParametersProto::clear_heuristics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heuristics_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::heuristics() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.heuristics)
  return _internal_heuristics();
}
inline void SolveParametersProto::set_heuristics(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_heuristics(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.heuristics)
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_heuristics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::math_opt::EmphasisProto>(_impl_.heuristics_);
}
inline void SolveParametersProto::_internal_set_heuristics(::operations_research::math_opt::EmphasisProto value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.heuristics_ = value;
}

// .operations_research.math_opt.EmphasisProto scaling = 10;
inline void SolveParametersProto::clear_scaling() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scaling_ = 0;
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::scaling() const {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.scaling)
  return _internal_scaling();
}
inline void SolveParametersProto::set_scaling(::operations_research::math_opt::EmphasisProto value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:operations_research.math_opt.SolveParametersProto.scaling)
}
inline ::operations_research::math_opt::EmphasisProto SolveParametersProto::_internal_scaling() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::math_opt::EmphasisProto>(_impl_.scaling_);
}
inline void SolveParametersProto::_internal_set_scaling(::operations_research::math_opt::EmphasisProto value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scaling_ = value;
}

// .operations_research.GScipParameters gscip = 12;
inline bool SolveParametersProto::has_gscip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gscip_ != nullptr);
  return value;
}
inline const ::operations_research::GScipParameters& SolveParametersProto::_internal_gscip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::GScipParameters* p = _impl_.gscip_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::GScipParameters&>(::operations_research::_GScipParameters_default_instance_);
}
inline const ::operations_research::GScipParameters& SolveParametersProto::gscip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.gscip)
  return _internal_gscip();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_gscip(::operations_research::GScipParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gscip_);
  }
  _impl_.gscip_ = reinterpret_cast<::operations_research::GScipParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.gscip)
}
inline ::operations_research::GScipParameters* SolveParametersProto::release_gscip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::GScipParameters* released = _impl_.gscip_;
  _impl_.gscip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::GScipParameters* SolveParametersProto::unsafe_arena_release_gscip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.gscip)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::operations_research::GScipParameters* temp = _impl_.gscip_;
  _impl_.gscip_ = nullptr;
  return temp;
}
inline ::operations_research::GScipParameters* SolveParametersProto::_internal_mutable_gscip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gscip_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::GScipParameters>(GetArena());
    _impl_.gscip_ = reinterpret_cast<::operations_research::GScipParameters*>(p);
  }
  return _impl_.gscip_;
}
inline ::operations_research::GScipParameters* SolveParametersProto::mutable_gscip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::GScipParameters* _msg = _internal_mutable_gscip();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.gscip)
  return _msg;
}
inline void SolveParametersProto::set_allocated_gscip(::operations_research::GScipParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gscip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.gscip_ = reinterpret_cast<::operations_research::GScipParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.gscip)
}

// .operations_research.math_opt.GurobiParametersProto gurobi = 13;
inline bool SolveParametersProto::has_gurobi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gurobi_ != nullptr);
  return value;
}
inline const ::operations_research::math_opt::GurobiParametersProto& SolveParametersProto::_internal_gurobi() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::math_opt::GurobiParametersProto* p = _impl_.gurobi_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::GurobiParametersProto&>(::operations_research::math_opt::_GurobiParametersProto_default_instance_);
}
inline const ::operations_research::math_opt::GurobiParametersProto& SolveParametersProto::gurobi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.gurobi)
  return _internal_gurobi();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gurobi_);
  }
  _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiParametersProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.gurobi)
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::release_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::math_opt::GurobiParametersProto* released = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::unsafe_arena_release_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.gurobi)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::operations_research::math_opt::GurobiParametersProto* temp = _impl_.gurobi_;
  _impl_.gurobi_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::_internal_mutable_gurobi() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.gurobi_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::GurobiParametersProto>(GetArena());
    _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiParametersProto*>(p);
  }
  return _impl_.gurobi_;
}
inline ::operations_research::math_opt::GurobiParametersProto* SolveParametersProto::mutable_gurobi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::math_opt::GurobiParametersProto* _msg = _internal_mutable_gurobi();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.gurobi)
  return _msg;
}
inline void SolveParametersProto::set_allocated_gurobi(::operations_research::math_opt::GurobiParametersProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.gurobi_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.gurobi_ = reinterpret_cast<::operations_research::math_opt::GurobiParametersProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.gurobi)
}

// .operations_research.glop.GlopParameters glop = 14;
inline bool SolveParametersProto::has_glop() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.glop_ != nullptr);
  return value;
}
inline const ::operations_research::glop::GlopParameters& SolveParametersProto::_internal_glop() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::glop::GlopParameters* p = _impl_.glop_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::glop::GlopParameters&>(::operations_research::glop::_GlopParameters_default_instance_);
}
inline const ::operations_research::glop::GlopParameters& SolveParametersProto::glop() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.glop)
  return _internal_glop();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_glop(::operations_research::glop::GlopParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.glop_);
  }
  _impl_.glop_ = reinterpret_cast<::operations_research::glop::GlopParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.glop)
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::release_glop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::glop::GlopParameters* released = _impl_.glop_;
  _impl_.glop_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::unsafe_arena_release_glop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.glop)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::operations_research::glop::GlopParameters* temp = _impl_.glop_;
  _impl_.glop_ = nullptr;
  return temp;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::_internal_mutable_glop() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.glop_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::glop::GlopParameters>(GetArena());
    _impl_.glop_ = reinterpret_cast<::operations_research::glop::GlopParameters*>(p);
  }
  return _impl_.glop_;
}
inline ::operations_research::glop::GlopParameters* SolveParametersProto::mutable_glop() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::glop::GlopParameters* _msg = _internal_mutable_glop();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.glop)
  return _msg;
}
inline void SolveParametersProto::set_allocated_glop(::operations_research::glop::GlopParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.glop_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.glop_ = reinterpret_cast<::operations_research::glop::GlopParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.glop)
}

// .operations_research.sat.SatParameters cp_sat = 15;
inline bool SolveParametersProto::has_cp_sat() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cp_sat_ != nullptr);
  return value;
}
inline const ::operations_research::sat::SatParameters& SolveParametersProto::_internal_cp_sat() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::sat::SatParameters* p = _impl_.cp_sat_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::sat::SatParameters&>(::operations_research::sat::_SatParameters_default_instance_);
}
inline const ::operations_research::sat::SatParameters& SolveParametersProto::cp_sat() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.cp_sat)
  return _internal_cp_sat();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_cp_sat(::operations_research::sat::SatParameters* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cp_sat_);
  }
  _impl_.cp_sat_ = reinterpret_cast<::operations_research::sat::SatParameters*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.cp_sat)
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::release_cp_sat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::sat::SatParameters* released = _impl_.cp_sat_;
  _impl_.cp_sat_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::unsafe_arena_release_cp_sat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.cp_sat)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::operations_research::sat::SatParameters* temp = _impl_.cp_sat_;
  _impl_.cp_sat_ = nullptr;
  return temp;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::_internal_mutable_cp_sat() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.cp_sat_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::sat::SatParameters>(GetArena());
    _impl_.cp_sat_ = reinterpret_cast<::operations_research::sat::SatParameters*>(p);
  }
  return _impl_.cp_sat_;
}
inline ::operations_research::sat::SatParameters* SolveParametersProto::mutable_cp_sat() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::sat::SatParameters* _msg = _internal_mutable_cp_sat();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.cp_sat)
  return _msg;
}
inline void SolveParametersProto::set_allocated_cp_sat(::operations_research::sat::SatParameters* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cp_sat_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.cp_sat_ = reinterpret_cast<::operations_research::sat::SatParameters*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.cp_sat)
}

// .operations_research.math_opt.GlpkParametersProto glpk = 26;
inline bool SolveParametersProto::has_glpk() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.glpk_ != nullptr);
  return value;
}
inline const ::operations_research::math_opt::GlpkParametersProto& SolveParametersProto::_internal_glpk() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::math_opt::GlpkParametersProto* p = _impl_.glpk_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::GlpkParametersProto&>(::operations_research::math_opt::_GlpkParametersProto_default_instance_);
}
inline const ::operations_research::math_opt::GlpkParametersProto& SolveParametersProto::glpk() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.glpk)
  return _internal_glpk();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_glpk(::operations_research::math_opt::GlpkParametersProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.glpk_);
  }
  _impl_.glpk_ = reinterpret_cast<::operations_research::math_opt::GlpkParametersProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.glpk)
}
inline ::operations_research::math_opt::GlpkParametersProto* SolveParametersProto::release_glpk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::math_opt::GlpkParametersProto* released = _impl_.glpk_;
  _impl_.glpk_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::math_opt::GlpkParametersProto* SolveParametersProto::unsafe_arena_release_glpk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.glpk)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::operations_research::math_opt::GlpkParametersProto* temp = _impl_.glpk_;
  _impl_.glpk_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::GlpkParametersProto* SolveParametersProto::_internal_mutable_glpk() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.glpk_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::GlpkParametersProto>(GetArena());
    _impl_.glpk_ = reinterpret_cast<::operations_research::math_opt::GlpkParametersProto*>(p);
  }
  return _impl_.glpk_;
}
inline ::operations_research::math_opt::GlpkParametersProto* SolveParametersProto::mutable_glpk() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::math_opt::GlpkParametersProto* _msg = _internal_mutable_glpk();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.glpk)
  return _msg;
}
inline void SolveParametersProto::set_allocated_glpk(::operations_research::math_opt::GlpkParametersProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.glpk_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.glpk_ = reinterpret_cast<::operations_research::math_opt::GlpkParametersProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.glpk)
}

// .operations_research.math_opt.HighsOptionsProto highs = 27;
inline bool SolveParametersProto::has_highs() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.highs_ != nullptr);
  return value;
}
inline const ::operations_research::math_opt::HighsOptionsProto& SolveParametersProto::_internal_highs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::math_opt::HighsOptionsProto* p = _impl_.highs_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::math_opt::HighsOptionsProto&>(::operations_research::math_opt::_HighsOptionsProto_default_instance_);
}
inline const ::operations_research::math_opt::HighsOptionsProto& SolveParametersProto::highs() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.math_opt.SolveParametersProto.highs)
  return _internal_highs();
}
inline void SolveParametersProto::unsafe_arena_set_allocated_highs(::operations_research::math_opt::HighsOptionsProto* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.highs_);
  }
  _impl_.highs_ = reinterpret_cast<::operations_research::math_opt::HighsOptionsProto*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.math_opt.SolveParametersProto.highs)
}
inline ::operations_research::math_opt::HighsOptionsProto* SolveParametersProto::release_highs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::operations_research::math_opt::HighsOptionsProto* released = _impl_.highs_;
  _impl_.highs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::math_opt::HighsOptionsProto* SolveParametersProto::unsafe_arena_release_highs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.math_opt.SolveParametersProto.highs)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::operations_research::math_opt::HighsOptionsProto* temp = _impl_.highs_;
  _impl_.highs_ = nullptr;
  return temp;
}
inline ::operations_research::math_opt::HighsOptionsProto* SolveParametersProto::_internal_mutable_highs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.highs_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::math_opt::HighsOptionsProto>(GetArena());
    _impl_.highs_ = reinterpret_cast<::operations_research::math_opt::HighsOptionsProto*>(p);
  }
  return _impl_.highs_;
}
inline ::operations_research::math_opt::HighsOptionsProto* SolveParametersProto::mutable_highs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::math_opt::HighsOptionsProto* _msg = _internal_mutable_highs();
  // @@protoc_insertion_point(field_mutable:operations_research.math_opt.SolveParametersProto.highs)
  return _msg;
}
inline void SolveParametersProto::set_allocated_highs(::operations_research::math_opt::HighsOptionsProto* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.highs_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.highs_ = reinterpret_cast<::operations_research::math_opt::HighsOptionsProto*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.math_opt.SolveParametersProto.highs)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace math_opt
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::math_opt::SolverTypeProto> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::math_opt::SolverTypeProto>() {
  return ::operations_research::math_opt::SolverTypeProto_descriptor();
}
template <>
struct is_proto_enum<::operations_research::math_opt::LPAlgorithmProto> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::math_opt::LPAlgorithmProto>() {
  return ::operations_research::math_opt::LPAlgorithmProto_descriptor();
}
template <>
struct is_proto_enum<::operations_research::math_opt::EmphasisProto> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::math_opt::EmphasisProto>() {
  return ::operations_research::math_opt::EmphasisProto_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fmath_5fopt_2fparameters_2eproto_2epb_2eh
