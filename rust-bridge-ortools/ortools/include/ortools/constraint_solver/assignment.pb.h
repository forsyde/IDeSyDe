// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/assignment.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2fassignment_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
namespace operations_research {
class AssignmentProto;
struct AssignmentProtoDefaultTypeInternal;
extern AssignmentProtoDefaultTypeInternal _AssignmentProto_default_instance_;
class IntVarAssignment;
struct IntVarAssignmentDefaultTypeInternal;
extern IntVarAssignmentDefaultTypeInternal _IntVarAssignment_default_instance_;
class IntervalVarAssignment;
struct IntervalVarAssignmentDefaultTypeInternal;
extern IntervalVarAssignmentDefaultTypeInternal _IntervalVarAssignment_default_instance_;
class SequenceVarAssignment;
struct SequenceVarAssignmentDefaultTypeInternal;
extern SequenceVarAssignmentDefaultTypeInternal _SequenceVarAssignment_default_instance_;
class WorkerInfo;
struct WorkerInfoDefaultTypeInternal;
extern WorkerInfoDefaultTypeInternal _WorkerInfo_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {

// ===================================================================


// -------------------------------------------------------------------

class WorkerInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.WorkerInfo) */ {
 public:
  inline WorkerInfo() : WorkerInfo(nullptr) {}
  ~WorkerInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR WorkerInfo(::google::protobuf::internal::ConstantInitialized);

  inline WorkerInfo(const WorkerInfo& from)
      : WorkerInfo(nullptr, from) {}
  WorkerInfo(WorkerInfo&& from) noexcept
    : WorkerInfo() {
    *this = ::std::move(from);
  }

  inline WorkerInfo& operator=(const WorkerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorkerInfo& operator=(WorkerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorkerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorkerInfo* internal_default_instance() {
    return reinterpret_cast<const WorkerInfo*>(
               &_WorkerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WorkerInfo& a, WorkerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WorkerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorkerInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorkerInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorkerInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const WorkerInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const WorkerInfo& from) {
    WorkerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(WorkerInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.WorkerInfo";
  }
  protected:
  explicit WorkerInfo(::google::protobuf::Arena* arena);
  WorkerInfo(::google::protobuf::Arena* arena, const WorkerInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBnsFieldNumber = 2,
    kWorkerIdFieldNumber = 1,
  };
  // string bns = 2;
  void clear_bns() ;
  const std::string& bns() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bns(Arg_&& arg, Args_... args);
  std::string* mutable_bns();
  PROTOBUF_NODISCARD std::string* release_bns();
  void set_allocated_bns(std::string* value);

  private:
  const std::string& _internal_bns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bns(
      const std::string& value);
  std::string* _internal_mutable_bns();

  public:
  // int32 worker_id = 1;
  void clear_worker_id() ;
  ::int32_t worker_id() const;
  void set_worker_id(::int32_t value);

  private:
  ::int32_t _internal_worker_id() const;
  void _internal_set_worker_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.WorkerInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr bns_;
    ::int32_t worker_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};// -------------------------------------------------------------------

class SequenceVarAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.SequenceVarAssignment) */ {
 public:
  inline SequenceVarAssignment() : SequenceVarAssignment(nullptr) {}
  ~SequenceVarAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SequenceVarAssignment(::google::protobuf::internal::ConstantInitialized);

  inline SequenceVarAssignment(const SequenceVarAssignment& from)
      : SequenceVarAssignment(nullptr, from) {}
  SequenceVarAssignment(SequenceVarAssignment&& from) noexcept
    : SequenceVarAssignment() {
    *this = ::std::move(from);
  }

  inline SequenceVarAssignment& operator=(const SequenceVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline SequenceVarAssignment& operator=(SequenceVarAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SequenceVarAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const SequenceVarAssignment* internal_default_instance() {
    return reinterpret_cast<const SequenceVarAssignment*>(
               &_SequenceVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SequenceVarAssignment& a, SequenceVarAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(SequenceVarAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SequenceVarAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SequenceVarAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SequenceVarAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SequenceVarAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SequenceVarAssignment& from) {
    SequenceVarAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SequenceVarAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.SequenceVarAssignment";
  }
  protected:
  explicit SequenceVarAssignment(::google::protobuf::Arena* arena);
  SequenceVarAssignment(::google::protobuf::Arena* arena, const SequenceVarAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForwardSequenceFieldNumber = 2,
    kBackwardSequenceFieldNumber = 3,
    kUnperformedFieldNumber = 4,
    kVarIdFieldNumber = 1,
    kActiveFieldNumber = 5,
  };
  // repeated int32 forward_sequence = 2;
  int forward_sequence_size() const;
  private:
  int _internal_forward_sequence_size() const;

  public:
  void clear_forward_sequence() ;
  ::int32_t forward_sequence(int index) const;
  void set_forward_sequence(int index, ::int32_t value);
  void add_forward_sequence(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& forward_sequence() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_forward_sequence();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_forward_sequence() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_forward_sequence();

  public:
  // repeated int32 backward_sequence = 3;
  int backward_sequence_size() const;
  private:
  int _internal_backward_sequence_size() const;

  public:
  void clear_backward_sequence() ;
  ::int32_t backward_sequence(int index) const;
  void set_backward_sequence(int index, ::int32_t value);
  void add_backward_sequence(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& backward_sequence() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_backward_sequence();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_backward_sequence() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_backward_sequence();

  public:
  // repeated int32 unperformed = 4;
  int unperformed_size() const;
  private:
  int _internal_unperformed_size() const;

  public:
  void clear_unperformed() ;
  ::int32_t unperformed(int index) const;
  void set_unperformed(int index, ::int32_t value);
  void add_unperformed(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& unperformed() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_unperformed();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_unperformed() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_unperformed();

  public:
  // string var_id = 1;
  void clear_var_id() ;
  const std::string& var_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_var_id(Arg_&& arg, Args_... args);
  std::string* mutable_var_id();
  PROTOBUF_NODISCARD std::string* release_var_id();
  void set_allocated_var_id(std::string* value);

  private:
  const std::string& _internal_var_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_id(
      const std::string& value);
  std::string* _internal_mutable_var_id();

  public:
  // bool active = 5;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.SequenceVarAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedField<::int32_t> forward_sequence_;
    mutable ::google::protobuf::internal::CachedSize _forward_sequence_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> backward_sequence_;
    mutable ::google::protobuf::internal::CachedSize _backward_sequence_cached_byte_size_;
    ::google::protobuf::RepeatedField<::int32_t> unperformed_;
    mutable ::google::protobuf::internal::CachedSize _unperformed_cached_byte_size_;
    ::google::protobuf::internal::ArenaStringPtr var_id_;
    bool active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};// -------------------------------------------------------------------

class IntervalVarAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.IntervalVarAssignment) */ {
 public:
  inline IntervalVarAssignment() : IntervalVarAssignment(nullptr) {}
  ~IntervalVarAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntervalVarAssignment(::google::protobuf::internal::ConstantInitialized);

  inline IntervalVarAssignment(const IntervalVarAssignment& from)
      : IntervalVarAssignment(nullptr, from) {}
  IntervalVarAssignment(IntervalVarAssignment&& from) noexcept
    : IntervalVarAssignment() {
    *this = ::std::move(from);
  }

  inline IntervalVarAssignment& operator=(const IntervalVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntervalVarAssignment& operator=(IntervalVarAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntervalVarAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntervalVarAssignment* internal_default_instance() {
    return reinterpret_cast<const IntervalVarAssignment*>(
               &_IntervalVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntervalVarAssignment& a, IntervalVarAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(IntervalVarAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntervalVarAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntervalVarAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntervalVarAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntervalVarAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntervalVarAssignment& from) {
    IntervalVarAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntervalVarAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.IntervalVarAssignment";
  }
  protected:
  explicit IntervalVarAssignment(::google::protobuf::Arena* arena);
  IntervalVarAssignment(::google::protobuf::Arena* arena, const IntervalVarAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 1,
    kStartMinFieldNumber = 2,
    kStartMaxFieldNumber = 3,
    kDurationMinFieldNumber = 4,
    kDurationMaxFieldNumber = 5,
    kEndMinFieldNumber = 6,
    kEndMaxFieldNumber = 7,
    kPerformedMinFieldNumber = 8,
    kPerformedMaxFieldNumber = 9,
    kActiveFieldNumber = 10,
  };
  // string var_id = 1;
  void clear_var_id() ;
  const std::string& var_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_var_id(Arg_&& arg, Args_... args);
  std::string* mutable_var_id();
  PROTOBUF_NODISCARD std::string* release_var_id();
  void set_allocated_var_id(std::string* value);

  private:
  const std::string& _internal_var_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_id(
      const std::string& value);
  std::string* _internal_mutable_var_id();

  public:
  // int64 start_min = 2;
  void clear_start_min() ;
  ::int64_t start_min() const;
  void set_start_min(::int64_t value);

  private:
  ::int64_t _internal_start_min() const;
  void _internal_set_start_min(::int64_t value);

  public:
  // int64 start_max = 3;
  void clear_start_max() ;
  ::int64_t start_max() const;
  void set_start_max(::int64_t value);

  private:
  ::int64_t _internal_start_max() const;
  void _internal_set_start_max(::int64_t value);

  public:
  // int64 duration_min = 4;
  void clear_duration_min() ;
  ::int64_t duration_min() const;
  void set_duration_min(::int64_t value);

  private:
  ::int64_t _internal_duration_min() const;
  void _internal_set_duration_min(::int64_t value);

  public:
  // int64 duration_max = 5;
  void clear_duration_max() ;
  ::int64_t duration_max() const;
  void set_duration_max(::int64_t value);

  private:
  ::int64_t _internal_duration_max() const;
  void _internal_set_duration_max(::int64_t value);

  public:
  // int64 end_min = 6;
  void clear_end_min() ;
  ::int64_t end_min() const;
  void set_end_min(::int64_t value);

  private:
  ::int64_t _internal_end_min() const;
  void _internal_set_end_min(::int64_t value);

  public:
  // int64 end_max = 7;
  void clear_end_max() ;
  ::int64_t end_max() const;
  void set_end_max(::int64_t value);

  private:
  ::int64_t _internal_end_max() const;
  void _internal_set_end_max(::int64_t value);

  public:
  // int64 performed_min = 8;
  void clear_performed_min() ;
  ::int64_t performed_min() const;
  void set_performed_min(::int64_t value);

  private:
  ::int64_t _internal_performed_min() const;
  void _internal_set_performed_min(::int64_t value);

  public:
  // int64 performed_max = 9;
  void clear_performed_max() ;
  ::int64_t performed_max() const;
  void set_performed_max(::int64_t value);

  private:
  ::int64_t _internal_performed_max() const;
  void _internal_set_performed_max(::int64_t value);

  public:
  // bool active = 10;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.IntervalVarAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 0,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr var_id_;
    ::int64_t start_min_;
    ::int64_t start_max_;
    ::int64_t duration_min_;
    ::int64_t duration_max_;
    ::int64_t end_min_;
    ::int64_t end_max_;
    ::int64_t performed_min_;
    ::int64_t performed_max_;
    bool active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};// -------------------------------------------------------------------

class IntVarAssignment final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.IntVarAssignment) */ {
 public:
  inline IntVarAssignment() : IntVarAssignment(nullptr) {}
  ~IntVarAssignment() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR IntVarAssignment(::google::protobuf::internal::ConstantInitialized);

  inline IntVarAssignment(const IntVarAssignment& from)
      : IntVarAssignment(nullptr, from) {}
  IntVarAssignment(IntVarAssignment&& from) noexcept
    : IntVarAssignment() {
    *this = ::std::move(from);
  }

  inline IntVarAssignment& operator=(const IntVarAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntVarAssignment& operator=(IntVarAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntVarAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntVarAssignment* internal_default_instance() {
    return reinterpret_cast<const IntVarAssignment*>(
               &_IntVarAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IntVarAssignment& a, IntVarAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(IntVarAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntVarAssignment* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntVarAssignment* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntVarAssignment>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IntVarAssignment& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const IntVarAssignment& from) {
    IntVarAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(IntVarAssignment* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.IntVarAssignment";
  }
  protected:
  explicit IntVarAssignment(::google::protobuf::Arena* arena);
  IntVarAssignment(::google::protobuf::Arena* arena, const IntVarAssignment& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVarIdFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
    kActiveFieldNumber = 4,
  };
  // string var_id = 1;
  void clear_var_id() ;
  const std::string& var_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_var_id(Arg_&& arg, Args_... args);
  std::string* mutable_var_id();
  PROTOBUF_NODISCARD std::string* release_var_id();
  void set_allocated_var_id(std::string* value);

  private:
  const std::string& _internal_var_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_var_id(
      const std::string& value);
  std::string* _internal_mutable_var_id();

  public:
  // int64 min = 2;
  void clear_min() ;
  ::int64_t min() const;
  void set_min(::int64_t value);

  private:
  ::int64_t _internal_min() const;
  void _internal_set_min(::int64_t value);

  public:
  // int64 max = 3;
  void clear_max() ;
  ::int64_t max() const;
  void set_max(::int64_t value);

  private:
  ::int64_t _internal_max() const;
  void _internal_set_max(::int64_t value);

  public:
  // bool active = 4;
  void clear_active() ;
  bool active() const;
  void set_active(bool value);

  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.IntVarAssignment)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      51, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr var_id_;
    ::int64_t min_;
    ::int64_t max_;
    bool active_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};// -------------------------------------------------------------------

class AssignmentProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.AssignmentProto) */ {
 public:
  inline AssignmentProto() : AssignmentProto(nullptr) {}
  ~AssignmentProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR AssignmentProto(::google::protobuf::internal::ConstantInitialized);

  inline AssignmentProto(const AssignmentProto& from)
      : AssignmentProto(nullptr, from) {}
  AssignmentProto(AssignmentProto&& from) noexcept
    : AssignmentProto() {
    *this = ::std::move(from);
  }

  inline AssignmentProto& operator=(const AssignmentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignmentProto& operator=(AssignmentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignmentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignmentProto* internal_default_instance() {
    return reinterpret_cast<const AssignmentProto*>(
               &_AssignmentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AssignmentProto& a, AssignmentProto& b) {
    a.Swap(&b);
  }
  inline void Swap(AssignmentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignmentProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignmentProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AssignmentProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssignmentProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const AssignmentProto& from) {
    AssignmentProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssignmentProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.AssignmentProto";
  }
  protected:
  explicit AssignmentProto(::google::protobuf::Arena* arena);
  AssignmentProto(::google::protobuf::Arena* arena, const AssignmentProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntVarAssignmentFieldNumber = 1,
    kIntervalVarAssignmentFieldNumber = 2,
    kObjectiveFieldNumber = 3,
    kSequenceVarAssignmentFieldNumber = 6,
    kWorkerInfoFieldNumber = 4,
    kIsValidFieldNumber = 5,
  };
  // repeated .operations_research.IntVarAssignment int_var_assignment = 1;
  int int_var_assignment_size() const;
  private:
  int _internal_int_var_assignment_size() const;

  public:
  void clear_int_var_assignment() ;
  ::operations_research::IntVarAssignment* mutable_int_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >*
      mutable_int_var_assignment();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>& _internal_int_var_assignment() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>* _internal_mutable_int_var_assignment();
  public:
  const ::operations_research::IntVarAssignment& int_var_assignment(int index) const;
  ::operations_research::IntVarAssignment* add_int_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >&
      int_var_assignment() const;
  // repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
  int interval_var_assignment_size() const;
  private:
  int _internal_interval_var_assignment_size() const;

  public:
  void clear_interval_var_assignment() ;
  ::operations_research::IntervalVarAssignment* mutable_interval_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >*
      mutable_interval_var_assignment();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>& _internal_interval_var_assignment() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>* _internal_mutable_interval_var_assignment();
  public:
  const ::operations_research::IntervalVarAssignment& interval_var_assignment(int index) const;
  ::operations_research::IntervalVarAssignment* add_interval_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment >&
      interval_var_assignment() const;
  // repeated .operations_research.IntVarAssignment objective = 3;
  int objective_size() const;
  private:
  int _internal_objective_size() const;

  public:
  void clear_objective() ;
  ::operations_research::IntVarAssignment* mutable_objective(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >*
      mutable_objective();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>& _internal_objective() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>* _internal_mutable_objective();
  public:
  const ::operations_research::IntVarAssignment& objective(int index) const;
  ::operations_research::IntVarAssignment* add_objective();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment >&
      objective() const;
  // repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
  int sequence_var_assignment_size() const;
  private:
  int _internal_sequence_var_assignment_size() const;

  public:
  void clear_sequence_var_assignment() ;
  ::operations_research::SequenceVarAssignment* mutable_sequence_var_assignment(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >*
      mutable_sequence_var_assignment();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>& _internal_sequence_var_assignment() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>* _internal_mutable_sequence_var_assignment();
  public:
  const ::operations_research::SequenceVarAssignment& sequence_var_assignment(int index) const;
  ::operations_research::SequenceVarAssignment* add_sequence_var_assignment();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment >&
      sequence_var_assignment() const;
  // .operations_research.WorkerInfo worker_info = 4;
  bool has_worker_info() const;
  void clear_worker_info() ;
  const ::operations_research::WorkerInfo& worker_info() const;
  PROTOBUF_NODISCARD ::operations_research::WorkerInfo* release_worker_info();
  ::operations_research::WorkerInfo* mutable_worker_info();
  void set_allocated_worker_info(::operations_research::WorkerInfo* value);
  void unsafe_arena_set_allocated_worker_info(::operations_research::WorkerInfo* value);
  ::operations_research::WorkerInfo* unsafe_arena_release_worker_info();

  private:
  const ::operations_research::WorkerInfo& _internal_worker_info() const;
  ::operations_research::WorkerInfo* _internal_mutable_worker_info();

  public:
  // bool is_valid = 5;
  void clear_is_valid() ;
  bool is_valid() const;
  void set_is_valid(bool value);

  private:
  bool _internal_is_valid() const;
  void _internal_set_is_valid(bool value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.AssignmentProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment > int_var_assignment_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::IntervalVarAssignment > interval_var_assignment_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::IntVarAssignment > objective_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::SequenceVarAssignment > sequence_var_assignment_;
    ::operations_research::WorkerInfo* worker_info_;
    bool is_valid_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2fassignment_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// IntVarAssignment

// string var_id = 1;
inline void IntVarAssignment::clear_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.ClearToEmpty();
}
inline const std::string& IntVarAssignment::var_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.var_id)
  return _internal_var_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntVarAssignment::set_var_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.var_id)
}
inline std::string* IntVarAssignment::mutable_var_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_var_id();
  // @@protoc_insertion_point(field_mutable:operations_research.IntVarAssignment.var_id)
  return _s;
}
inline const std::string& IntVarAssignment::_internal_var_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.var_id_.Get();
}
inline void IntVarAssignment::_internal_set_var_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(value, GetArena());
}
inline std::string* IntVarAssignment::_internal_mutable_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.var_id_.Mutable( GetArena());
}
inline std::string* IntVarAssignment::release_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.IntVarAssignment.var_id)
  return _impl_.var_id_.Release();
}
inline void IntVarAssignment::set_allocated_var_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.var_id_.IsDefault()) {
          _impl_.var_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.IntVarAssignment.var_id)
}

// int64 min = 2;
inline void IntVarAssignment::clear_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.min_ = ::int64_t{0};
}
inline ::int64_t IntVarAssignment::min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.min)
  return _internal_min();
}
inline void IntVarAssignment::set_min(::int64_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.min)
}
inline ::int64_t IntVarAssignment::_internal_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.min_;
}
inline void IntVarAssignment::_internal_set_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.min_ = value;
}

// int64 max = 3;
inline void IntVarAssignment::clear_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.max_ = ::int64_t{0};
}
inline ::int64_t IntVarAssignment::max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.max)
  return _internal_max();
}
inline void IntVarAssignment::set_max(::int64_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.max)
}
inline ::int64_t IntVarAssignment::_internal_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.max_;
}
inline void IntVarAssignment::_internal_set_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.max_ = value;
}

// bool active = 4;
inline void IntVarAssignment::clear_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_ = false;
}
inline bool IntVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.IntVarAssignment.active)
  return _internal_active();
}
inline void IntVarAssignment::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:operations_research.IntVarAssignment.active)
}
inline bool IntVarAssignment::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void IntVarAssignment::_internal_set_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// IntervalVarAssignment

// string var_id = 1;
inline void IntervalVarAssignment::clear_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.ClearToEmpty();
}
inline const std::string& IntervalVarAssignment::var_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.var_id)
  return _internal_var_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntervalVarAssignment::set_var_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.var_id)
}
inline std::string* IntervalVarAssignment::mutable_var_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_var_id();
  // @@protoc_insertion_point(field_mutable:operations_research.IntervalVarAssignment.var_id)
  return _s;
}
inline const std::string& IntervalVarAssignment::_internal_var_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.var_id_.Get();
}
inline void IntervalVarAssignment::_internal_set_var_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(value, GetArena());
}
inline std::string* IntervalVarAssignment::_internal_mutable_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.var_id_.Mutable( GetArena());
}
inline std::string* IntervalVarAssignment::release_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.IntervalVarAssignment.var_id)
  return _impl_.var_id_.Release();
}
inline void IntervalVarAssignment::set_allocated_var_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.var_id_.IsDefault()) {
          _impl_.var_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.IntervalVarAssignment.var_id)
}

// int64 start_min = 2;
inline void IntervalVarAssignment::clear_start_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_min_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::start_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.start_min)
  return _internal_start_min();
}
inline void IntervalVarAssignment::set_start_min(::int64_t value) {
  _internal_set_start_min(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.start_min)
}
inline ::int64_t IntervalVarAssignment::_internal_start_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_min_;
}
inline void IntervalVarAssignment::_internal_set_start_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_min_ = value;
}

// int64 start_max = 3;
inline void IntervalVarAssignment::clear_start_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_max_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::start_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.start_max)
  return _internal_start_max();
}
inline void IntervalVarAssignment::set_start_max(::int64_t value) {
  _internal_set_start_max(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.start_max)
}
inline ::int64_t IntervalVarAssignment::_internal_start_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_max_;
}
inline void IntervalVarAssignment::_internal_set_start_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_max_ = value;
}

// int64 duration_min = 4;
inline void IntervalVarAssignment::clear_duration_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_min_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::duration_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.duration_min)
  return _internal_duration_min();
}
inline void IntervalVarAssignment::set_duration_min(::int64_t value) {
  _internal_set_duration_min(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.duration_min)
}
inline ::int64_t IntervalVarAssignment::_internal_duration_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_min_;
}
inline void IntervalVarAssignment::_internal_set_duration_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.duration_min_ = value;
}

// int64 duration_max = 5;
inline void IntervalVarAssignment::clear_duration_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.duration_max_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::duration_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.duration_max)
  return _internal_duration_max();
}
inline void IntervalVarAssignment::set_duration_max(::int64_t value) {
  _internal_set_duration_max(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.duration_max)
}
inline ::int64_t IntervalVarAssignment::_internal_duration_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.duration_max_;
}
inline void IntervalVarAssignment::_internal_set_duration_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.duration_max_ = value;
}

// int64 end_min = 6;
inline void IntervalVarAssignment::clear_end_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_min_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::end_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.end_min)
  return _internal_end_min();
}
inline void IntervalVarAssignment::set_end_min(::int64_t value) {
  _internal_set_end_min(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.end_min)
}
inline ::int64_t IntervalVarAssignment::_internal_end_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_min_;
}
inline void IntervalVarAssignment::_internal_set_end_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_min_ = value;
}

// int64 end_max = 7;
inline void IntervalVarAssignment::clear_end_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_max_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::end_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.end_max)
  return _internal_end_max();
}
inline void IntervalVarAssignment::set_end_max(::int64_t value) {
  _internal_set_end_max(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.end_max)
}
inline ::int64_t IntervalVarAssignment::_internal_end_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_max_;
}
inline void IntervalVarAssignment::_internal_set_end_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_max_ = value;
}

// int64 performed_min = 8;
inline void IntervalVarAssignment::clear_performed_min() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.performed_min_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::performed_min() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.performed_min)
  return _internal_performed_min();
}
inline void IntervalVarAssignment::set_performed_min(::int64_t value) {
  _internal_set_performed_min(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.performed_min)
}
inline ::int64_t IntervalVarAssignment::_internal_performed_min() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.performed_min_;
}
inline void IntervalVarAssignment::_internal_set_performed_min(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.performed_min_ = value;
}

// int64 performed_max = 9;
inline void IntervalVarAssignment::clear_performed_max() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.performed_max_ = ::int64_t{0};
}
inline ::int64_t IntervalVarAssignment::performed_max() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.performed_max)
  return _internal_performed_max();
}
inline void IntervalVarAssignment::set_performed_max(::int64_t value) {
  _internal_set_performed_max(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.performed_max)
}
inline ::int64_t IntervalVarAssignment::_internal_performed_max() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.performed_max_;
}
inline void IntervalVarAssignment::_internal_set_performed_max(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.performed_max_ = value;
}

// bool active = 10;
inline void IntervalVarAssignment::clear_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_ = false;
}
inline bool IntervalVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.IntervalVarAssignment.active)
  return _internal_active();
}
inline void IntervalVarAssignment::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:operations_research.IntervalVarAssignment.active)
}
inline bool IntervalVarAssignment::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void IntervalVarAssignment::_internal_set_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// SequenceVarAssignment

// string var_id = 1;
inline void SequenceVarAssignment::clear_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.ClearToEmpty();
}
inline const std::string& SequenceVarAssignment::var_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.var_id)
  return _internal_var_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SequenceVarAssignment::set_var_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.var_id)
}
inline std::string* SequenceVarAssignment::mutable_var_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_var_id();
  // @@protoc_insertion_point(field_mutable:operations_research.SequenceVarAssignment.var_id)
  return _s;
}
inline const std::string& SequenceVarAssignment::_internal_var_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.var_id_.Get();
}
inline void SequenceVarAssignment::_internal_set_var_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.var_id_.Set(value, GetArena());
}
inline std::string* SequenceVarAssignment::_internal_mutable_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.var_id_.Mutable( GetArena());
}
inline std::string* SequenceVarAssignment::release_var_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.SequenceVarAssignment.var_id)
  return _impl_.var_id_.Release();
}
inline void SequenceVarAssignment::set_allocated_var_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.var_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.var_id_.IsDefault()) {
          _impl_.var_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.SequenceVarAssignment.var_id)
}

// repeated int32 forward_sequence = 2;
inline int SequenceVarAssignment::_internal_forward_sequence_size() const {
  return _internal_forward_sequence().size();
}
inline int SequenceVarAssignment::forward_sequence_size() const {
  return _internal_forward_sequence_size();
}
inline void SequenceVarAssignment::clear_forward_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.forward_sequence_.Clear();
}
inline ::int32_t SequenceVarAssignment::forward_sequence(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.forward_sequence)
  return _internal_forward_sequence().Get(index);
}
inline void SequenceVarAssignment::set_forward_sequence(int index, ::int32_t value) {
  _internal_mutable_forward_sequence()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.forward_sequence)
}
inline void SequenceVarAssignment::add_forward_sequence(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_forward_sequence()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.forward_sequence)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::forward_sequence() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.forward_sequence)
  return _internal_forward_sequence();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::mutable_forward_sequence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.forward_sequence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_forward_sequence();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::_internal_forward_sequence()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.forward_sequence_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::_internal_mutable_forward_sequence() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.forward_sequence_;
}

// repeated int32 backward_sequence = 3;
inline int SequenceVarAssignment::_internal_backward_sequence_size() const {
  return _internal_backward_sequence().size();
}
inline int SequenceVarAssignment::backward_sequence_size() const {
  return _internal_backward_sequence_size();
}
inline void SequenceVarAssignment::clear_backward_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.backward_sequence_.Clear();
}
inline ::int32_t SequenceVarAssignment::backward_sequence(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.backward_sequence)
  return _internal_backward_sequence().Get(index);
}
inline void SequenceVarAssignment::set_backward_sequence(int index, ::int32_t value) {
  _internal_mutable_backward_sequence()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.backward_sequence)
}
inline void SequenceVarAssignment::add_backward_sequence(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_backward_sequence()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.backward_sequence)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::backward_sequence() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.backward_sequence)
  return _internal_backward_sequence();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::mutable_backward_sequence()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.backward_sequence)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_backward_sequence();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::_internal_backward_sequence()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.backward_sequence_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::_internal_mutable_backward_sequence() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.backward_sequence_;
}

// repeated int32 unperformed = 4;
inline int SequenceVarAssignment::_internal_unperformed_size() const {
  return _internal_unperformed().size();
}
inline int SequenceVarAssignment::unperformed_size() const {
  return _internal_unperformed_size();
}
inline void SequenceVarAssignment::clear_unperformed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unperformed_.Clear();
}
inline ::int32_t SequenceVarAssignment::unperformed(int index) const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.unperformed)
  return _internal_unperformed().Get(index);
}
inline void SequenceVarAssignment::set_unperformed(int index, ::int32_t value) {
  _internal_mutable_unperformed()->Set(index, value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.unperformed)
}
inline void SequenceVarAssignment::add_unperformed(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_unperformed()->Add(value);
  // @@protoc_insertion_point(field_add:operations_research.SequenceVarAssignment.unperformed)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::unperformed() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.SequenceVarAssignment.unperformed)
  return _internal_unperformed();
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::mutable_unperformed()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.SequenceVarAssignment.unperformed)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_unperformed();
}
inline const ::google::protobuf::RepeatedField<::int32_t>& SequenceVarAssignment::_internal_unperformed()
    const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unperformed_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* SequenceVarAssignment::_internal_mutable_unperformed() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.unperformed_;
}

// bool active = 5;
inline void SequenceVarAssignment::clear_active() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_ = false;
}
inline bool SequenceVarAssignment::active() const {
  // @@protoc_insertion_point(field_get:operations_research.SequenceVarAssignment.active)
  return _internal_active();
}
inline void SequenceVarAssignment::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:operations_research.SequenceVarAssignment.active)
}
inline bool SequenceVarAssignment::_internal_active() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_;
}
inline void SequenceVarAssignment::_internal_set_active(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.active_ = value;
}

// -------------------------------------------------------------------

// WorkerInfo

// int32 worker_id = 1;
inline void WorkerInfo::clear_worker_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.worker_id_ = 0;
}
inline ::int32_t WorkerInfo::worker_id() const {
  // @@protoc_insertion_point(field_get:operations_research.WorkerInfo.worker_id)
  return _internal_worker_id();
}
inline void WorkerInfo::set_worker_id(::int32_t value) {
  _internal_set_worker_id(value);
  // @@protoc_insertion_point(field_set:operations_research.WorkerInfo.worker_id)
}
inline ::int32_t WorkerInfo::_internal_worker_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.worker_id_;
}
inline void WorkerInfo::_internal_set_worker_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.worker_id_ = value;
}

// string bns = 2;
inline void WorkerInfo::clear_bns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bns_.ClearToEmpty();
}
inline const std::string& WorkerInfo::bns() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.WorkerInfo.bns)
  return _internal_bns();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void WorkerInfo::set_bns(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bns_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.WorkerInfo.bns)
}
inline std::string* WorkerInfo::mutable_bns() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_bns();
  // @@protoc_insertion_point(field_mutable:operations_research.WorkerInfo.bns)
  return _s;
}
inline const std::string& WorkerInfo::_internal_bns() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bns_.Get();
}
inline void WorkerInfo::_internal_set_bns(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bns_.Set(value, GetArena());
}
inline std::string* WorkerInfo::_internal_mutable_bns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.bns_.Mutable( GetArena());
}
inline std::string* WorkerInfo::release_bns() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.WorkerInfo.bns)
  return _impl_.bns_.Release();
}
inline void WorkerInfo::set_allocated_bns(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bns_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bns_.IsDefault()) {
          _impl_.bns_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.WorkerInfo.bns)
}

// -------------------------------------------------------------------

// AssignmentProto

// repeated .operations_research.IntVarAssignment int_var_assignment = 1;
inline int AssignmentProto::_internal_int_var_assignment_size() const {
  return _internal_int_var_assignment().size();
}
inline int AssignmentProto::int_var_assignment_size() const {
  return _internal_int_var_assignment_size();
}
inline void AssignmentProto::clear_int_var_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_var_assignment_.Clear();
}
inline ::operations_research::IntVarAssignment* AssignmentProto::mutable_int_var_assignment(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.int_var_assignment)
  return _internal_mutable_int_var_assignment()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>* AssignmentProto::mutable_int_var_assignment()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.int_var_assignment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_int_var_assignment();
}
inline const ::operations_research::IntVarAssignment& AssignmentProto::int_var_assignment(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.int_var_assignment)
  return _internal_int_var_assignment().Get(index);
}
inline ::operations_research::IntVarAssignment* AssignmentProto::add_int_var_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::IntVarAssignment* _add = _internal_mutable_int_var_assignment()->Add();
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.int_var_assignment)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>& AssignmentProto::int_var_assignment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.int_var_assignment)
  return _internal_int_var_assignment();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>&
AssignmentProto::_internal_int_var_assignment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_var_assignment_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>*
AssignmentProto::_internal_mutable_int_var_assignment() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.int_var_assignment_;
}

// repeated .operations_research.IntervalVarAssignment interval_var_assignment = 2;
inline int AssignmentProto::_internal_interval_var_assignment_size() const {
  return _internal_interval_var_assignment().size();
}
inline int AssignmentProto::interval_var_assignment_size() const {
  return _internal_interval_var_assignment_size();
}
inline void AssignmentProto::clear_interval_var_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.interval_var_assignment_.Clear();
}
inline ::operations_research::IntervalVarAssignment* AssignmentProto::mutable_interval_var_assignment(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.interval_var_assignment)
  return _internal_mutable_interval_var_assignment()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>* AssignmentProto::mutable_interval_var_assignment()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.interval_var_assignment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_interval_var_assignment();
}
inline const ::operations_research::IntervalVarAssignment& AssignmentProto::interval_var_assignment(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.interval_var_assignment)
  return _internal_interval_var_assignment().Get(index);
}
inline ::operations_research::IntervalVarAssignment* AssignmentProto::add_interval_var_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::IntervalVarAssignment* _add = _internal_mutable_interval_var_assignment()->Add();
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.interval_var_assignment)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>& AssignmentProto::interval_var_assignment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.interval_var_assignment)
  return _internal_interval_var_assignment();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>&
AssignmentProto::_internal_interval_var_assignment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.interval_var_assignment_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntervalVarAssignment>*
AssignmentProto::_internal_mutable_interval_var_assignment() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.interval_var_assignment_;
}

// repeated .operations_research.SequenceVarAssignment sequence_var_assignment = 6;
inline int AssignmentProto::_internal_sequence_var_assignment_size() const {
  return _internal_sequence_var_assignment().size();
}
inline int AssignmentProto::sequence_var_assignment_size() const {
  return _internal_sequence_var_assignment_size();
}
inline void AssignmentProto::clear_sequence_var_assignment() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.sequence_var_assignment_.Clear();
}
inline ::operations_research::SequenceVarAssignment* AssignmentProto::mutable_sequence_var_assignment(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.sequence_var_assignment)
  return _internal_mutable_sequence_var_assignment()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>* AssignmentProto::mutable_sequence_var_assignment()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.sequence_var_assignment)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_sequence_var_assignment();
}
inline const ::operations_research::SequenceVarAssignment& AssignmentProto::sequence_var_assignment(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.sequence_var_assignment)
  return _internal_sequence_var_assignment().Get(index);
}
inline ::operations_research::SequenceVarAssignment* AssignmentProto::add_sequence_var_assignment() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::SequenceVarAssignment* _add = _internal_mutable_sequence_var_assignment()->Add();
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.sequence_var_assignment)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>& AssignmentProto::sequence_var_assignment() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.sequence_var_assignment)
  return _internal_sequence_var_assignment();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>&
AssignmentProto::_internal_sequence_var_assignment() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.sequence_var_assignment_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::SequenceVarAssignment>*
AssignmentProto::_internal_mutable_sequence_var_assignment() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.sequence_var_assignment_;
}

// repeated .operations_research.IntVarAssignment objective = 3;
inline int AssignmentProto::_internal_objective_size() const {
  return _internal_objective().size();
}
inline int AssignmentProto::objective_size() const {
  return _internal_objective_size();
}
inline void AssignmentProto::clear_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_.Clear();
}
inline ::operations_research::IntVarAssignment* AssignmentProto::mutable_objective(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.objective)
  return _internal_mutable_objective()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>* AssignmentProto::mutable_objective()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.AssignmentProto.objective)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_objective();
}
inline const ::operations_research::IntVarAssignment& AssignmentProto::objective(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.objective)
  return _internal_objective().Get(index);
}
inline ::operations_research::IntVarAssignment* AssignmentProto::add_objective() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::IntVarAssignment* _add = _internal_mutable_objective()->Add();
  // @@protoc_insertion_point(field_add:operations_research.AssignmentProto.objective)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>& AssignmentProto::objective() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.AssignmentProto.objective)
  return _internal_objective();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>&
AssignmentProto::_internal_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::IntVarAssignment>*
AssignmentProto::_internal_mutable_objective() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.objective_;
}

// .operations_research.WorkerInfo worker_info = 4;
inline bool AssignmentProto::has_worker_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.worker_info_ != nullptr);
  return value;
}
inline void AssignmentProto::clear_worker_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.worker_info_ != nullptr) _impl_.worker_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::WorkerInfo& AssignmentProto::_internal_worker_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::WorkerInfo* p = _impl_.worker_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::WorkerInfo&>(::operations_research::_WorkerInfo_default_instance_);
}
inline const ::operations_research::WorkerInfo& AssignmentProto::worker_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.worker_info)
  return _internal_worker_info();
}
inline void AssignmentProto::unsafe_arena_set_allocated_worker_info(::operations_research::WorkerInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.worker_info_);
  }
  _impl_.worker_info_ = reinterpret_cast<::operations_research::WorkerInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.AssignmentProto.worker_info)
}
inline ::operations_research::WorkerInfo* AssignmentProto::release_worker_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::WorkerInfo* released = _impl_.worker_info_;
  _impl_.worker_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::WorkerInfo* AssignmentProto::unsafe_arena_release_worker_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.AssignmentProto.worker_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::WorkerInfo* temp = _impl_.worker_info_;
  _impl_.worker_info_ = nullptr;
  return temp;
}
inline ::operations_research::WorkerInfo* AssignmentProto::_internal_mutable_worker_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.worker_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::WorkerInfo>(GetArena());
    _impl_.worker_info_ = reinterpret_cast<::operations_research::WorkerInfo*>(p);
  }
  return _impl_.worker_info_;
}
inline ::operations_research::WorkerInfo* AssignmentProto::mutable_worker_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::WorkerInfo* _msg = _internal_mutable_worker_info();
  // @@protoc_insertion_point(field_mutable:operations_research.AssignmentProto.worker_info)
  return _msg;
}
inline void AssignmentProto::set_allocated_worker_info(::operations_research::WorkerInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::WorkerInfo*>(_impl_.worker_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::WorkerInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.worker_info_ = reinterpret_cast<::operations_research::WorkerInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.AssignmentProto.worker_info)
}

// bool is_valid = 5;
inline void AssignmentProto::clear_is_valid() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_valid_ = false;
}
inline bool AssignmentProto::is_valid() const {
  // @@protoc_insertion_point(field_get:operations_research.AssignmentProto.is_valid)
  return _internal_is_valid();
}
inline void AssignmentProto::set_is_valid(bool value) {
  _internal_set_is_valid(value);
  // @@protoc_insertion_point(field_set:operations_research.AssignmentProto.is_valid)
}
inline bool AssignmentProto::_internal_is_valid() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_valid_;
}
inline void AssignmentProto::_internal_set_is_valid(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_valid_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2fassignment_2eproto_2epb_2eh
