// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/gscip/gscip.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fgscip_2fgscip_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fgscip_2fgscip_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fgscip_2fgscip_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fgscip_2fgscip_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fgscip_2fgscip_2eproto;
namespace operations_research {
class GScipOutput;
struct GScipOutputDefaultTypeInternal;
extern GScipOutputDefaultTypeInternal _GScipOutput_default_instance_;
class GScipParameters;
struct GScipParametersDefaultTypeInternal;
extern GScipParametersDefaultTypeInternal _GScipParameters_default_instance_;
class GScipParameters_BoolParamsEntry_DoNotUse;
struct GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_BoolParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_BoolParamsEntry_DoNotUse_default_instance_;
class GScipParameters_CharParamsEntry_DoNotUse;
struct GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_CharParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_CharParamsEntry_DoNotUse_default_instance_;
class GScipParameters_IntParamsEntry_DoNotUse;
struct GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_IntParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_IntParamsEntry_DoNotUse_default_instance_;
class GScipParameters_LongParamsEntry_DoNotUse;
struct GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_LongParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_LongParamsEntry_DoNotUse_default_instance_;
class GScipParameters_RealParamsEntry_DoNotUse;
struct GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_RealParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_RealParamsEntry_DoNotUse_default_instance_;
class GScipParameters_StringParamsEntry_DoNotUse;
struct GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal;
extern GScipParameters_StringParamsEntry_DoNotUseDefaultTypeInternal _GScipParameters_StringParamsEntry_DoNotUse_default_instance_;
class GScipSolvingStats;
struct GScipSolvingStatsDefaultTypeInternal;
extern GScipSolvingStatsDefaultTypeInternal _GScipSolvingStats_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum GScipParameters_Emphasis : int {
  GScipParameters_Emphasis_DEFAULT_EMPHASIS = 0,
  GScipParameters_Emphasis_COUNTER = 1,
  GScipParameters_Emphasis_CP_SOLVER = 2,
  GScipParameters_Emphasis_EASY_CIP = 3,
  GScipParameters_Emphasis_FEASIBILITY = 4,
  GScipParameters_Emphasis_HARD_LP = 5,
  GScipParameters_Emphasis_OPTIMALITY = 6,
  GScipParameters_Emphasis_PHASE_FEAS = 7,
  GScipParameters_Emphasis_PHASE_IMPROVE = 8,
  GScipParameters_Emphasis_PHASE_PROOF = 9,
  GScipParameters_Emphasis_GScipParameters_Emphasis_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GScipParameters_Emphasis_GScipParameters_Emphasis_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GScipParameters_Emphasis_IsValid(int value);
extern const uint32_t GScipParameters_Emphasis_internal_data_[];
constexpr GScipParameters_Emphasis GScipParameters_Emphasis_Emphasis_MIN = static_cast<GScipParameters_Emphasis>(0);
constexpr GScipParameters_Emphasis GScipParameters_Emphasis_Emphasis_MAX = static_cast<GScipParameters_Emphasis>(9);
constexpr int GScipParameters_Emphasis_Emphasis_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
GScipParameters_Emphasis_descriptor();
template <typename T>
const std::string& GScipParameters_Emphasis_Name(T value) {
  static_assert(std::is_same<T, GScipParameters_Emphasis>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Emphasis_Name().");
  return GScipParameters_Emphasis_Name(static_cast<GScipParameters_Emphasis>(value));
}
template <>
inline const std::string& GScipParameters_Emphasis_Name(GScipParameters_Emphasis value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GScipParameters_Emphasis_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool GScipParameters_Emphasis_Parse(absl::string_view name, GScipParameters_Emphasis* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GScipParameters_Emphasis>(
      GScipParameters_Emphasis_descriptor(), name, value);
}
enum GScipParameters_MetaParamValue : int {
  GScipParameters_MetaParamValue_DEFAULT_META_PARAM_VALUE = 0,
  GScipParameters_MetaParamValue_AGGRESSIVE = 1,
  GScipParameters_MetaParamValue_FAST = 2,
  GScipParameters_MetaParamValue_OFF = 3,
  GScipParameters_MetaParamValue_GScipParameters_MetaParamValue_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GScipParameters_MetaParamValue_GScipParameters_MetaParamValue_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GScipParameters_MetaParamValue_IsValid(int value);
extern const uint32_t GScipParameters_MetaParamValue_internal_data_[];
constexpr GScipParameters_MetaParamValue GScipParameters_MetaParamValue_MetaParamValue_MIN = static_cast<GScipParameters_MetaParamValue>(0);
constexpr GScipParameters_MetaParamValue GScipParameters_MetaParamValue_MetaParamValue_MAX = static_cast<GScipParameters_MetaParamValue>(3);
constexpr int GScipParameters_MetaParamValue_MetaParamValue_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GScipParameters_MetaParamValue_descriptor();
template <typename T>
const std::string& GScipParameters_MetaParamValue_Name(T value) {
  static_assert(std::is_same<T, GScipParameters_MetaParamValue>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MetaParamValue_Name().");
  return GScipParameters_MetaParamValue_Name(static_cast<GScipParameters_MetaParamValue>(value));
}
template <>
inline const std::string& GScipParameters_MetaParamValue_Name(GScipParameters_MetaParamValue value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GScipParameters_MetaParamValue_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GScipParameters_MetaParamValue_Parse(absl::string_view name, GScipParameters_MetaParamValue* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GScipParameters_MetaParamValue>(
      GScipParameters_MetaParamValue_descriptor(), name, value);
}
enum GScipOutput_Status : int {
  GScipOutput_Status_UNKNOWN = 0,
  GScipOutput_Status_USER_INTERRUPT = 1,
  GScipOutput_Status_NODE_LIMIT = 2,
  GScipOutput_Status_TOTAL_NODE_LIMIT = 3,
  GScipOutput_Status_STALL_NODE_LIMIT = 4,
  GScipOutput_Status_TIME_LIMIT = 5,
  GScipOutput_Status_MEM_LIMIT = 6,
  GScipOutput_Status_GAP_LIMIT = 7,
  GScipOutput_Status_SOL_LIMIT = 8,
  GScipOutput_Status_BEST_SOL_LIMIT = 9,
  GScipOutput_Status_RESTART_LIMIT = 10,
  GScipOutput_Status_OPTIMAL = 11,
  GScipOutput_Status_INFEASIBLE = 12,
  GScipOutput_Status_UNBOUNDED = 13,
  GScipOutput_Status_INF_OR_UNBD = 14,
  GScipOutput_Status_TERMINATE = 15,
  GScipOutput_Status_INVALID_SOLVER_PARAMETERS = 16,
  GScipOutput_Status_GScipOutput_Status_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GScipOutput_Status_GScipOutput_Status_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GScipOutput_Status_IsValid(int value);
extern const uint32_t GScipOutput_Status_internal_data_[];
constexpr GScipOutput_Status GScipOutput_Status_Status_MIN = static_cast<GScipOutput_Status>(0);
constexpr GScipOutput_Status GScipOutput_Status_Status_MAX = static_cast<GScipOutput_Status>(16);
constexpr int GScipOutput_Status_Status_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
GScipOutput_Status_descriptor();
template <typename T>
const std::string& GScipOutput_Status_Name(T value) {
  static_assert(std::is_same<T, GScipOutput_Status>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Status_Name().");
  return GScipOutput_Status_Name(static_cast<GScipOutput_Status>(value));
}
template <>
inline const std::string& GScipOutput_Status_Name(GScipOutput_Status value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GScipOutput_Status_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool GScipOutput_Status_Parse(absl::string_view name, GScipOutput_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GScipOutput_Status>(
      GScipOutput_Status_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GScipSolvingStats final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.GScipSolvingStats) */ {
 public:
  inline GScipSolvingStats() : GScipSolvingStats(nullptr) {}
  ~GScipSolvingStats() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GScipSolvingStats(::google::protobuf::internal::ConstantInitialized);

  inline GScipSolvingStats(const GScipSolvingStats& from)
      : GScipSolvingStats(nullptr, from) {}
  GScipSolvingStats(GScipSolvingStats&& from) noexcept
    : GScipSolvingStats() {
    *this = ::std::move(from);
  }

  inline GScipSolvingStats& operator=(const GScipSolvingStats& from) {
    CopyFrom(from);
    return *this;
  }
  inline GScipSolvingStats& operator=(GScipSolvingStats&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GScipSolvingStats& default_instance() {
    return *internal_default_instance();
  }
  static inline const GScipSolvingStats* internal_default_instance() {
    return reinterpret_cast<const GScipSolvingStats*>(
               &_GScipSolvingStats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GScipSolvingStats& a, GScipSolvingStats& b) {
    a.Swap(&b);
  }
  inline void Swap(GScipSolvingStats* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GScipSolvingStats* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GScipSolvingStats* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GScipSolvingStats>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GScipSolvingStats& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GScipSolvingStats& from) {
    GScipSolvingStats::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GScipSolvingStats* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.GScipSolvingStats";
  }
  protected:
  explicit GScipSolvingStats(::google::protobuf::Arena* arena);
  GScipSolvingStats(::google::protobuf::Arena* arena, const GScipSolvingStats& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBestObjectiveFieldNumber = 1,
    kBestBoundFieldNumber = 2,
    kPrimalSimplexIterationsFieldNumber = 3,
    kDualSimplexIterationsFieldNumber = 4,
    kTotalLpIterationsFieldNumber = 5,
    kNodeCountFieldNumber = 6,
    kFirstLpRelaxationBoundFieldNumber = 7,
    kRootNodeBoundFieldNumber = 8,
    kDeterministicTimeFieldNumber = 9,
  };
  // double best_objective = 1;
  void clear_best_objective() ;
  double best_objective() const;
  void set_best_objective(double value);

  private:
  double _internal_best_objective() const;
  void _internal_set_best_objective(double value);

  public:
  // double best_bound = 2;
  void clear_best_bound() ;
  double best_bound() const;
  void set_best_bound(double value);

  private:
  double _internal_best_bound() const;
  void _internal_set_best_bound(double value);

  public:
  // int64 primal_simplex_iterations = 3;
  void clear_primal_simplex_iterations() ;
  ::int64_t primal_simplex_iterations() const;
  void set_primal_simplex_iterations(::int64_t value);

  private:
  ::int64_t _internal_primal_simplex_iterations() const;
  void _internal_set_primal_simplex_iterations(::int64_t value);

  public:
  // int64 dual_simplex_iterations = 4;
  void clear_dual_simplex_iterations() ;
  ::int64_t dual_simplex_iterations() const;
  void set_dual_simplex_iterations(::int64_t value);

  private:
  ::int64_t _internal_dual_simplex_iterations() const;
  void _internal_set_dual_simplex_iterations(::int64_t value);

  public:
  // int64 total_lp_iterations = 5;
  void clear_total_lp_iterations() ;
  ::int64_t total_lp_iterations() const;
  void set_total_lp_iterations(::int64_t value);

  private:
  ::int64_t _internal_total_lp_iterations() const;
  void _internal_set_total_lp_iterations(::int64_t value);

  public:
  // int64 node_count = 6;
  void clear_node_count() ;
  ::int64_t node_count() const;
  void set_node_count(::int64_t value);

  private:
  ::int64_t _internal_node_count() const;
  void _internal_set_node_count(::int64_t value);

  public:
  // double first_lp_relaxation_bound = 7;
  void clear_first_lp_relaxation_bound() ;
  double first_lp_relaxation_bound() const;
  void set_first_lp_relaxation_bound(double value);

  private:
  double _internal_first_lp_relaxation_bound() const;
  void _internal_set_first_lp_relaxation_bound(double value);

  public:
  // double root_node_bound = 8;
  void clear_root_node_bound() ;
  double root_node_bound() const;
  void set_root_node_bound(double value);

  private:
  double _internal_root_node_bound() const;
  void _internal_set_root_node_bound(double value);

  public:
  // double deterministic_time = 9;
  void clear_deterministic_time() ;
  double deterministic_time() const;
  void set_deterministic_time(double value);

  private:
  double _internal_deterministic_time() const;
  void _internal_set_deterministic_time(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.GScipSolvingStats)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double best_objective_;
    double best_bound_;
    ::int64_t primal_simplex_iterations_;
    ::int64_t dual_simplex_iterations_;
    ::int64_t total_lp_iterations_;
    ::int64_t node_count_;
    double first_lp_relaxation_bound_;
    double root_node_bound_;
    double deterministic_time_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};// -------------------------------------------------------------------

class GScipParameters_StringParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_StringParamsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_StringParamsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  GScipParameters_StringParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_StringParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_StringParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_StringParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_StringParamsEntry_DoNotUse*>(
        &_GScipParameters_StringParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.StringParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.StringParamsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters_RealParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_RealParamsEntry_DoNotUse, std::string, double,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_RealParamsEntry_DoNotUse, std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>;
  GScipParameters_RealParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_RealParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_RealParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_RealParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_RealParamsEntry_DoNotUse*>(
        &_GScipParameters_RealParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.RealParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters_LongParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_LongParamsEntry_DoNotUse, std::string, ::int64_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT64> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_LongParamsEntry_DoNotUse, std::string, ::int64_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>;
  GScipParameters_LongParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_LongParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_LongParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_LongParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_LongParamsEntry_DoNotUse*>(
        &_GScipParameters_LongParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.LongParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters_IntParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_IntParamsEntry_DoNotUse, std::string, ::int32_t,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_INT32> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_IntParamsEntry_DoNotUse, std::string, ::int32_t,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>;
  GScipParameters_IntParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_IntParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_IntParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_IntParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_IntParamsEntry_DoNotUse*>(
        &_GScipParameters_IntParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.IntParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters_CharParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_CharParamsEntry_DoNotUse, std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_CharParamsEntry_DoNotUse, std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  GScipParameters_CharParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_CharParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_CharParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_CharParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_CharParamsEntry_DoNotUse*>(
        &_GScipParameters_CharParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.CharParamsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.CharParamsEntry.value");
 }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters_BoolParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          GScipParameters_BoolParamsEntry_DoNotUse, std::string, bool,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_BOOL> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      GScipParameters_BoolParamsEntry_DoNotUse, std::string, bool,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>;
  GScipParameters_BoolParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters_BoolParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GScipParameters_BoolParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GScipParameters_BoolParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GScipParameters_BoolParamsEntry_DoNotUse*>(
        &_GScipParameters_BoolParamsEntry_DoNotUse_default_instance_);
  }
  static bool ValidateKey(std::string* s) {
    return ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::google::protobuf::internal::WireFormatLite::PARSE, "operations_research.GScipParameters.BoolParamsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  ::google::protobuf::Metadata GetMetadata() const final;
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};
// -------------------------------------------------------------------

class GScipParameters final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.GScipParameters) */ {
 public:
  inline GScipParameters() : GScipParameters(nullptr) {}
  ~GScipParameters() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GScipParameters(::google::protobuf::internal::ConstantInitialized);

  inline GScipParameters(const GScipParameters& from)
      : GScipParameters(nullptr, from) {}
  GScipParameters(GScipParameters&& from) noexcept
    : GScipParameters() {
    *this = ::std::move(from);
  }

  inline GScipParameters& operator=(const GScipParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline GScipParameters& operator=(GScipParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GScipParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const GScipParameters* internal_default_instance() {
    return reinterpret_cast<const GScipParameters*>(
               &_GScipParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GScipParameters& a, GScipParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(GScipParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GScipParameters* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GScipParameters* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GScipParameters>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GScipParameters& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GScipParameters& from) {
    GScipParameters::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GScipParameters* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.GScipParameters";
  }
  protected:
  explicit GScipParameters(::google::protobuf::Arena* arena);
  GScipParameters(::google::protobuf::Arena* arena, const GScipParameters& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  using Emphasis = GScipParameters_Emphasis;
  static constexpr Emphasis DEFAULT_EMPHASIS = GScipParameters_Emphasis_DEFAULT_EMPHASIS;
  static constexpr Emphasis COUNTER = GScipParameters_Emphasis_COUNTER;
  static constexpr Emphasis CP_SOLVER = GScipParameters_Emphasis_CP_SOLVER;
  static constexpr Emphasis EASY_CIP = GScipParameters_Emphasis_EASY_CIP;
  static constexpr Emphasis FEASIBILITY = GScipParameters_Emphasis_FEASIBILITY;
  static constexpr Emphasis HARD_LP = GScipParameters_Emphasis_HARD_LP;
  static constexpr Emphasis OPTIMALITY = GScipParameters_Emphasis_OPTIMALITY;
  static constexpr Emphasis PHASE_FEAS = GScipParameters_Emphasis_PHASE_FEAS;
  static constexpr Emphasis PHASE_IMPROVE = GScipParameters_Emphasis_PHASE_IMPROVE;
  static constexpr Emphasis PHASE_PROOF = GScipParameters_Emphasis_PHASE_PROOF;
  static inline bool Emphasis_IsValid(int value) {
    return GScipParameters_Emphasis_IsValid(value);
  }
  static constexpr Emphasis Emphasis_MIN = GScipParameters_Emphasis_Emphasis_MIN;
  static constexpr Emphasis Emphasis_MAX = GScipParameters_Emphasis_Emphasis_MAX;
  static constexpr int Emphasis_ARRAYSIZE = GScipParameters_Emphasis_Emphasis_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Emphasis_descriptor() {
    return GScipParameters_Emphasis_descriptor();
  }
  template <typename T>
  static inline const std::string& Emphasis_Name(T value) {
    return GScipParameters_Emphasis_Name(value);
  }
  static inline bool Emphasis_Parse(absl::string_view name, Emphasis* value) {
    return GScipParameters_Emphasis_Parse(name, value);
  }

  using MetaParamValue = GScipParameters_MetaParamValue;
  static constexpr MetaParamValue DEFAULT_META_PARAM_VALUE = GScipParameters_MetaParamValue_DEFAULT_META_PARAM_VALUE;
  static constexpr MetaParamValue AGGRESSIVE = GScipParameters_MetaParamValue_AGGRESSIVE;
  static constexpr MetaParamValue FAST = GScipParameters_MetaParamValue_FAST;
  static constexpr MetaParamValue OFF = GScipParameters_MetaParamValue_OFF;
  static inline bool MetaParamValue_IsValid(int value) {
    return GScipParameters_MetaParamValue_IsValid(value);
  }
  static constexpr MetaParamValue MetaParamValue_MIN = GScipParameters_MetaParamValue_MetaParamValue_MIN;
  static constexpr MetaParamValue MetaParamValue_MAX = GScipParameters_MetaParamValue_MetaParamValue_MAX;
  static constexpr int MetaParamValue_ARRAYSIZE = GScipParameters_MetaParamValue_MetaParamValue_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MetaParamValue_descriptor() {
    return GScipParameters_MetaParamValue_descriptor();
  }
  template <typename T>
  static inline const std::string& MetaParamValue_Name(T value) {
    return GScipParameters_MetaParamValue_Name(value);
  }
  static inline bool MetaParamValue_Parse(absl::string_view name, MetaParamValue* value) {
    return GScipParameters_MetaParamValue_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBoolParamsFieldNumber = 5,
    kIntParamsFieldNumber = 6,
    kLongParamsFieldNumber = 7,
    kRealParamsFieldNumber = 8,
    kCharParamsFieldNumber = 9,
    kStringParamsFieldNumber = 10,
    kSearchLogsFilenameFieldNumber = 14,
    kDetailedSolvingStatsFilenameFieldNumber = 15,
    kScipModelFilenameFieldNumber = 16,
    kEmphasisFieldNumber = 1,
    kHeuristicsFieldNumber = 2,
    kPresolveFieldNumber = 3,
    kSeparatingFieldNumber = 4,
    kSilenceOutputFieldNumber = 11,
    kPrintDetailedSolvingStatsFieldNumber = 12,
    kPrintScipModelFieldNumber = 13,
    kNumSolutionsFieldNumber = 17,
    kObjectiveLimitFieldNumber = 18,
  };
  // map<string, bool> bool_params = 5;
  int bool_params_size() const;
  private:
  int _internal_bool_params_size() const;

  public:
  void clear_bool_params() ;
  const ::google::protobuf::Map<std::string, bool>& bool_params() const;
  ::google::protobuf::Map<std::string, bool>* mutable_bool_params();

  private:
  const ::google::protobuf::Map<std::string, bool>& _internal_bool_params() const;
  ::google::protobuf::Map<std::string, bool>* _internal_mutable_bool_params();

  public:
  // map<string, int32> int_params = 6;
  int int_params_size() const;
  private:
  int _internal_int_params_size() const;

  public:
  void clear_int_params() ;
  const ::google::protobuf::Map<std::string, ::int32_t>& int_params() const;
  ::google::protobuf::Map<std::string, ::int32_t>* mutable_int_params();

  private:
  const ::google::protobuf::Map<std::string, ::int32_t>& _internal_int_params() const;
  ::google::protobuf::Map<std::string, ::int32_t>* _internal_mutable_int_params();

  public:
  // map<string, int64> long_params = 7;
  int long_params_size() const;
  private:
  int _internal_long_params_size() const;

  public:
  void clear_long_params() ;
  const ::google::protobuf::Map<std::string, ::int64_t>& long_params() const;
  ::google::protobuf::Map<std::string, ::int64_t>* mutable_long_params();

  private:
  const ::google::protobuf::Map<std::string, ::int64_t>& _internal_long_params() const;
  ::google::protobuf::Map<std::string, ::int64_t>* _internal_mutable_long_params();

  public:
  // map<string, double> real_params = 8;
  int real_params_size() const;
  private:
  int _internal_real_params_size() const;

  public:
  void clear_real_params() ;
  const ::google::protobuf::Map<std::string, double>& real_params() const;
  ::google::protobuf::Map<std::string, double>* mutable_real_params();

  private:
  const ::google::protobuf::Map<std::string, double>& _internal_real_params() const;
  ::google::protobuf::Map<std::string, double>* _internal_mutable_real_params();

  public:
  // map<string, string> char_params = 9;
  int char_params_size() const;
  private:
  int _internal_char_params_size() const;

  public:
  void clear_char_params() ;
  const ::google::protobuf::Map<std::string, std::string>& char_params() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_char_params();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_char_params() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_char_params();

  public:
  // map<string, string> string_params = 10;
  int string_params_size() const;
  private:
  int _internal_string_params_size() const;

  public:
  void clear_string_params() ;
  const ::google::protobuf::Map<std::string, std::string>& string_params() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_string_params();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_string_params() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_string_params();

  public:
  // string search_logs_filename = 14;
  void clear_search_logs_filename() ;
  const std::string& search_logs_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_search_logs_filename(Arg_&& arg, Args_... args);
  std::string* mutable_search_logs_filename();
  PROTOBUF_NODISCARD std::string* release_search_logs_filename();
  void set_allocated_search_logs_filename(std::string* value);

  private:
  const std::string& _internal_search_logs_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_search_logs_filename(
      const std::string& value);
  std::string* _internal_mutable_search_logs_filename();

  public:
  // string detailed_solving_stats_filename = 15;
  void clear_detailed_solving_stats_filename() ;
  const std::string& detailed_solving_stats_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_detailed_solving_stats_filename(Arg_&& arg, Args_... args);
  std::string* mutable_detailed_solving_stats_filename();
  PROTOBUF_NODISCARD std::string* release_detailed_solving_stats_filename();
  void set_allocated_detailed_solving_stats_filename(std::string* value);

  private:
  const std::string& _internal_detailed_solving_stats_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detailed_solving_stats_filename(
      const std::string& value);
  std::string* _internal_mutable_detailed_solving_stats_filename();

  public:
  // string scip_model_filename = 16;
  void clear_scip_model_filename() ;
  const std::string& scip_model_filename() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_scip_model_filename(Arg_&& arg, Args_... args);
  std::string* mutable_scip_model_filename();
  PROTOBUF_NODISCARD std::string* release_scip_model_filename();
  void set_allocated_scip_model_filename(std::string* value);

  private:
  const std::string& _internal_scip_model_filename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scip_model_filename(
      const std::string& value);
  std::string* _internal_mutable_scip_model_filename();

  public:
  // .operations_research.GScipParameters.Emphasis emphasis = 1;
  void clear_emphasis() ;
  ::operations_research::GScipParameters_Emphasis emphasis() const;
  void set_emphasis(::operations_research::GScipParameters_Emphasis value);

  private:
  ::operations_research::GScipParameters_Emphasis _internal_emphasis() const;
  void _internal_set_emphasis(::operations_research::GScipParameters_Emphasis value);

  public:
  // optional .operations_research.GScipParameters.MetaParamValue heuristics = 2;
  bool has_heuristics() const;
  void clear_heuristics() ;
  ::operations_research::GScipParameters_MetaParamValue heuristics() const;
  void set_heuristics(::operations_research::GScipParameters_MetaParamValue value);

  private:
  ::operations_research::GScipParameters_MetaParamValue _internal_heuristics() const;
  void _internal_set_heuristics(::operations_research::GScipParameters_MetaParamValue value);

  public:
  // optional .operations_research.GScipParameters.MetaParamValue presolve = 3;
  bool has_presolve() const;
  void clear_presolve() ;
  ::operations_research::GScipParameters_MetaParamValue presolve() const;
  void set_presolve(::operations_research::GScipParameters_MetaParamValue value);

  private:
  ::operations_research::GScipParameters_MetaParamValue _internal_presolve() const;
  void _internal_set_presolve(::operations_research::GScipParameters_MetaParamValue value);

  public:
  // optional .operations_research.GScipParameters.MetaParamValue separating = 4;
  bool has_separating() const;
  void clear_separating() ;
  ::operations_research::GScipParameters_MetaParamValue separating() const;
  void set_separating(::operations_research::GScipParameters_MetaParamValue value);

  private:
  ::operations_research::GScipParameters_MetaParamValue _internal_separating() const;
  void _internal_set_separating(::operations_research::GScipParameters_MetaParamValue value);

  public:
  // optional bool silence_output = 11;
  bool has_silence_output() const;
  void clear_silence_output() ;
  bool silence_output() const;
  void set_silence_output(bool value);

  private:
  bool _internal_silence_output() const;
  void _internal_set_silence_output(bool value);

  public:
  // bool print_detailed_solving_stats = 12;
  void clear_print_detailed_solving_stats() ;
  bool print_detailed_solving_stats() const;
  void set_print_detailed_solving_stats(bool value);

  private:
  bool _internal_print_detailed_solving_stats() const;
  void _internal_set_print_detailed_solving_stats(bool value);

  public:
  // bool print_scip_model = 13;
  void clear_print_scip_model() ;
  bool print_scip_model() const;
  void set_print_scip_model(bool value);

  private:
  bool _internal_print_scip_model() const;
  void _internal_set_print_scip_model(bool value);

  public:
  // optional int32 num_solutions = 17;
  bool has_num_solutions() const;
  void clear_num_solutions() ;
  ::int32_t num_solutions() const;
  void set_num_solutions(::int32_t value);

  private:
  ::int32_t _internal_num_solutions() const;
  void _internal_set_num_solutions(::int32_t value);

  public:
  // optional double objective_limit = 18;
  bool has_objective_limit() const;
  void clear_objective_limit() ;
  double objective_limit() const;
  void set_objective_limit(double value);

  private:
  double _internal_objective_limit() const;
  void _internal_set_objective_limit(double value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.GScipParameters)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 18, 6,
      197, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::MapField<GScipParameters_BoolParamsEntry_DoNotUse, std::string, bool,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>
        bool_params_;
    ::google::protobuf::internal::MapField<GScipParameters_IntParamsEntry_DoNotUse, std::string, ::int32_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT32>
        int_params_;
    ::google::protobuf::internal::MapField<GScipParameters_LongParamsEntry_DoNotUse, std::string, ::int64_t,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_INT64>
        long_params_;
    ::google::protobuf::internal::MapField<GScipParameters_RealParamsEntry_DoNotUse, std::string, double,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>
        real_params_;
    ::google::protobuf::internal::MapField<GScipParameters_CharParamsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        char_params_;
    ::google::protobuf::internal::MapField<GScipParameters_StringParamsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        string_params_;
    ::google::protobuf::internal::ArenaStringPtr search_logs_filename_;
    ::google::protobuf::internal::ArenaStringPtr detailed_solving_stats_filename_;
    ::google::protobuf::internal::ArenaStringPtr scip_model_filename_;
    int emphasis_;
    int heuristics_;
    int presolve_;
    int separating_;
    bool silence_output_;
    bool print_detailed_solving_stats_;
    bool print_scip_model_;
    ::int32_t num_solutions_;
    double objective_limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};// -------------------------------------------------------------------

class GScipOutput final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.GScipOutput) */ {
 public:
  inline GScipOutput() : GScipOutput(nullptr) {}
  ~GScipOutput() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GScipOutput(::google::protobuf::internal::ConstantInitialized);

  inline GScipOutput(const GScipOutput& from)
      : GScipOutput(nullptr, from) {}
  GScipOutput(GScipOutput&& from) noexcept
    : GScipOutput() {
    *this = ::std::move(from);
  }

  inline GScipOutput& operator=(const GScipOutput& from) {
    CopyFrom(from);
    return *this;
  }
  inline GScipOutput& operator=(GScipOutput&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GScipOutput& default_instance() {
    return *internal_default_instance();
  }
  static inline const GScipOutput* internal_default_instance() {
    return reinterpret_cast<const GScipOutput*>(
               &_GScipOutput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GScipOutput& a, GScipOutput& b) {
    a.Swap(&b);
  }
  inline void Swap(GScipOutput* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GScipOutput* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GScipOutput* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GScipOutput>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GScipOutput& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GScipOutput& from) {
    GScipOutput::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GScipOutput* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.GScipOutput";
  }
  protected:
  explicit GScipOutput(::google::protobuf::Arena* arena);
  GScipOutput(::google::protobuf::Arena* arena, const GScipOutput& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Status = GScipOutput_Status;
  static constexpr Status UNKNOWN = GScipOutput_Status_UNKNOWN;
  static constexpr Status USER_INTERRUPT = GScipOutput_Status_USER_INTERRUPT;
  static constexpr Status NODE_LIMIT = GScipOutput_Status_NODE_LIMIT;
  static constexpr Status TOTAL_NODE_LIMIT = GScipOutput_Status_TOTAL_NODE_LIMIT;
  static constexpr Status STALL_NODE_LIMIT = GScipOutput_Status_STALL_NODE_LIMIT;
  static constexpr Status TIME_LIMIT = GScipOutput_Status_TIME_LIMIT;
  static constexpr Status MEM_LIMIT = GScipOutput_Status_MEM_LIMIT;
  static constexpr Status GAP_LIMIT = GScipOutput_Status_GAP_LIMIT;
  static constexpr Status SOL_LIMIT = GScipOutput_Status_SOL_LIMIT;
  static constexpr Status BEST_SOL_LIMIT = GScipOutput_Status_BEST_SOL_LIMIT;
  static constexpr Status RESTART_LIMIT = GScipOutput_Status_RESTART_LIMIT;
  static constexpr Status OPTIMAL = GScipOutput_Status_OPTIMAL;
  static constexpr Status INFEASIBLE = GScipOutput_Status_INFEASIBLE;
  static constexpr Status UNBOUNDED = GScipOutput_Status_UNBOUNDED;
  static constexpr Status INF_OR_UNBD = GScipOutput_Status_INF_OR_UNBD;
  static constexpr Status TERMINATE = GScipOutput_Status_TERMINATE;
  static constexpr Status INVALID_SOLVER_PARAMETERS = GScipOutput_Status_INVALID_SOLVER_PARAMETERS;
  static inline bool Status_IsValid(int value) {
    return GScipOutput_Status_IsValid(value);
  }
  static constexpr Status Status_MIN = GScipOutput_Status_Status_MIN;
  static constexpr Status Status_MAX = GScipOutput_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE = GScipOutput_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Status_descriptor() {
    return GScipOutput_Status_descriptor();
  }
  template <typename T>
  static inline const std::string& Status_Name(T value) {
    return GScipOutput_Status_Name(value);
  }
  static inline bool Status_Parse(absl::string_view name, Status* value) {
    return GScipOutput_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusDetailFieldNumber = 2,
    kStatsFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string status_detail = 2;
  void clear_status_detail() ;
  const std::string& status_detail() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* value);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // .operations_research.GScipSolvingStats stats = 3;
  bool has_stats() const;
  void clear_stats() ;
  const ::operations_research::GScipSolvingStats& stats() const;
  PROTOBUF_NODISCARD ::operations_research::GScipSolvingStats* release_stats();
  ::operations_research::GScipSolvingStats* mutable_stats();
  void set_allocated_stats(::operations_research::GScipSolvingStats* value);
  void unsafe_arena_set_allocated_stats(::operations_research::GScipSolvingStats* value);
  ::operations_research::GScipSolvingStats* unsafe_arena_release_stats();

  private:
  const ::operations_research::GScipSolvingStats& _internal_stats() const;
  ::operations_research::GScipSolvingStats* _internal_mutable_stats();

  public:
  // .operations_research.GScipOutput.Status status = 1;
  void clear_status() ;
  ::operations_research::GScipOutput_Status status() const;
  void set_status(::operations_research::GScipOutput_Status value);

  private:
  ::operations_research::GScipOutput_Status _internal_status() const;
  void _internal_set_status(::operations_research::GScipOutput_Status value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.GScipOutput)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr status_detail_;
    ::operations_research::GScipSolvingStats* stats_;
    int status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgscip_2fgscip_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GScipParameters

// .operations_research.GScipParameters.Emphasis emphasis = 1;
inline void GScipParameters::clear_emphasis() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.emphasis_ = 0;
}
inline ::operations_research::GScipParameters_Emphasis GScipParameters::emphasis() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.emphasis)
  return _internal_emphasis();
}
inline void GScipParameters::set_emphasis(::operations_research::GScipParameters_Emphasis value) {
  _internal_set_emphasis(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.emphasis)
}
inline ::operations_research::GScipParameters_Emphasis GScipParameters::_internal_emphasis() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::GScipParameters_Emphasis>(_impl_.emphasis_);
}
inline void GScipParameters::_internal_set_emphasis(::operations_research::GScipParameters_Emphasis value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.emphasis_ = value;
}

// optional .operations_research.GScipParameters.MetaParamValue heuristics = 2;
inline bool GScipParameters::has_heuristics() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GScipParameters::clear_heuristics() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.heuristics_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::heuristics() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.heuristics)
  return _internal_heuristics();
}
inline void GScipParameters::set_heuristics(::operations_research::GScipParameters_MetaParamValue value) {
  _internal_set_heuristics(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.heuristics)
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::_internal_heuristics() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::GScipParameters_MetaParamValue>(_impl_.heuristics_);
}
inline void GScipParameters::_internal_set_heuristics(::operations_research::GScipParameters_MetaParamValue value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.heuristics_ = value;
}

// optional .operations_research.GScipParameters.MetaParamValue presolve = 3;
inline bool GScipParameters::has_presolve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GScipParameters::clear_presolve() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.presolve_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::presolve() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.presolve)
  return _internal_presolve();
}
inline void GScipParameters::set_presolve(::operations_research::GScipParameters_MetaParamValue value) {
  _internal_set_presolve(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.presolve)
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::_internal_presolve() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::GScipParameters_MetaParamValue>(_impl_.presolve_);
}
inline void GScipParameters::_internal_set_presolve(::operations_research::GScipParameters_MetaParamValue value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.presolve_ = value;
}

// optional .operations_research.GScipParameters.MetaParamValue separating = 4;
inline bool GScipParameters::has_separating() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GScipParameters::clear_separating() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.separating_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::separating() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.separating)
  return _internal_separating();
}
inline void GScipParameters::set_separating(::operations_research::GScipParameters_MetaParamValue value) {
  _internal_set_separating(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.separating)
}
inline ::operations_research::GScipParameters_MetaParamValue GScipParameters::_internal_separating() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::GScipParameters_MetaParamValue>(_impl_.separating_);
}
inline void GScipParameters::_internal_set_separating(::operations_research::GScipParameters_MetaParamValue value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.separating_ = value;
}

// map<string, bool> bool_params = 5;
inline int GScipParameters::_internal_bool_params_size() const {
  return _internal_bool_params().size();
}
inline int GScipParameters::bool_params_size() const {
  return _internal_bool_params_size();
}
inline void GScipParameters::clear_bool_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bool_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, bool>& GScipParameters::_internal_bool_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bool_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, bool>& GScipParameters::bool_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.bool_params)
  return _internal_bool_params();
}
inline ::google::protobuf::Map<std::string, bool>* GScipParameters::_internal_mutable_bool_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.bool_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, bool>* GScipParameters::mutable_bool_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.bool_params)
  return _internal_mutable_bool_params();
}

// map<string, int32> int_params = 6;
inline int GScipParameters::_internal_int_params_size() const {
  return _internal_int_params().size();
}
inline int GScipParameters::int_params_size() const {
  return _internal_int_params_size();
}
inline void GScipParameters::clear_int_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.int_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GScipParameters::_internal_int_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.int_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int32_t>& GScipParameters::int_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.int_params)
  return _internal_int_params();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GScipParameters::_internal_mutable_int_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.int_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int32_t>* GScipParameters::mutable_int_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.int_params)
  return _internal_mutable_int_params();
}

// map<string, int64> long_params = 7;
inline int GScipParameters::_internal_long_params_size() const {
  return _internal_long_params().size();
}
inline int GScipParameters::long_params_size() const {
  return _internal_long_params_size();
}
inline void GScipParameters::clear_long_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.long_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& GScipParameters::_internal_long_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.long_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::int64_t>& GScipParameters::long_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.long_params)
  return _internal_long_params();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* GScipParameters::_internal_mutable_long_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.long_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::int64_t>* GScipParameters::mutable_long_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.long_params)
  return _internal_mutable_long_params();
}

// map<string, double> real_params = 8;
inline int GScipParameters::_internal_real_params_size() const {
  return _internal_real_params().size();
}
inline int GScipParameters::real_params_size() const {
  return _internal_real_params_size();
}
inline void GScipParameters::clear_real_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.real_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, double>& GScipParameters::_internal_real_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.real_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, double>& GScipParameters::real_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.real_params)
  return _internal_real_params();
}
inline ::google::protobuf::Map<std::string, double>* GScipParameters::_internal_mutable_real_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.real_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, double>* GScipParameters::mutable_real_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.real_params)
  return _internal_mutable_real_params();
}

// map<string, string> char_params = 9;
inline int GScipParameters::_internal_char_params_size() const {
  return _internal_char_params().size();
}
inline int GScipParameters::char_params_size() const {
  return _internal_char_params_size();
}
inline void GScipParameters::clear_char_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.char_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& GScipParameters::_internal_char_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.char_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& GScipParameters::char_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.char_params)
  return _internal_char_params();
}
inline ::google::protobuf::Map<std::string, std::string>* GScipParameters::_internal_mutable_char_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.char_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* GScipParameters::mutable_char_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.char_params)
  return _internal_mutable_char_params();
}

// map<string, string> string_params = 10;
inline int GScipParameters::_internal_string_params_size() const {
  return _internal_string_params().size();
}
inline int GScipParameters::string_params_size() const {
  return _internal_string_params_size();
}
inline void GScipParameters::clear_string_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.string_params_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& GScipParameters::_internal_string_params() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.string_params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& GScipParameters::string_params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:operations_research.GScipParameters.string_params)
  return _internal_string_params();
}
inline ::google::protobuf::Map<std::string, std::string>* GScipParameters::_internal_mutable_string_params() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.string_params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* GScipParameters::mutable_string_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:operations_research.GScipParameters.string_params)
  return _internal_mutable_string_params();
}

// optional bool silence_output = 11;
inline bool GScipParameters::has_silence_output() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GScipParameters::clear_silence_output() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.silence_output_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool GScipParameters::silence_output() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.silence_output)
  return _internal_silence_output();
}
inline void GScipParameters::set_silence_output(bool value) {
  _internal_set_silence_output(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.silence_output)
}
inline bool GScipParameters::_internal_silence_output() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.silence_output_;
}
inline void GScipParameters::_internal_set_silence_output(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.silence_output_ = value;
}

// bool print_detailed_solving_stats = 12;
inline void GScipParameters::clear_print_detailed_solving_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.print_detailed_solving_stats_ = false;
}
inline bool GScipParameters::print_detailed_solving_stats() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.print_detailed_solving_stats)
  return _internal_print_detailed_solving_stats();
}
inline void GScipParameters::set_print_detailed_solving_stats(bool value) {
  _internal_set_print_detailed_solving_stats(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.print_detailed_solving_stats)
}
inline bool GScipParameters::_internal_print_detailed_solving_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.print_detailed_solving_stats_;
}
inline void GScipParameters::_internal_set_print_detailed_solving_stats(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.print_detailed_solving_stats_ = value;
}

// bool print_scip_model = 13;
inline void GScipParameters::clear_print_scip_model() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.print_scip_model_ = false;
}
inline bool GScipParameters::print_scip_model() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.print_scip_model)
  return _internal_print_scip_model();
}
inline void GScipParameters::set_print_scip_model(bool value) {
  _internal_set_print_scip_model(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.print_scip_model)
}
inline bool GScipParameters::_internal_print_scip_model() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.print_scip_model_;
}
inline void GScipParameters::_internal_set_print_scip_model(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.print_scip_model_ = value;
}

// string search_logs_filename = 14;
inline void GScipParameters::clear_search_logs_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.search_logs_filename_.ClearToEmpty();
}
inline const std::string& GScipParameters::search_logs_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.search_logs_filename)
  return _internal_search_logs_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GScipParameters::set_search_logs_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.search_logs_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.search_logs_filename)
}
inline std::string* GScipParameters::mutable_search_logs_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_search_logs_filename();
  // @@protoc_insertion_point(field_mutable:operations_research.GScipParameters.search_logs_filename)
  return _s;
}
inline const std::string& GScipParameters::_internal_search_logs_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.search_logs_filename_.Get();
}
inline void GScipParameters::_internal_set_search_logs_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.search_logs_filename_.Set(value, GetArena());
}
inline std::string* GScipParameters::_internal_mutable_search_logs_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.search_logs_filename_.Mutable( GetArena());
}
inline std::string* GScipParameters::release_search_logs_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.GScipParameters.search_logs_filename)
  return _impl_.search_logs_filename_.Release();
}
inline void GScipParameters::set_allocated_search_logs_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.search_logs_filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.search_logs_filename_.IsDefault()) {
          _impl_.search_logs_filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.GScipParameters.search_logs_filename)
}

// string detailed_solving_stats_filename = 15;
inline void GScipParameters::clear_detailed_solving_stats_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detailed_solving_stats_filename_.ClearToEmpty();
}
inline const std::string& GScipParameters::detailed_solving_stats_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.detailed_solving_stats_filename)
  return _internal_detailed_solving_stats_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GScipParameters::set_detailed_solving_stats_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detailed_solving_stats_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.detailed_solving_stats_filename)
}
inline std::string* GScipParameters::mutable_detailed_solving_stats_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_detailed_solving_stats_filename();
  // @@protoc_insertion_point(field_mutable:operations_research.GScipParameters.detailed_solving_stats_filename)
  return _s;
}
inline const std::string& GScipParameters::_internal_detailed_solving_stats_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.detailed_solving_stats_filename_.Get();
}
inline void GScipParameters::_internal_set_detailed_solving_stats_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.detailed_solving_stats_filename_.Set(value, GetArena());
}
inline std::string* GScipParameters::_internal_mutable_detailed_solving_stats_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.detailed_solving_stats_filename_.Mutable( GetArena());
}
inline std::string* GScipParameters::release_detailed_solving_stats_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.GScipParameters.detailed_solving_stats_filename)
  return _impl_.detailed_solving_stats_filename_.Release();
}
inline void GScipParameters::set_allocated_detailed_solving_stats_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.detailed_solving_stats_filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.detailed_solving_stats_filename_.IsDefault()) {
          _impl_.detailed_solving_stats_filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.GScipParameters.detailed_solving_stats_filename)
}

// string scip_model_filename = 16;
inline void GScipParameters::clear_scip_model_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scip_model_filename_.ClearToEmpty();
}
inline const std::string& GScipParameters::scip_model_filename() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.scip_model_filename)
  return _internal_scip_model_filename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GScipParameters::set_scip_model_filename(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scip_model_filename_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.scip_model_filename)
}
inline std::string* GScipParameters::mutable_scip_model_filename() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_scip_model_filename();
  // @@protoc_insertion_point(field_mutable:operations_research.GScipParameters.scip_model_filename)
  return _s;
}
inline const std::string& GScipParameters::_internal_scip_model_filename() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.scip_model_filename_.Get();
}
inline void GScipParameters::_internal_set_scip_model_filename(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.scip_model_filename_.Set(value, GetArena());
}
inline std::string* GScipParameters::_internal_mutable_scip_model_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.scip_model_filename_.Mutable( GetArena());
}
inline std::string* GScipParameters::release_scip_model_filename() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.GScipParameters.scip_model_filename)
  return _impl_.scip_model_filename_.Release();
}
inline void GScipParameters::set_allocated_scip_model_filename(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.scip_model_filename_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.scip_model_filename_.IsDefault()) {
          _impl_.scip_model_filename_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.GScipParameters.scip_model_filename)
}

// optional int32 num_solutions = 17;
inline bool GScipParameters::has_num_solutions() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GScipParameters::clear_num_solutions() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.num_solutions_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t GScipParameters::num_solutions() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.num_solutions)
  return _internal_num_solutions();
}
inline void GScipParameters::set_num_solutions(::int32_t value) {
  _internal_set_num_solutions(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.num_solutions)
}
inline ::int32_t GScipParameters::_internal_num_solutions() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.num_solutions_;
}
inline void GScipParameters::_internal_set_num_solutions(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.num_solutions_ = value;
}

// optional double objective_limit = 18;
inline bool GScipParameters::has_objective_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GScipParameters::clear_objective_limit() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.objective_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double GScipParameters::objective_limit() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipParameters.objective_limit)
  return _internal_objective_limit();
}
inline void GScipParameters::set_objective_limit(double value) {
  _internal_set_objective_limit(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipParameters.objective_limit)
}
inline double GScipParameters::_internal_objective_limit() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.objective_limit_;
}
inline void GScipParameters::_internal_set_objective_limit(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.objective_limit_ = value;
}

// -------------------------------------------------------------------

// GScipSolvingStats

// double best_objective = 1;
inline void GScipSolvingStats::clear_best_objective() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.best_objective_ = 0;
}
inline double GScipSolvingStats::best_objective() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.best_objective)
  return _internal_best_objective();
}
inline void GScipSolvingStats::set_best_objective(double value) {
  _internal_set_best_objective(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.best_objective)
}
inline double GScipSolvingStats::_internal_best_objective() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.best_objective_;
}
inline void GScipSolvingStats::_internal_set_best_objective(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.best_objective_ = value;
}

// double best_bound = 2;
inline void GScipSolvingStats::clear_best_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.best_bound_ = 0;
}
inline double GScipSolvingStats::best_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.best_bound)
  return _internal_best_bound();
}
inline void GScipSolvingStats::set_best_bound(double value) {
  _internal_set_best_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.best_bound)
}
inline double GScipSolvingStats::_internal_best_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.best_bound_;
}
inline void GScipSolvingStats::_internal_set_best_bound(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.best_bound_ = value;
}

// int64 primal_simplex_iterations = 3;
inline void GScipSolvingStats::clear_primal_simplex_iterations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.primal_simplex_iterations_ = ::int64_t{0};
}
inline ::int64_t GScipSolvingStats::primal_simplex_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.primal_simplex_iterations)
  return _internal_primal_simplex_iterations();
}
inline void GScipSolvingStats::set_primal_simplex_iterations(::int64_t value) {
  _internal_set_primal_simplex_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.primal_simplex_iterations)
}
inline ::int64_t GScipSolvingStats::_internal_primal_simplex_iterations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.primal_simplex_iterations_;
}
inline void GScipSolvingStats::_internal_set_primal_simplex_iterations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.primal_simplex_iterations_ = value;
}

// int64 dual_simplex_iterations = 4;
inline void GScipSolvingStats::clear_dual_simplex_iterations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.dual_simplex_iterations_ = ::int64_t{0};
}
inline ::int64_t GScipSolvingStats::dual_simplex_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.dual_simplex_iterations)
  return _internal_dual_simplex_iterations();
}
inline void GScipSolvingStats::set_dual_simplex_iterations(::int64_t value) {
  _internal_set_dual_simplex_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.dual_simplex_iterations)
}
inline ::int64_t GScipSolvingStats::_internal_dual_simplex_iterations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.dual_simplex_iterations_;
}
inline void GScipSolvingStats::_internal_set_dual_simplex_iterations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.dual_simplex_iterations_ = value;
}

// int64 total_lp_iterations = 5;
inline void GScipSolvingStats::clear_total_lp_iterations() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.total_lp_iterations_ = ::int64_t{0};
}
inline ::int64_t GScipSolvingStats::total_lp_iterations() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.total_lp_iterations)
  return _internal_total_lp_iterations();
}
inline void GScipSolvingStats::set_total_lp_iterations(::int64_t value) {
  _internal_set_total_lp_iterations(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.total_lp_iterations)
}
inline ::int64_t GScipSolvingStats::_internal_total_lp_iterations() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.total_lp_iterations_;
}
inline void GScipSolvingStats::_internal_set_total_lp_iterations(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.total_lp_iterations_ = value;
}

// int64 node_count = 6;
inline void GScipSolvingStats::clear_node_count() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.node_count_ = ::int64_t{0};
}
inline ::int64_t GScipSolvingStats::node_count() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.node_count)
  return _internal_node_count();
}
inline void GScipSolvingStats::set_node_count(::int64_t value) {
  _internal_set_node_count(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.node_count)
}
inline ::int64_t GScipSolvingStats::_internal_node_count() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.node_count_;
}
inline void GScipSolvingStats::_internal_set_node_count(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.node_count_ = value;
}

// double first_lp_relaxation_bound = 7;
inline void GScipSolvingStats::clear_first_lp_relaxation_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.first_lp_relaxation_bound_ = 0;
}
inline double GScipSolvingStats::first_lp_relaxation_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.first_lp_relaxation_bound)
  return _internal_first_lp_relaxation_bound();
}
inline void GScipSolvingStats::set_first_lp_relaxation_bound(double value) {
  _internal_set_first_lp_relaxation_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.first_lp_relaxation_bound)
}
inline double GScipSolvingStats::_internal_first_lp_relaxation_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.first_lp_relaxation_bound_;
}
inline void GScipSolvingStats::_internal_set_first_lp_relaxation_bound(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.first_lp_relaxation_bound_ = value;
}

// double root_node_bound = 8;
inline void GScipSolvingStats::clear_root_node_bound() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.root_node_bound_ = 0;
}
inline double GScipSolvingStats::root_node_bound() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.root_node_bound)
  return _internal_root_node_bound();
}
inline void GScipSolvingStats::set_root_node_bound(double value) {
  _internal_set_root_node_bound(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.root_node_bound)
}
inline double GScipSolvingStats::_internal_root_node_bound() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.root_node_bound_;
}
inline void GScipSolvingStats::_internal_set_root_node_bound(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.root_node_bound_ = value;
}

// double deterministic_time = 9;
inline void GScipSolvingStats::clear_deterministic_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.deterministic_time_ = 0;
}
inline double GScipSolvingStats::deterministic_time() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipSolvingStats.deterministic_time)
  return _internal_deterministic_time();
}
inline void GScipSolvingStats::set_deterministic_time(double value) {
  _internal_set_deterministic_time(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipSolvingStats.deterministic_time)
}
inline double GScipSolvingStats::_internal_deterministic_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.deterministic_time_;
}
inline void GScipSolvingStats::_internal_set_deterministic_time(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.deterministic_time_ = value;
}

// -------------------------------------------------------------------

// GScipOutput

// .operations_research.GScipOutput.Status status = 1;
inline void GScipOutput::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = 0;
}
inline ::operations_research::GScipOutput_Status GScipOutput::status() const {
  // @@protoc_insertion_point(field_get:operations_research.GScipOutput.status)
  return _internal_status();
}
inline void GScipOutput::set_status(::operations_research::GScipOutput_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:operations_research.GScipOutput.status)
}
inline ::operations_research::GScipOutput_Status GScipOutput::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::GScipOutput_Status>(_impl_.status_);
}
inline void GScipOutput::_internal_set_status(::operations_research::GScipOutput_Status value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_ = value;
}

// string status_detail = 2;
inline void GScipOutput::clear_status_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& GScipOutput::status_detail() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.GScipOutput.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GScipOutput::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:operations_research.GScipOutput.status_detail)
}
inline std::string* GScipOutput::mutable_status_detail() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:operations_research.GScipOutput.status_detail)
  return _s;
}
inline const std::string& GScipOutput::_internal_status_detail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_detail_.Get();
}
inline void GScipOutput::_internal_set_status_detail(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.status_detail_.Set(value, GetArena());
}
inline std::string* GScipOutput::_internal_mutable_status_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.status_detail_.Mutable( GetArena());
}
inline std::string* GScipOutput::release_status_detail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.GScipOutput.status_detail)
  return _impl_.status_detail_.Release();
}
inline void GScipOutput::set_allocated_status_detail(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_detail_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:operations_research.GScipOutput.status_detail)
}

// .operations_research.GScipSolvingStats stats = 3;
inline bool GScipOutput::has_stats() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stats_ != nullptr);
  return value;
}
inline void GScipOutput::clear_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::operations_research::GScipSolvingStats& GScipOutput::_internal_stats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::operations_research::GScipSolvingStats* p = _impl_.stats_;
  return p != nullptr ? *p : reinterpret_cast<const ::operations_research::GScipSolvingStats&>(::operations_research::_GScipSolvingStats_default_instance_);
}
inline const ::operations_research::GScipSolvingStats& GScipOutput::stats() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.GScipOutput.stats)
  return _internal_stats();
}
inline void GScipOutput::unsafe_arena_set_allocated_stats(::operations_research::GScipSolvingStats* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stats_);
  }
  _impl_.stats_ = reinterpret_cast<::operations_research::GScipSolvingStats*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:operations_research.GScipOutput.stats)
}
inline ::operations_research::GScipSolvingStats* GScipOutput::release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::GScipSolvingStats* released = _impl_.stats_;
  _impl_.stats_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::operations_research::GScipSolvingStats* GScipOutput::unsafe_arena_release_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:operations_research.GScipOutput.stats)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::operations_research::GScipSolvingStats* temp = _impl_.stats_;
  _impl_.stats_ = nullptr;
  return temp;
}
inline ::operations_research::GScipSolvingStats* GScipOutput::_internal_mutable_stats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::operations_research::GScipSolvingStats>(GetArena());
    _impl_.stats_ = reinterpret_cast<::operations_research::GScipSolvingStats*>(p);
  }
  return _impl_.stats_;
}
inline ::operations_research::GScipSolvingStats* GScipOutput::mutable_stats() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::operations_research::GScipSolvingStats* _msg = _internal_mutable_stats();
  // @@protoc_insertion_point(field_mutable:operations_research.GScipOutput.stats)
  return _msg;
}
inline void GScipOutput::set_allocated_stats(::operations_research::GScipSolvingStats* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::operations_research::GScipSolvingStats*>(_impl_.stats_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::operations_research::GScipSolvingStats*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.stats_ = reinterpret_cast<::operations_research::GScipSolvingStats*>(value);
  // @@protoc_insertion_point(field_set_allocated:operations_research.GScipOutput.stats)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::GScipParameters_Emphasis> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::GScipParameters_Emphasis>() {
  return ::operations_research::GScipParameters_Emphasis_descriptor();
}
template <>
struct is_proto_enum<::operations_research::GScipParameters_MetaParamValue> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::GScipParameters_MetaParamValue>() {
  return ::operations_research::GScipParameters_MetaParamValue_descriptor();
}
template <>
struct is_proto_enum<::operations_research::GScipOutput_Status> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::GScipOutput_Status>() {
  return ::operations_research::GScipOutput_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fgscip_2fgscip_2eproto_2epb_2eh
