// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/constraint_solver/routing_enums.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
namespace operations_research {
class FirstSolutionStrategy;
struct FirstSolutionStrategyDefaultTypeInternal;
extern FirstSolutionStrategyDefaultTypeInternal _FirstSolutionStrategy_default_instance_;
class LocalSearchMetaheuristic;
struct LocalSearchMetaheuristicDefaultTypeInternal;
extern LocalSearchMetaheuristicDefaultTypeInternal _LocalSearchMetaheuristic_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum FirstSolutionStrategy_Value : int {
  FirstSolutionStrategy_Value_UNSET = 0,
  FirstSolutionStrategy_Value_AUTOMATIC = 15,
  FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC = 3,
  FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC = 4,
  FirstSolutionStrategy_Value_EVALUATOR_STRATEGY = 5,
  FirstSolutionStrategy_Value_SAVINGS = 10,
  FirstSolutionStrategy_Value_SWEEP = 11,
  FirstSolutionStrategy_Value_CHRISTOFIDES = 13,
  FirstSolutionStrategy_Value_ALL_UNPERFORMED = 6,
  FirstSolutionStrategy_Value_BEST_INSERTION = 7,
  FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION = 8,
  FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION = 14,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION = 9,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_COST_INSERTION = 16,
  FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC = 1,
  FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC = 2,
  FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE = 12,
  FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FirstSolutionStrategy_Value_FirstSolutionStrategy_Value_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FirstSolutionStrategy_Value_IsValid(int value);
extern const uint32_t FirstSolutionStrategy_Value_internal_data_[];
constexpr FirstSolutionStrategy_Value FirstSolutionStrategy_Value_Value_MIN = static_cast<FirstSolutionStrategy_Value>(0);
constexpr FirstSolutionStrategy_Value FirstSolutionStrategy_Value_Value_MAX = static_cast<FirstSolutionStrategy_Value>(16);
constexpr int FirstSolutionStrategy_Value_Value_ARRAYSIZE = 16 + 1;
const ::google::protobuf::EnumDescriptor*
FirstSolutionStrategy_Value_descriptor();
template <typename T>
const std::string& FirstSolutionStrategy_Value_Name(T value) {
  static_assert(std::is_same<T, FirstSolutionStrategy_Value>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Value_Name().");
  return FirstSolutionStrategy_Value_Name(static_cast<FirstSolutionStrategy_Value>(value));
}
template <>
inline const std::string& FirstSolutionStrategy_Value_Name(FirstSolutionStrategy_Value value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FirstSolutionStrategy_Value_descriptor,
                                                 0, 16>(
      static_cast<int>(value));
}
inline bool FirstSolutionStrategy_Value_Parse(absl::string_view name, FirstSolutionStrategy_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FirstSolutionStrategy_Value>(
      FirstSolutionStrategy_Value_descriptor(), name, value);
}
enum LocalSearchMetaheuristic_Value : int {
  LocalSearchMetaheuristic_Value_UNSET = 0,
  LocalSearchMetaheuristic_Value_AUTOMATIC = 6,
  LocalSearchMetaheuristic_Value_GREEDY_DESCENT = 1,
  LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH = 2,
  LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING = 3,
  LocalSearchMetaheuristic_Value_TABU_SEARCH = 4,
  LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH = 5,
  LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LocalSearchMetaheuristic_Value_LocalSearchMetaheuristic_Value_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LocalSearchMetaheuristic_Value_IsValid(int value);
extern const uint32_t LocalSearchMetaheuristic_Value_internal_data_[];
constexpr LocalSearchMetaheuristic_Value LocalSearchMetaheuristic_Value_Value_MIN = static_cast<LocalSearchMetaheuristic_Value>(0);
constexpr LocalSearchMetaheuristic_Value LocalSearchMetaheuristic_Value_Value_MAX = static_cast<LocalSearchMetaheuristic_Value>(6);
constexpr int LocalSearchMetaheuristic_Value_Value_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
LocalSearchMetaheuristic_Value_descriptor();
template <typename T>
const std::string& LocalSearchMetaheuristic_Value_Name(T value) {
  static_assert(std::is_same<T, LocalSearchMetaheuristic_Value>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Value_Name().");
  return LocalSearchMetaheuristic_Value_Name(static_cast<LocalSearchMetaheuristic_Value>(value));
}
template <>
inline const std::string& LocalSearchMetaheuristic_Value_Name(LocalSearchMetaheuristic_Value value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LocalSearchMetaheuristic_Value_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool LocalSearchMetaheuristic_Value_Parse(absl::string_view name, LocalSearchMetaheuristic_Value* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LocalSearchMetaheuristic_Value>(
      LocalSearchMetaheuristic_Value_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class LocalSearchMetaheuristic final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:operations_research.LocalSearchMetaheuristic) */ {
 public:
  inline LocalSearchMetaheuristic() : LocalSearchMetaheuristic(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR LocalSearchMetaheuristic(::google::protobuf::internal::ConstantInitialized);

  inline LocalSearchMetaheuristic(const LocalSearchMetaheuristic& from)
      : LocalSearchMetaheuristic(nullptr, from) {}
  LocalSearchMetaheuristic(LocalSearchMetaheuristic&& from) noexcept
    : LocalSearchMetaheuristic() {
    *this = ::std::move(from);
  }

  inline LocalSearchMetaheuristic& operator=(const LocalSearchMetaheuristic& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalSearchMetaheuristic& operator=(LocalSearchMetaheuristic&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocalSearchMetaheuristic& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalSearchMetaheuristic* internal_default_instance() {
    return reinterpret_cast<const LocalSearchMetaheuristic*>(
               &_LocalSearchMetaheuristic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocalSearchMetaheuristic& a, LocalSearchMetaheuristic& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalSearchMetaheuristic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalSearchMetaheuristic* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalSearchMetaheuristic* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalSearchMetaheuristic>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LocalSearchMetaheuristic& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LocalSearchMetaheuristic& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.LocalSearchMetaheuristic";
  }
  protected:
  explicit LocalSearchMetaheuristic(::google::protobuf::Arena* arena);
  LocalSearchMetaheuristic(::google::protobuf::Arena* arena, const LocalSearchMetaheuristic& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Value = LocalSearchMetaheuristic_Value;
  static constexpr Value UNSET = LocalSearchMetaheuristic_Value_UNSET;
  static constexpr Value AUTOMATIC = LocalSearchMetaheuristic_Value_AUTOMATIC;
  static constexpr Value GREEDY_DESCENT = LocalSearchMetaheuristic_Value_GREEDY_DESCENT;
  static constexpr Value GUIDED_LOCAL_SEARCH = LocalSearchMetaheuristic_Value_GUIDED_LOCAL_SEARCH;
  static constexpr Value SIMULATED_ANNEALING = LocalSearchMetaheuristic_Value_SIMULATED_ANNEALING;
  static constexpr Value TABU_SEARCH = LocalSearchMetaheuristic_Value_TABU_SEARCH;
  static constexpr Value GENERIC_TABU_SEARCH = LocalSearchMetaheuristic_Value_GENERIC_TABU_SEARCH;
  static inline bool Value_IsValid(int value) {
    return LocalSearchMetaheuristic_Value_IsValid(value);
  }
  static constexpr Value Value_MIN = LocalSearchMetaheuristic_Value_Value_MIN;
  static constexpr Value Value_MAX = LocalSearchMetaheuristic_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE = LocalSearchMetaheuristic_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Value_descriptor() {
    return LocalSearchMetaheuristic_Value_descriptor();
  }
  template <typename T>
  static inline const std::string& Value_Name(T value) {
    return LocalSearchMetaheuristic_Value_Name(value);
  }
  static inline bool Value_Parse(absl::string_view name, Value* value) {
    return LocalSearchMetaheuristic_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:operations_research.LocalSearchMetaheuristic)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
};// -------------------------------------------------------------------

class FirstSolutionStrategy final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:operations_research.FirstSolutionStrategy) */ {
 public:
  inline FirstSolutionStrategy() : FirstSolutionStrategy(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FirstSolutionStrategy(::google::protobuf::internal::ConstantInitialized);

  inline FirstSolutionStrategy(const FirstSolutionStrategy& from)
      : FirstSolutionStrategy(nullptr, from) {}
  FirstSolutionStrategy(FirstSolutionStrategy&& from) noexcept
    : FirstSolutionStrategy() {
    *this = ::std::move(from);
  }

  inline FirstSolutionStrategy& operator=(const FirstSolutionStrategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirstSolutionStrategy& operator=(FirstSolutionStrategy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FirstSolutionStrategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const FirstSolutionStrategy* internal_default_instance() {
    return reinterpret_cast<const FirstSolutionStrategy*>(
               &_FirstSolutionStrategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FirstSolutionStrategy& a, FirstSolutionStrategy& b) {
    a.Swap(&b);
  }
  inline void Swap(FirstSolutionStrategy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FirstSolutionStrategy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FirstSolutionStrategy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FirstSolutionStrategy>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const FirstSolutionStrategy& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const FirstSolutionStrategy& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.FirstSolutionStrategy";
  }
  protected:
  explicit FirstSolutionStrategy(::google::protobuf::Arena* arena);
  FirstSolutionStrategy(::google::protobuf::Arena* arena, const FirstSolutionStrategy& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Value = FirstSolutionStrategy_Value;
  static constexpr Value UNSET = FirstSolutionStrategy_Value_UNSET;
  static constexpr Value AUTOMATIC = FirstSolutionStrategy_Value_AUTOMATIC;
  static constexpr Value PATH_CHEAPEST_ARC = FirstSolutionStrategy_Value_PATH_CHEAPEST_ARC;
  static constexpr Value PATH_MOST_CONSTRAINED_ARC = FirstSolutionStrategy_Value_PATH_MOST_CONSTRAINED_ARC;
  static constexpr Value EVALUATOR_STRATEGY = FirstSolutionStrategy_Value_EVALUATOR_STRATEGY;
  static constexpr Value SAVINGS = FirstSolutionStrategy_Value_SAVINGS;
  static constexpr Value SWEEP = FirstSolutionStrategy_Value_SWEEP;
  static constexpr Value CHRISTOFIDES = FirstSolutionStrategy_Value_CHRISTOFIDES;
  static constexpr Value ALL_UNPERFORMED = FirstSolutionStrategy_Value_ALL_UNPERFORMED;
  static constexpr Value BEST_INSERTION = FirstSolutionStrategy_Value_BEST_INSERTION;
  static constexpr Value PARALLEL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_PARALLEL_CHEAPEST_INSERTION;
  static constexpr Value SEQUENTIAL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_SEQUENTIAL_CHEAPEST_INSERTION;
  static constexpr Value LOCAL_CHEAPEST_INSERTION = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_INSERTION;
  static constexpr Value LOCAL_CHEAPEST_COST_INSERTION = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_COST_INSERTION;
  static constexpr Value GLOBAL_CHEAPEST_ARC = FirstSolutionStrategy_Value_GLOBAL_CHEAPEST_ARC;
  static constexpr Value LOCAL_CHEAPEST_ARC = FirstSolutionStrategy_Value_LOCAL_CHEAPEST_ARC;
  static constexpr Value FIRST_UNBOUND_MIN_VALUE = FirstSolutionStrategy_Value_FIRST_UNBOUND_MIN_VALUE;
  static inline bool Value_IsValid(int value) {
    return FirstSolutionStrategy_Value_IsValid(value);
  }
  static constexpr Value Value_MIN = FirstSolutionStrategy_Value_Value_MIN;
  static constexpr Value Value_MAX = FirstSolutionStrategy_Value_Value_MAX;
  static constexpr int Value_ARRAYSIZE = FirstSolutionStrategy_Value_Value_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Value_descriptor() {
    return FirstSolutionStrategy_Value_descriptor();
  }
  template <typename T>
  static inline const std::string& Value_Name(T value) {
    return FirstSolutionStrategy_Value_Name(value);
  }
  static inline bool Value_Parse(absl::string_view name, Value* value) {
    return FirstSolutionStrategy_Value_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:operations_research.FirstSolutionStrategy)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FirstSolutionStrategy

// -------------------------------------------------------------------

// LocalSearchMetaheuristic

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::FirstSolutionStrategy_Value> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::FirstSolutionStrategy_Value>() {
  return ::operations_research::FirstSolutionStrategy_Value_descriptor();
}
template <>
struct is_proto_enum<::operations_research::LocalSearchMetaheuristic_Value> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::LocalSearchMetaheuristic_Value>() {
  return ::operations_research::LocalSearchMetaheuristic_Value_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fconstraint_5fsolver_2frouting_5fenums_2eproto_2epb_2eh
