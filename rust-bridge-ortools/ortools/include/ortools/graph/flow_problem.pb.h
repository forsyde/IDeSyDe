// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ortools/graph/flow_problem.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_ortools_2fgraph_2fflow_5fproblem_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_ortools_2fgraph_2fflow_5fproblem_2eproto;
namespace operations_research {
class FlowArcProto;
struct FlowArcProtoDefaultTypeInternal;
extern FlowArcProtoDefaultTypeInternal _FlowArcProto_default_instance_;
class FlowModelProto;
struct FlowModelProtoDefaultTypeInternal;
extern FlowModelProtoDefaultTypeInternal _FlowModelProto_default_instance_;
class FlowNodeProto;
struct FlowNodeProtoDefaultTypeInternal;
extern FlowNodeProtoDefaultTypeInternal _FlowNodeProto_default_instance_;
}  // namespace operations_research
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace operations_research {
enum FlowModelProto_ProblemType : int {
  FlowModelProto_ProblemType_LINEAR_SUM_ASSIGNMENT = 0,
  FlowModelProto_ProblemType_MAX_FLOW = 1,
  FlowModelProto_ProblemType_MIN_COST_FLOW = 2,
};

bool FlowModelProto_ProblemType_IsValid(int value);
extern const uint32_t FlowModelProto_ProblemType_internal_data_[];
constexpr FlowModelProto_ProblemType FlowModelProto_ProblemType_ProblemType_MIN = static_cast<FlowModelProto_ProblemType>(0);
constexpr FlowModelProto_ProblemType FlowModelProto_ProblemType_ProblemType_MAX = static_cast<FlowModelProto_ProblemType>(2);
constexpr int FlowModelProto_ProblemType_ProblemType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
FlowModelProto_ProblemType_descriptor();
template <typename T>
const std::string& FlowModelProto_ProblemType_Name(T value) {
  static_assert(std::is_same<T, FlowModelProto_ProblemType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ProblemType_Name().");
  return FlowModelProto_ProblemType_Name(static_cast<FlowModelProto_ProblemType>(value));
}
template <>
inline const std::string& FlowModelProto_ProblemType_Name(FlowModelProto_ProblemType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FlowModelProto_ProblemType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool FlowModelProto_ProblemType_Parse(absl::string_view name, FlowModelProto_ProblemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FlowModelProto_ProblemType>(
      FlowModelProto_ProblemType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class FlowNodeProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowNodeProto) */ {
 public:
  inline FlowNodeProto() : FlowNodeProto(nullptr) {}
  ~FlowNodeProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlowNodeProto(::google::protobuf::internal::ConstantInitialized);

  inline FlowNodeProto(const FlowNodeProto& from)
      : FlowNodeProto(nullptr, from) {}
  FlowNodeProto(FlowNodeProto&& from) noexcept
    : FlowNodeProto() {
    *this = ::std::move(from);
  }

  inline FlowNodeProto& operator=(const FlowNodeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowNodeProto& operator=(FlowNodeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowNodeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowNodeProto* internal_default_instance() {
    return reinterpret_cast<const FlowNodeProto*>(
               &_FlowNodeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FlowNodeProto& a, FlowNodeProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowNodeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowNodeProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowNodeProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowNodeProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlowNodeProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlowNodeProto& from) {
    FlowNodeProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlowNodeProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.FlowNodeProto";
  }
  protected:
  explicit FlowNodeProto(::google::protobuf::Arena* arena);
  FlowNodeProto(::google::protobuf::Arena* arena, const FlowNodeProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSupplyFieldNumber = 2,
  };
  // optional int64 id = 1;
  bool has_id() const;
  void clear_id() ;
  ::int64_t id() const;
  void set_id(::int64_t value);

  private:
  ::int64_t _internal_id() const;
  void _internal_set_id(::int64_t value);

  public:
  // optional int64 supply = 2 [default = 0];
  bool has_supply() const;
  void clear_supply() ;
  ::int64_t supply() const;
  void set_supply(::int64_t value);

  private:
  ::int64_t _internal_supply() const;
  void _internal_set_supply(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.FlowNodeProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t id_;
    ::int64_t supply_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};// -------------------------------------------------------------------

class FlowArcProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowArcProto) */ {
 public:
  inline FlowArcProto() : FlowArcProto(nullptr) {}
  ~FlowArcProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlowArcProto(::google::protobuf::internal::ConstantInitialized);

  inline FlowArcProto(const FlowArcProto& from)
      : FlowArcProto(nullptr, from) {}
  FlowArcProto(FlowArcProto&& from) noexcept
    : FlowArcProto() {
    *this = ::std::move(from);
  }

  inline FlowArcProto& operator=(const FlowArcProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowArcProto& operator=(FlowArcProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowArcProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowArcProto* internal_default_instance() {
    return reinterpret_cast<const FlowArcProto*>(
               &_FlowArcProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FlowArcProto& a, FlowArcProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowArcProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowArcProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowArcProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowArcProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlowArcProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlowArcProto& from) {
    FlowArcProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlowArcProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.FlowArcProto";
  }
  protected:
  explicit FlowArcProto(::google::protobuf::Arena* arena);
  FlowArcProto(::google::protobuf::Arena* arena, const FlowArcProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTailFieldNumber = 1,
    kHeadFieldNumber = 2,
    kUnitCostFieldNumber = 4,
    kCapacityFieldNumber = 3,
  };
  // optional int64 tail = 1;
  bool has_tail() const;
  void clear_tail() ;
  ::int64_t tail() const;
  void set_tail(::int64_t value);

  private:
  ::int64_t _internal_tail() const;
  void _internal_set_tail(::int64_t value);

  public:
  // optional int64 head = 2;
  bool has_head() const;
  void clear_head() ;
  ::int64_t head() const;
  void set_head(::int64_t value);

  private:
  ::int64_t _internal_head() const;
  void _internal_set_head(::int64_t value);

  public:
  // optional int64 unit_cost = 4 [default = 0];
  bool has_unit_cost() const;
  void clear_unit_cost() ;
  ::int64_t unit_cost() const;
  void set_unit_cost(::int64_t value);

  private:
  ::int64_t _internal_unit_cost() const;
  void _internal_set_unit_cost(::int64_t value);

  public:
  // optional int64 capacity = 3 [default = 1];
  bool has_capacity() const;
  void clear_capacity() ;
  ::int64_t capacity() const;
  void set_capacity(::int64_t value);

  private:
  ::int64_t _internal_capacity() const;
  void _internal_set_capacity(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.FlowArcProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int64_t tail_;
    ::int64_t head_;
    ::int64_t unit_cost_;
    ::int64_t capacity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};// -------------------------------------------------------------------

class FlowModelProto final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:operations_research.FlowModelProto) */ {
 public:
  inline FlowModelProto() : FlowModelProto(nullptr) {}
  ~FlowModelProto() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FlowModelProto(::google::protobuf::internal::ConstantInitialized);

  inline FlowModelProto(const FlowModelProto& from)
      : FlowModelProto(nullptr, from) {}
  FlowModelProto(FlowModelProto&& from) noexcept
    : FlowModelProto() {
    *this = ::std::move(from);
  }

  inline FlowModelProto& operator=(const FlowModelProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowModelProto& operator=(FlowModelProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FlowModelProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const FlowModelProto* internal_default_instance() {
    return reinterpret_cast<const FlowModelProto*>(
               &_FlowModelProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FlowModelProto& a, FlowModelProto& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowModelProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowModelProto* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FlowModelProto* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FlowModelProto>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FlowModelProto& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FlowModelProto& from) {
    FlowModelProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FlowModelProto* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "operations_research.FlowModelProto";
  }
  protected:
  explicit FlowModelProto(::google::protobuf::Arena* arena);
  FlowModelProto(::google::protobuf::Arena* arena, const FlowModelProto& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ProblemType = FlowModelProto_ProblemType;
  static constexpr ProblemType LINEAR_SUM_ASSIGNMENT = FlowModelProto_ProblemType_LINEAR_SUM_ASSIGNMENT;
  static constexpr ProblemType MAX_FLOW = FlowModelProto_ProblemType_MAX_FLOW;
  static constexpr ProblemType MIN_COST_FLOW = FlowModelProto_ProblemType_MIN_COST_FLOW;
  static inline bool ProblemType_IsValid(int value) {
    return FlowModelProto_ProblemType_IsValid(value);
  }
  static constexpr ProblemType ProblemType_MIN = FlowModelProto_ProblemType_ProblemType_MIN;
  static constexpr ProblemType ProblemType_MAX = FlowModelProto_ProblemType_ProblemType_MAX;
  static constexpr int ProblemType_ARRAYSIZE = FlowModelProto_ProblemType_ProblemType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ProblemType_descriptor() {
    return FlowModelProto_ProblemType_descriptor();
  }
  template <typename T>
  static inline const std::string& ProblemType_Name(T value) {
    return FlowModelProto_ProblemType_Name(value);
  }
  static inline bool ProblemType_Parse(absl::string_view name, ProblemType* value) {
    return FlowModelProto_ProblemType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kArcsFieldNumber = 2,
    kProblemTypeFieldNumber = 3,
  };
  // repeated .operations_research.FlowNodeProto nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;

  public:
  void clear_nodes() ;
  ::operations_research::FlowNodeProto* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::FlowNodeProto >*
      mutable_nodes();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>& _internal_nodes() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>* _internal_mutable_nodes();
  public:
  const ::operations_research::FlowNodeProto& nodes(int index) const;
  ::operations_research::FlowNodeProto* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::FlowNodeProto >&
      nodes() const;
  // repeated .operations_research.FlowArcProto arcs = 2;
  int arcs_size() const;
  private:
  int _internal_arcs_size() const;

  public:
  void clear_arcs() ;
  ::operations_research::FlowArcProto* mutable_arcs(int index);
  ::google::protobuf::RepeatedPtrField< ::operations_research::FlowArcProto >*
      mutable_arcs();
  private:
  const ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>& _internal_arcs() const;
  ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>* _internal_mutable_arcs();
  public:
  const ::operations_research::FlowArcProto& arcs(int index) const;
  ::operations_research::FlowArcProto* add_arcs();
  const ::google::protobuf::RepeatedPtrField< ::operations_research::FlowArcProto >&
      arcs() const;
  // optional .operations_research.FlowModelProto.ProblemType problem_type = 3;
  bool has_problem_type() const;
  void clear_problem_type() ;
  ::operations_research::FlowModelProto_ProblemType problem_type() const;
  void set_problem_type(::operations_research::FlowModelProto_ProblemType value);

  private:
  ::operations_research::FlowModelProto_ProblemType _internal_problem_type() const;
  void _internal_set_problem_type(::operations_research::FlowModelProto_ProblemType value);

  public:
  // @@protoc_insertion_point(class_scope:operations_research.FlowModelProto)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::FlowNodeProto > nodes_;
    ::google::protobuf::RepeatedPtrField< ::operations_research::FlowArcProto > arcs_;
    int problem_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ortools_2fgraph_2fflow_5fproblem_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FlowArcProto

// optional int64 tail = 1;
inline bool FlowArcProto::has_tail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FlowArcProto::clear_tail() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.tail_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FlowArcProto::tail() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.tail)
  return _internal_tail();
}
inline void FlowArcProto::set_tail(::int64_t value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.tail)
}
inline ::int64_t FlowArcProto::_internal_tail() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.tail_;
}
inline void FlowArcProto::_internal_set_tail(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tail_ = value;
}

// optional int64 head = 2;
inline bool FlowArcProto::has_head() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FlowArcProto::clear_head() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.head_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FlowArcProto::head() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.head)
  return _internal_head();
}
inline void FlowArcProto::set_head(::int64_t value) {
  _internal_set_head(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.head)
}
inline ::int64_t FlowArcProto::_internal_head() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.head_;
}
inline void FlowArcProto::_internal_set_head(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.head_ = value;
}

// optional int64 capacity = 3 [default = 1];
inline bool FlowArcProto::has_capacity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void FlowArcProto::clear_capacity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.capacity_ = ::int64_t{1};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t FlowArcProto::capacity() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.capacity)
  return _internal_capacity();
}
inline void FlowArcProto::set_capacity(::int64_t value) {
  _internal_set_capacity(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.capacity)
}
inline ::int64_t FlowArcProto::_internal_capacity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.capacity_;
}
inline void FlowArcProto::_internal_set_capacity(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.capacity_ = value;
}

// optional int64 unit_cost = 4 [default = 0];
inline bool FlowArcProto::has_unit_cost() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void FlowArcProto::clear_unit_cost() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.unit_cost_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t FlowArcProto::unit_cost() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowArcProto.unit_cost)
  return _internal_unit_cost();
}
inline void FlowArcProto::set_unit_cost(::int64_t value) {
  _internal_set_unit_cost(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowArcProto.unit_cost)
}
inline ::int64_t FlowArcProto::_internal_unit_cost() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.unit_cost_;
}
inline void FlowArcProto::_internal_set_unit_cost(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.unit_cost_ = value;
}

// -------------------------------------------------------------------

// FlowNodeProto

// optional int64 id = 1;
inline bool FlowNodeProto::has_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FlowNodeProto::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t FlowNodeProto::id() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowNodeProto.id)
  return _internal_id();
}
inline void FlowNodeProto::set_id(::int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowNodeProto.id)
}
inline ::int64_t FlowNodeProto::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_;
}
inline void FlowNodeProto::_internal_set_id(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.id_ = value;
}

// optional int64 supply = 2 [default = 0];
inline bool FlowNodeProto::has_supply() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void FlowNodeProto::clear_supply() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.supply_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t FlowNodeProto::supply() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowNodeProto.supply)
  return _internal_supply();
}
inline void FlowNodeProto::set_supply(::int64_t value) {
  _internal_set_supply(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowNodeProto.supply)
}
inline ::int64_t FlowNodeProto::_internal_supply() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.supply_;
}
inline void FlowNodeProto::_internal_set_supply(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.supply_ = value;
}

// -------------------------------------------------------------------

// FlowModelProto

// repeated .operations_research.FlowNodeProto nodes = 1;
inline int FlowModelProto::_internal_nodes_size() const {
  return _internal_nodes().size();
}
inline int FlowModelProto::nodes_size() const {
  return _internal_nodes_size();
}
inline void FlowModelProto::clear_nodes() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.nodes_.Clear();
}
inline ::operations_research::FlowNodeProto* FlowModelProto::mutable_nodes(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.FlowModelProto.nodes)
  return _internal_mutable_nodes()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>* FlowModelProto::mutable_nodes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.FlowModelProto.nodes)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_nodes();
}
inline const ::operations_research::FlowNodeProto& FlowModelProto::nodes(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.nodes)
  return _internal_nodes().Get(index);
}
inline ::operations_research::FlowNodeProto* FlowModelProto::add_nodes() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::FlowNodeProto* _add = _internal_mutable_nodes()->Add();
  // @@protoc_insertion_point(field_add:operations_research.FlowModelProto.nodes)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>& FlowModelProto::nodes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.FlowModelProto.nodes)
  return _internal_nodes();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>&
FlowModelProto::_internal_nodes() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.nodes_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::FlowNodeProto>*
FlowModelProto::_internal_mutable_nodes() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.nodes_;
}

// repeated .operations_research.FlowArcProto arcs = 2;
inline int FlowModelProto::_internal_arcs_size() const {
  return _internal_arcs().size();
}
inline int FlowModelProto::arcs_size() const {
  return _internal_arcs_size();
}
inline void FlowModelProto::clear_arcs() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.arcs_.Clear();
}
inline ::operations_research::FlowArcProto* FlowModelProto::mutable_arcs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:operations_research.FlowModelProto.arcs)
  return _internal_mutable_arcs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>* FlowModelProto::mutable_arcs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:operations_research.FlowModelProto.arcs)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_arcs();
}
inline const ::operations_research::FlowArcProto& FlowModelProto::arcs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.arcs)
  return _internal_arcs().Get(index);
}
inline ::operations_research::FlowArcProto* FlowModelProto::add_arcs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::operations_research::FlowArcProto* _add = _internal_mutable_arcs()->Add();
  // @@protoc_insertion_point(field_add:operations_research.FlowModelProto.arcs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>& FlowModelProto::arcs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:operations_research.FlowModelProto.arcs)
  return _internal_arcs();
}
inline const ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>&
FlowModelProto::_internal_arcs() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.arcs_;
}
inline ::google::protobuf::RepeatedPtrField<::operations_research::FlowArcProto>*
FlowModelProto::_internal_mutable_arcs() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.arcs_;
}

// optional .operations_research.FlowModelProto.ProblemType problem_type = 3;
inline bool FlowModelProto::has_problem_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void FlowModelProto::clear_problem_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.problem_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::operations_research::FlowModelProto_ProblemType FlowModelProto::problem_type() const {
  // @@protoc_insertion_point(field_get:operations_research.FlowModelProto.problem_type)
  return _internal_problem_type();
}
inline void FlowModelProto::set_problem_type(::operations_research::FlowModelProto_ProblemType value) {
  _internal_set_problem_type(value);
  // @@protoc_insertion_point(field_set:operations_research.FlowModelProto.problem_type)
}
inline ::operations_research::FlowModelProto_ProblemType FlowModelProto::_internal_problem_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::operations_research::FlowModelProto_ProblemType>(_impl_.problem_type_);
}
inline void FlowModelProto::_internal_set_problem_type(::operations_research::FlowModelProto_ProblemType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  assert(::operations_research::FlowModelProto_ProblemType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.problem_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace operations_research


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::operations_research::FlowModelProto_ProblemType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::operations_research::FlowModelProto_ProblemType>() {
  return ::operations_research::FlowModelProto_ProblemType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_ortools_2fgraph_2fflow_5fproblem_2eproto_2epb_2eh
